// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1810.501 at 17:18 on Monday, October 8, 2018.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the Burning property</summary>
		private bool[] burning;
		public DistributionStructArray<Bernoulli,bool> Burning_marginal;
		/// <summary>True if Changed_Burning_Fuse_numExample_ProbBurningPrior has executed. Set this to false to force re-execution of Changed_Burning_Fuse_numExample_ProbBurningPrior</summary>
		public bool Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone;
		/// <summary>True if Changed_Burning_numExample has executed. Set this to false to force re-execution of Changed_Burning_numExample</summary>
		public bool Changed_Burning_numExample_isDone;
		/// <summary>True if Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner has executed. Set this to false to force re-execution of Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner</summary>
		public bool Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone;
		/// <summary>True if Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner has executed. Set this to false to force re-execution of Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner</summary>
		public bool Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone;
		/// <summary>True if Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner has performed initialisation. Set this to false to force re-execution of Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner</summary>
		public bool Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised;
		/// <summary>True if Changed_Drum_numExample has executed. Set this to false to force re-execution of Changed_Drum_numExample</summary>
		public bool Changed_Drum_numExample_isDone;
		/// <summary>True if Changed_Drum_numExample_ProbDrumPrior has executed. Set this to false to force re-execution of Changed_Drum_numExample_ProbDrumPrior</summary>
		public bool Changed_Drum_numExample_ProbDrumPrior_isDone;
		/// <summary>True if Changed_Fuse_numExample has executed. Set this to false to force re-execution of Changed_Fuse_numExample</summary>
		public bool Changed_Fuse_numExample_isDone;
		/// <summary>True if Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled has executed. Set this to false to force re-execution of Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled</summary>
		public bool Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone;
		/// <summary>True if Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller has executed. Set this to false to force re-execution of Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller</summary>
		public bool Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone;
		/// <summary>True if Changed_Fuse_numExample_ProbFusePrior has executed. Set this to false to force re-execution of Changed_Fuse_numExample_ProbFusePrior</summary>
		public bool Changed_Fuse_numExample_ProbFusePrior_isDone;
		/// <summary>True if Changed_MultPages_numExample has executed. Set this to false to force re-execution of Changed_MultPages_numExample</summary>
		public bool Changed_MultPages_numExample_isDone;
		/// <summary>True if Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller has executed. Set this to false to force re-execution of Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller</summary>
		public bool Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised;
		/// <summary>True if Changed_numExample has executed. Set this to false to force re-execution of Changed_numExample</summary>
		public bool Changed_numExample_isDone;
		/// <summary>True if Changed_numExample_Paper has executed. Set this to false to force re-execution of Changed_numExample_Paper</summary>
		public bool Changed_numExample_Paper_isDone;
		/// <summary>True if Changed_numExample_Paper_ProbPaperPrior has executed. Set this to false to force re-execution of Changed_numExample_Paper_ProbPaperPrior</summary>
		public bool Changed_numExample_Paper_ProbPaperPrior_isDone;
		/// <summary>True if Changed_numExample_PaperJam has executed. Set this to false to force re-execution of Changed_numExample_PaperJam</summary>
		public bool Changed_numExample_PaperJam_isDone;
		/// <summary>True if Changed_numExample_ProbRollerPrior_Roller has executed. Set this to false to force re-execution of Changed_numExample_ProbRollerPrior_Roller</summary>
		public bool Changed_numExample_ProbRollerPrior_Roller_isDone;
		/// <summary>True if Changed_numExample_ProbTonerPrior_Toner has executed. Set this to false to force re-execution of Changed_numExample_ProbTonerPrior_Toner</summary>
		public bool Changed_numExample_ProbTonerPrior_Toner_isDone;
		/// <summary>True if Changed_numExample_Quality has executed. Set this to false to force re-execution of Changed_numExample_Quality</summary>
		public bool Changed_numExample_Quality_isDone;
		/// <summary>True if Changed_numExample_Roller has executed. Set this to false to force re-execution of Changed_numExample_Roller</summary>
		public bool Changed_numExample_Roller_isDone;
		/// <summary>True if Changed_numExample_Toner has executed. Set this to false to force re-execution of Changed_numExample_Toner</summary>
		public bool Changed_numExample_Toner_isDone;
		/// <summary>True if Changed_numExample_Wrinkled has executed. Set this to false to force re-execution of Changed_numExample_Wrinkled</summary>
		public bool Changed_numExample_Wrinkled_isDone;
		/// <summary>True if Changed_ProbBurningPrior has executed. Set this to false to force re-execution of Changed_ProbBurningPrior</summary>
		public bool Changed_ProbBurningPrior_isDone;
		/// <summary>True if Changed_ProbDrumPrior has executed. Set this to false to force re-execution of Changed_ProbDrumPrior</summary>
		public bool Changed_ProbDrumPrior_isDone;
		/// <summary>True if Changed_ProbFusePrior has executed. Set this to false to force re-execution of Changed_ProbFusePrior</summary>
		public bool Changed_ProbFusePrior_isDone;
		/// <summary>True if Changed_ProbMultPagesPrior has executed. Set this to false to force re-execution of Changed_ProbMultPagesPrior</summary>
		public bool Changed_ProbMultPagesPrior_isDone;
		/// <summary>True if Changed_ProbPaperJamPrior has executed. Set this to false to force re-execution of Changed_ProbPaperJamPrior</summary>
		public bool Changed_ProbPaperJamPrior_isDone;
		/// <summary>True if Changed_ProbPaperPrior has executed. Set this to false to force re-execution of Changed_ProbPaperPrior</summary>
		public bool Changed_ProbPaperPrior_isDone;
		/// <summary>True if Changed_ProbQualityPrior has executed. Set this to false to force re-execution of Changed_ProbQualityPrior</summary>
		public bool Changed_ProbQualityPrior_isDone;
		/// <summary>True if Changed_ProbRollerPrior has executed. Set this to false to force re-execution of Changed_ProbRollerPrior</summary>
		public bool Changed_ProbRollerPrior_isDone;
		/// <summary>True if Changed_ProbTonerPrior has executed. Set this to false to force re-execution of Changed_ProbTonerPrior</summary>
		public bool Changed_ProbTonerPrior_isDone;
		/// <summary>True if Changed_ProbWrinkledPrior has executed. Set this to false to force re-execution of Changed_ProbWrinkledPrior</summary>
		public bool Changed_ProbWrinkledPrior_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'CPTBurning'</summary>
		public DistributionStructArray<Beta,double> CPTBurning_marginal_F;
		/// <summary>Message to marginal of 'CPTMultPages'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_marginal_F;
		/// <summary>Message to marginal of 'CPTPaperJam'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_marginal_F;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep_F;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep2_F;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep_F;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep2_F;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep_F;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep2_F;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep_F;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep2_F;
		/// <summary>Message to marginal of 'CPTQuality'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_marginal_F;
		/// <summary>Message to marginal of 'CPTWrinkled'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_marginal_F;
		/// <summary>Field backing the Drum property</summary>
		private bool[] drum;
		public DistributionStructArray<Bernoulli,bool> Drum_marginal;
		/// <summary>Field backing the Fuse property</summary>
		private bool[] fuse;
		public DistributionStructArray<Bernoulli,bool> Fuse_marginal;
		/// <summary>Field backing the MultPages property</summary>
		private bool[] multPages;
		public DistributionStructArray<Bernoulli,bool> MultPages_marginal;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the numExample property</summary>
		private int NumExample;
		public PointMass<int> numExample_marginal;
		/// <summary>Field backing the Paper property</summary>
		private bool[] paper;
		public DistributionStructArray<Bernoulli,bool> Paper_marginal;
		/// <summary>Field backing the PaperJam property</summary>
		private bool[] paperJam;
		public DistributionStructArray<Bernoulli,bool> PaperJam_marginal;
		/// <summary>Field backing the ProbBurningPrior property</summary>
		private Beta[] probBurningPrior;
		public PointMass<Beta[]> ProbBurningPrior_marginal;
		/// <summary>Message to marginal of 'ProbDrum'</summary>
		public Beta ProbDrum_marginal_F;
		/// <summary>Field backing the ProbDrumPrior property</summary>
		private Beta probDrumPrior;
		public PointMass<Beta> ProbDrumPrior_marginal;
		/// <summary>Message to marginal of 'ProbFuse'</summary>
		public Beta ProbFuse_marginal_F;
		/// <summary>Field backing the ProbFusePrior property</summary>
		private Beta probFusePrior;
		public PointMass<Beta> ProbFusePrior_marginal;
		/// <summary>Field backing the ProbMultPagesPrior property</summary>
		private Beta[][] probMultPagesPrior;
		public PointMass<Beta[][]> ProbMultPagesPrior_marginal;
		/// <summary>Message to marginal of 'ProbPaper'</summary>
		public Beta ProbPaper_marginal_F;
		/// <summary>Field backing the ProbPaperJamPrior property</summary>
		private Beta[][] probPaperJamPrior;
		public PointMass<Beta[][]> ProbPaperJamPrior_marginal;
		/// <summary>Field backing the ProbPaperPrior property</summary>
		private Beta probPaperPrior;
		public PointMass<Beta> ProbPaperPrior_marginal;
		/// <summary>Field backing the ProbQualityPrior property</summary>
		private Beta[][][] probQualityPrior;
		public PointMass<Beta[][][]> ProbQualityPrior_marginal;
		/// <summary>Message to marginal of 'Probroller'</summary>
		public Beta Probroller_marginal_F;
		/// <summary>Field backing the ProbRollerPrior property</summary>
		private Beta probRollerPrior;
		public PointMass<Beta> ProbRollerPrior_marginal;
		/// <summary>Message to marginal of 'ProbToner'</summary>
		public Beta ProbToner_marginal_F;
		/// <summary>Field backing the ProbTonerPrior property</summary>
		private Beta probTonerPrior;
		public PointMass<Beta> ProbTonerPrior_marginal;
		/// <summary>Field backing the ProbWrinkledPrior property</summary>
		private Beta[][] probWrinkledPrior;
		public PointMass<Beta[][]> ProbWrinkledPrior_marginal;
		/// <summary>Field backing the Quality property</summary>
		private bool[] quality;
		public DistributionStructArray<Bernoulli,bool> Quality_marginal;
		/// <summary>Field backing the Roller property</summary>
		private bool[] roller;
		public DistributionStructArray<Bernoulli,bool> Roller_marginal;
		/// <summary>Field backing the Toner property</summary>
		private bool[] toner;
		public DistributionStructArray<Bernoulli,bool> Toner_marginal;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26_0__selector_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26_1__selector_uses_B_toDef;
		public DistributionStructArray<Bernoulli,bool> vbool26_F;
		/// <summary>Field backing the Wrinkled property</summary>
		private bool[] wrinkled;
		public DistributionStructArray<Bernoulli,bool> Wrinkled_marginal;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'Burning'</summary>
		public bool[] Burning
		{
			get {
				return this.burning;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Burning\'");
				}
				this.burning = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone = false;
				this.Changed_Burning_numExample_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Drum'</summary>
		public bool[] Drum
		{
			get {
				return this.drum;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Drum\'");
				}
				this.drum = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Drum_numExample_ProbDrumPrior_isDone = false;
				this.Changed_Drum_numExample_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Fuse'</summary>
		public bool[] Fuse
		{
			get {
				return this.fuse;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Fuse\'");
				}
				this.fuse = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = false;
				this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = false;
				this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone = false;
				this.Changed_Fuse_numExample_ProbFusePrior_isDone = false;
				this.Changed_Fuse_numExample_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'MultPages'</summary>
		public bool[] MultPages
		{
			get {
				return this.multPages;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'MultPages\'");
				}
				this.multPages = value;
				this.numberOfIterationsDone = 0;
				this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = false;
				this.Changed_MultPages_numExample_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'numExample'</summary>
		public int numExample
		{
			get {
				return this.NumExample;
			}
			set {
				if (this.NumExample!=value) {
					this.NumExample = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = false;
					this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = false;
					this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = false;
					this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone = false;
					this.Changed_numExample_ProbRollerPrior_Roller_isDone = false;
					this.Changed_numExample_Paper_ProbPaperPrior_isDone = false;
					this.Changed_numExample_ProbTonerPrior_Toner_isDone = false;
					this.Changed_Drum_numExample_ProbDrumPrior_isDone = false;
					this.Changed_Fuse_numExample_ProbFusePrior_isDone = false;
					this.Changed_numExample_PaperJam_isDone = false;
					this.Changed_MultPages_numExample_isDone = false;
					this.Changed_numExample_Wrinkled_isDone = false;
					this.Changed_numExample_Quality_isDone = false;
					this.Changed_Burning_numExample_isDone = false;
					this.Changed_numExample_Roller_isDone = false;
					this.Changed_numExample_Paper_isDone = false;
					this.Changed_numExample_Toner_isDone = false;
					this.Changed_Drum_numExample_isDone = false;
					this.Changed_Fuse_numExample_isDone = false;
					this.Changed_numExample_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
					this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
					this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'Paper'</summary>
		public bool[] Paper
		{
			get {
				return this.paper;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Paper\'");
				}
				this.paper = value;
				this.numberOfIterationsDone = 0;
				this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = false;
				this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = false;
				this.Changed_numExample_Paper_ProbPaperPrior_isDone = false;
				this.Changed_numExample_Paper_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PaperJam'</summary>
		public bool[] PaperJam
		{
			get {
				return this.paperJam;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'PaperJam\'");
				}
				this.paperJam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = false;
				this.Changed_numExample_PaperJam_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbBurningPrior'</summary>
		public Beta[] ProbBurningPrior
		{
			get {
				return this.probBurningPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbBurningPrior\'");
				}
				this.probBurningPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone = false;
				this.Changed_ProbBurningPrior_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbDrumPrior'</summary>
		public Beta ProbDrumPrior
		{
			get {
				return this.probDrumPrior;
			}
			set {
				if (this.probDrumPrior!=value) {
					this.probDrumPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Drum_numExample_ProbDrumPrior_isDone = false;
					this.Changed_ProbDrumPrior_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbFusePrior'</summary>
		public Beta ProbFusePrior
		{
			get {
				return this.probFusePrior;
			}
			set {
				if (this.probFusePrior!=value) {
					this.probFusePrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_Fuse_numExample_ProbFusePrior_isDone = false;
					this.Changed_ProbFusePrior_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbMultPagesPrior'</summary>
		public Beta[][] ProbMultPagesPrior
		{
			get {
				return this.probMultPagesPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbMultPagesPrior\'");
				}
				this.probMultPagesPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = false;
				this.Changed_ProbMultPagesPrior_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbPaperJamPrior'</summary>
		public Beta[][] ProbPaperJamPrior
		{
			get {
				return this.probPaperJamPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbPaperJamPrior\'");
				}
				this.probPaperJamPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = false;
				this.Changed_ProbPaperJamPrior_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbPaperPrior'</summary>
		public Beta ProbPaperPrior
		{
			get {
				return this.probPaperPrior;
			}
			set {
				if (this.probPaperPrior!=value) {
					this.probPaperPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numExample_Paper_ProbPaperPrior_isDone = false;
					this.Changed_ProbPaperPrior_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbQualityPrior'</summary>
		public Beta[][][] ProbQualityPrior
		{
			get {
				return this.probQualityPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbQualityPrior\'");
				}
				this.probQualityPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ProbQualityPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbRollerPrior'</summary>
		public Beta ProbRollerPrior
		{
			get {
				return this.probRollerPrior;
			}
			set {
				if (this.probRollerPrior!=value) {
					this.probRollerPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numExample_ProbRollerPrior_Roller_isDone = false;
					this.Changed_ProbRollerPrior_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbTonerPrior'</summary>
		public Beta ProbTonerPrior
		{
			get {
				return this.probTonerPrior;
			}
			set {
				if (this.probTonerPrior!=value) {
					this.probTonerPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numExample_ProbTonerPrior_Toner_isDone = false;
					this.Changed_ProbTonerPrior_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbWrinkledPrior'</summary>
		public Beta[][] ProbWrinkledPrior
		{
			get {
				return this.probWrinkledPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbWrinkledPrior\'");
				}
				this.probWrinkledPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = false;
				this.Changed_ProbWrinkledPrior_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Quality'</summary>
		public bool[] Quality
		{
			get {
				return this.quality;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Quality\'");
				}
				this.quality = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numExample_Quality_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Roller'</summary>
		public bool[] Roller
		{
			get {
				return this.roller;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Roller\'");
				}
				this.roller = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = false;
				this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = false;
				this.Changed_numExample_ProbRollerPrior_Roller_isDone = false;
				this.Changed_numExample_Roller_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Toner'</summary>
		public bool[] Toner
		{
			get {
				return this.toner;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Toner\'");
				}
				this.toner = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numExample_ProbTonerPrior_Toner_isDone = false;
				this.Changed_numExample_Toner_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised = false;
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Wrinkled'</summary>
		public bool[] Wrinkled
		{
			get {
				return this.wrinkled;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Wrinkled\'");
				}
				this.wrinkled = value;
				this.numberOfIterationsDone = 0;
				this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = false;
				this.Changed_numExample_Wrinkled_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'Burning' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> BurningMarginal()
		{
			return this.Burning_marginal;
		}

		/// <summary>Computations that depend on the observed value of Burning and Fuse and numExample and ProbBurningPrior</summary>
		private void Changed_Burning_Fuse_numExample_ProbBurningPrior()
		{
			if (this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone) {
				return ;
			}
			DistributionStructArray<Beta,double> CPTBurning_F;
			// Create array for 'CPTBurning' Forwards messages.
			CPTBurning_F = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTBurning_F[fuseRange] = Beta.Uniform();
			}
			// Create array for 'CPTBurning_marginal' Forwards messages.
			this.CPTBurning_marginal_F = new DistributionStructArray<Beta,double>(2);
			DistributionStructArray<Beta,double> CPTBurning_use_B;
			// Create array for 'CPTBurning_use' Backwards messages.
			CPTBurning_use_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTBurning_use_B[fuseRange] = Beta.Uniform();
			}
			Beta CPTBurning_rep_B_toDef;
			// Message to 'CPTBurning_rep' from Replicate factor
			CPTBurning_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTBurning_F[0]);
			DistributionStructArray<Beta,double> CPTBurning_rep_B;
			// Create array for 'CPTBurning_rep' Backwards messages.
			CPTBurning_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTBurning_0_0__B'
			DistributionStructArray<Beta,double> CPTBurning_0_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTBurning_rep_B[index0] = Beta.Uniform();
				if (this.fuse[index0]) {
					CPTBurning_0_0__B[index0] = Beta.Uniform();
					// Message to 'CPTBurning_0_0_' from Bernoulli factor
					CPTBurning_0_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.burning[index0]);
					// Message to 'CPTBurning_rep' from Copy factor
					CPTBurning_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTBurning_rep_B[index0], CPTBurning_0_0__B[index0]);
				}
			}
			// Message to 'CPTBurning_rep' from Replicate factor
			CPTBurning_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTBurning_rep_B, CPTBurning_rep_B_toDef);
			// Message to 'CPTBurning_use' from Replicate factor
			CPTBurning_use_B[0] = ArrayHelper.SetTo<Beta>(CPTBurning_use_B[0], CPTBurning_rep_B_toDef);
			Beta CPTBurning_rep2_B_toDef;
			// Message to 'CPTBurning_rep2' from Replicate factor
			CPTBurning_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTBurning_F[1]);
			DistributionStructArray<Beta,double> CPTBurning_rep2_B;
			// Create array for 'CPTBurning_rep2' Backwards messages.
			CPTBurning_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTBurning_1_1__B'
			DistributionStructArray<Beta,double> CPTBurning_1_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTBurning_rep2_B[index0] = Beta.Uniform();
				if (!this.fuse[index0]) {
					CPTBurning_1_1__B[index0] = Beta.Uniform();
					// Message to 'CPTBurning_1_1_' from Bernoulli factor
					CPTBurning_1_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.burning[index0]);
					// Message to 'CPTBurning_rep2' from Copy factor
					CPTBurning_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTBurning_rep2_B[index0], CPTBurning_1_1__B[index0]);
				}
			}
			// Message to 'CPTBurning_rep2' from Replicate factor
			CPTBurning_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTBurning_rep2_B, CPTBurning_rep2_B_toDef);
			// Message to 'CPTBurning_use' from Replicate factor
			CPTBurning_use_B[1] = ArrayHelper.SetTo<Beta>(CPTBurning_use_B[1], CPTBurning_rep2_B_toDef);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				this.CPTBurning_marginal_F[fuseRange] = Beta.Uniform();
				// Message to 'CPTBurning_marginal' from Variable factor
				this.CPTBurning_marginal_F[fuseRange] = VariableOp.MarginalAverageConditional<Beta>(CPTBurning_use_B[fuseRange], this.probBurningPrior[fuseRange], this.CPTBurning_marginal_F[fuseRange]);
			}
			this.Changed_Burning_Fuse_numExample_ProbBurningPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Burning and numExample</summary>
		private void Changed_Burning_numExample()
		{
			if (this.Changed_Burning_numExample_isDone) {
				return ;
			}
			this.Burning_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Burning_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Burning_marginal, this.burning);
			this.Changed_Burning_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Drum and numberOfIterations and numExample and Paper and ProbQualityPrior and Quality and Toner</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner(int numberOfIterations)
		{
			if (this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone) {
				return ;
			}
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_F;
			// Create array for 'CPTQuality' Forwards messages.
			CPTQuality_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality' Forwards messages.
				CPTQuality_F[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality' Forwards messages.
					CPTQuality_F[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						CPTQuality_F[paperRange][tonerRange][drumRange] = Beta.Uniform();
					}
				}
			}
			// Create array for 'CPTQuality_marginal' Forwards messages.
			this.CPTQuality_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_use_B;
			// Create array for 'CPTQuality_use' Backwards messages.
			CPTQuality_use_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality_use' Backwards messages.
				CPTQuality_use_B[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality_use' Backwards messages.
					CPTQuality_use_B[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						CPTQuality_use_B[paperRange][tonerRange][drumRange] = Beta.Uniform();
					}
				}
			}
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_item0_B;
			// Create array for 'CPTQuality_item0' Backwards messages.
			CPTQuality_item0_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int tonerRange = 0; tonerRange<2; tonerRange++) {
				// Create array for 'CPTQuality_item0' Backwards messages.
				CPTQuality_item0_B[tonerRange] = new DistributionStructArray<Beta,double>(2);
				for(int drumRange = 0; drumRange<2; drumRange++) {
					CPTQuality_item0_B[tonerRange][drumRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item0_B;
			// Create array for 'CPTQuality_item0_item0' Backwards messages.
			CPTQuality_item0_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item0_item0_B[drumRange] = Beta.Uniform();
			}
			// Create array for replicates of 'vbool26_0__selector_uses_F_marginal'
			DistributionStructArray<Bernoulli,bool> vbool26_0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26_1__selector_uses_F_marginal'
			DistributionStructArray<Bernoulli,bool> vbool26_1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			Bernoulli vBernoulli0 = Bernoulli.FromLogOdds(double.PositiveInfinity);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Message to 'vbool26_0__selector_uses' from Replicate factor
					vbool26_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool26_F[index0]);
				}
				if (!this.drum[index0]) {
					// Message to 'vbool26_1__selector_uses' from Replicate factor
					vbool26_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool26_F[index0]);
				}
				// Message to 'vbool26' from And factor
				this.vbool26_F[index0] = BooleanAndOp.AndAverageConditional(this.toner[index0], vBernoulli0);
			}
			// Create array for replicates of 'vbool26_0__selector_uses_F'
			Bernoulli[][] vbool26_0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Create array for 'vbool26_0__selector_uses' Forwards messages.
					vbool26_0__selector_uses_F[index0] = new Bernoulli[3];
					vbool26_0__selector_uses_F[index0][2] = Bernoulli.Uniform();
					vbool26_0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool26_0__selector_uses_B'
			Bernoulli[][] vbool26_0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Create array for 'vbool26_0__selector_uses' Backwards messages.
					vbool26_0__selector_uses_B[index0] = new Bernoulli[3];
					vbool26_0__selector_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_0__selector_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_0_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_0_0_0__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						// Create array for 'CPTQuality_0_0_0_' Backwards messages.
						CPTQuality_0_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind = 0; _gateind<1; _gateind++) {
					if (this.drum[index0]) {
						if (this.paper[index0]) {
							CPTQuality_0_0_0__B[index0][_gateind] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0__0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_0__0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_0_0__0__0__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_0_0_0__0__0_' from Bernoulli factor
						CPTQuality_0_0_0__0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_0_0_0_' from Copy factor
						CPTQuality_0_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_0__B[index0][0], CPTQuality_0_0_0__0__0__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep_B;
			// Create array for 'CPTQuality_item0_item0_rep' Backwards messages.
			CPTQuality_item0_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item0_item0_rep_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item0_item0_rep_B_toDef;
			// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
			CPTQuality_item0_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[0][0][0]);
			// Create array for replicates of 'CPTQuality_1_1_0_0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_0_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_1_0_0__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						// Create array for 'CPTQuality_1_1_0_' Backwards messages.
						CPTQuality_1_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
					if (this.drum[index0]) {
						if (!this.paper[index0]) {
							CPTQuality_1_1_0__B[index0][_gateind4] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_0__1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_0__1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_1_0__1__1__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_1_1_0__1__1_' from Bernoulli factor
						CPTQuality_1_1_0__1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_1_1_0_' from Copy factor
						CPTQuality_1_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_0__B[index0][0], CPTQuality_1_1_0__1__1__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep_B;
			// Create array for 'CPTQuality_item1_item1_rep' Backwards messages.
			CPTQuality_item1_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item1_item1_rep_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item1_item1_rep_B_toDef;
			// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
			CPTQuality_item1_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[1][1][0]);
			Beta CPTQuality_item1_item1_rep_F_marginal;
			// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
			CPTQuality_item1_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[1][1][0]);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					for(int drumRange = 0; drumRange<2; drumRange++) {
						// Message to 'CPTQuality' from Random factor
						CPTQuality_F[paperRange][tonerRange][drumRange] = ArrayHelper.SetTo<Beta>(CPTQuality_F[paperRange][tonerRange][drumRange], this.probQualityPrior[paperRange][tonerRange][drumRange]);
					}
				}
			}
			// Create array for replicates of 'vbool26_0__selector_cases_1_uses_B'
			Bernoulli[][] vbool26_0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Create array for 'vbool26_0__selector_cases_1_uses' Backwards messages.
					vbool26_0__selector_cases_1_uses_B[index0] = new Bernoulli[5];
					vbool26_0__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
					vbool26_0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_0__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
					vbool26_0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_0_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_1_0_0__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						// Create array for 'CPTQuality_0_1_0_' Backwards messages.
						CPTQuality_0_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
					if (this.drum[index0]) {
						if (this.paper[index0]) {
							CPTQuality_0_1_0__B[index0][_gateind3] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0__1__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_0__1__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_1_0__1__0__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_0_1_0__1__0_' from Bernoulli factor
						CPTQuality_0_1_0__1__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_0_1_0_' from Copy factor
						CPTQuality_0_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_0__B[index0][0], CPTQuality_0_1_0__1__0__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep_B;
			// Create array for 'CPTQuality_item0_item1_rep' Backwards messages.
			CPTQuality_item0_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item0_item1_rep_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item0_item1_rep_B_toDef;
			// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
			CPTQuality_item0_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[0][1][0]);
			Beta CPTQuality_item0_item1_rep_F_marginal;
			// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
			CPTQuality_item0_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[0][1][0]);
			// Create array for replicates of 'vbool26_0__selector_cases_1_B'
			DistributionStructArray<Bernoulli,bool> vbool26_0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					vbool26_0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool26_0__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool26_0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Create array for 'vbool26_0__selector_cases' Backwards messages.
					vbool26_0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				}
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					if (this.drum[index0]) {
						vbool26_0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0_0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_0_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_0_0_0__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						// Create array for 'CPTQuality_1_0_0_' Backwards messages.
						CPTQuality_1_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
					if (this.drum[index0]) {
						if (!this.paper[index0]) {
							CPTQuality_1_0_0__B[index0][_gateind2] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0__0__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_0__0__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_0_0__0__1__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_1_0_0__0__1_' from Bernoulli factor
						CPTQuality_1_0_0__0__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_1_0_0_' from Copy factor
						CPTQuality_1_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_0__B[index0][0], CPTQuality_1_0_0__0__1__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep_B;
			// Create array for 'CPTQuality_item1_item0_rep' Backwards messages.
			CPTQuality_item1_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item1_item0_rep_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item1_item0_rep_B_toDef;
			// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
			CPTQuality_item1_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[1][0][0]);
			Beta CPTQuality_item1_item0_rep_F_marginal;
			// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
			CPTQuality_item1_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[1][0][0]);
			// Create array for replicates of 'vbool26_0__selector_cases_0_uses_B'
			Bernoulli[][] vbool26_0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Create array for 'vbool26_0__selector_cases_0_uses' Backwards messages.
					vbool26_0__selector_cases_0_uses_B[index0] = new Bernoulli[5];
					vbool26_0__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
					vbool26_0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_0__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
					vbool26_0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			Beta CPTQuality_item0_item0_rep_F_marginal;
			// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
			CPTQuality_item0_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[0][0][0]);
			// Create array for replicates of 'vbool26_0__selector_cases_0_B'
			DistributionStructArray<Bernoulli,bool> vbool26_0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					vbool26_0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<this.NumExample; index0++) {
					if (this.drum[index0]) {
						// Message to 'vbool26_0__selector_uses' from Replicate factor
						vbool26_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26_0__selector_uses_B_toDef[index0], this.vbool26_F[index0], vbool26_0__selector_uses_F_marginal[index0]);
						// Message to 'vbool26_0__selector_uses' from Replicate factor
						vbool26_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool26_0__selector_uses_B[index0][1], vbool26_0__selector_uses_F_marginal[index0], 1, vbool26_0__selector_uses_F[index0][1]);
						if (this.paper[index0]) {
							// Message to 'CPTQuality_0_0_0_0_' from EnterPartial factor
							CPTQuality_0_0_0_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_0__B[index0], vbool26_0__selector_uses_F[index0][1], this.CPTQuality_item0_item0_rep_F[index0], new int[1] {0}, CPTQuality_0_0_0_0__B[index0]);
							// Message to 'CPTQuality_item0_item0_rep' from Copy factor
							CPTQuality_item0_item0_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_rep_B[index0], CPTQuality_0_0_0_0__B[index0]);
						}
						// Message to 'vbool26_0__selector_uses' from Replicate factor
						vbool26_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool26_0__selector_uses_B[index0][2], vbool26_0__selector_uses_F_marginal[index0], 2, vbool26_0__selector_uses_F[index0][2]);
						if (!this.paper[index0]) {
							// Message to 'CPTQuality_1_1_0_0_' from EnterPartial factor
							CPTQuality_1_1_0_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_0__B[index0], vbool26_0__selector_uses_F[index0][2], this.CPTQuality_item1_item1_rep_F[index0], new int[1] {1}, CPTQuality_1_1_0_0__B[index0]);
							// Message to 'CPTQuality_item1_item1_rep' from Copy factor
							CPTQuality_item1_item1_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_rep_B[index0], CPTQuality_1_1_0_0__B[index0]);
						}
						if (this.paper[index0]) {
							// Message to 'CPTQuality_0_1_0_0_' from EnterPartial factor
							CPTQuality_0_1_0_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_0__B[index0], vbool26_0__selector_uses_F[index0][2], this.CPTQuality_item0_item1_rep_F[index0], new int[1] {1}, CPTQuality_0_1_0_0__B[index0]);
							// Message to 'CPTQuality_item0_item1_rep' from Copy factor
							CPTQuality_item0_item1_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_rep_B[index0], CPTQuality_0_1_0_0__B[index0]);
						}
						if (!this.paper[index0]) {
							// Message to 'CPTQuality_1_0_0_0_' from EnterPartial factor
							CPTQuality_1_0_0_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_0__B[index0], vbool26_0__selector_uses_F[index0][1], this.CPTQuality_item1_item0_rep_F[index0], new int[1] {0}, CPTQuality_1_0_0_0__B[index0]);
							// Message to 'CPTQuality_item1_item0_rep' from Copy factor
							CPTQuality_item1_item0_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_rep_B[index0], CPTQuality_1_0_0_0__B[index0]);
						}
					}
				}
				// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
				CPTQuality_item0_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item0_item0_rep_B, CPTQuality_item0_item0_rep_B_toDef);
				// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
				CPTQuality_item1_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item1_item1_rep_B, CPTQuality_item1_item1_rep_B_toDef);
				// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
				CPTQuality_item1_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item1_item1_rep_B_toDef, CPTQuality_F[1][1][0], CPTQuality_item1_item1_rep_F_marginal);
				// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
				CPTQuality_item0_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item0_item0_rep_B_toDef, CPTQuality_F[0][0][0], CPTQuality_item0_item0_rep_F_marginal);
				// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
				CPTQuality_item1_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item1_item0_rep_B, CPTQuality_item1_item0_rep_B_toDef);
				// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
				CPTQuality_item1_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item1_item0_rep_B_toDef, CPTQuality_F[1][0][0], CPTQuality_item1_item0_rep_F_marginal);
				// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
				CPTQuality_item0_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item0_item1_rep_B, CPTQuality_item0_item1_rep_B_toDef);
				// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
				CPTQuality_item0_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item0_item1_rep_B_toDef, CPTQuality_F[0][1][0], CPTQuality_item0_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
					this.CPTQuality_item1_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item1_item1_rep_B[index0], CPTQuality_item1_item1_rep_F_marginal, index0, this.CPTQuality_item1_item1_rep_F[index0]);
					// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
					this.CPTQuality_item1_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item1_item0_rep_B[index0], CPTQuality_item1_item0_rep_F_marginal, index0, this.CPTQuality_item1_item0_rep_F[index0]);
					// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
					this.CPTQuality_item0_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item0_item0_rep_B[index0], CPTQuality_item0_item0_rep_F_marginal, index0, this.CPTQuality_item0_item0_rep_F[index0]);
					// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
					this.CPTQuality_item0_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item0_item1_rep_B[index0], CPTQuality_item0_item1_rep_F_marginal, index0, this.CPTQuality_item0_item1_rep_F[index0]);
					if (this.drum[index0]) {
						if (!this.paper[index0]) {
							// Message to 'vbool26_0__selector_cases_1_uses' from Bernoulli factor
							vbool26_0__selector_cases_1_uses_B[index0][0] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep_F[index0]));
						}
						if (this.paper[index0]) {
							// Message to 'vbool26_0__selector_cases_1_uses' from Bernoulli factor
							vbool26_0__selector_cases_1_uses_B[index0][4] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep_F[index0]));
						}
						// Message to 'vbool26_0__selector_cases_1' from Replicate factor
						vbool26_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool26_0__selector_cases_1_uses_B[index0], vbool26_0__selector_cases_1_B[index0]);
						// Message to 'vbool26_0__selector_cases' from Copy factor
						vbool26_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(vbool26_0__selector_cases_B[index0][1], vbool26_0__selector_cases_1_B[index0]);
						if (!this.paper[index0]) {
							// Message to 'vbool26_0__selector_cases_0_uses' from Bernoulli factor
							vbool26_0__selector_cases_0_uses_B[index0][0] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep_F[index0]));
						}
						if (this.paper[index0]) {
							// Message to 'vbool26_0__selector_cases_0_uses' from Bernoulli factor
							vbool26_0__selector_cases_0_uses_B[index0][4] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep_F[index0]));
						}
						// Message to 'vbool26_0__selector_cases_0' from Replicate factor
						vbool26_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool26_0__selector_cases_0_uses_B[index0], vbool26_0__selector_cases_0_B[index0]);
						// Message to 'vbool26_0__selector_cases' from Copy factor
						vbool26_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(vbool26_0__selector_cases_B[index0][0], vbool26_0__selector_cases_0_B[index0]);
						// Message to 'vbool26_0__selector_uses' from Cases factor
						vbool26_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(vbool26_0__selector_cases_B[index0]);
						// Message to 'vbool26_0__selector_uses' from Replicate factor
						this.vbool26_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(vbool26_0__selector_uses_B[index0], this.vbool26_0__selector_uses_B_toDef[index0]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'CPTQuality_item0_item0' from Replicate factor
			CPTQuality_item0_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_B[0], CPTQuality_item0_item0_rep_B_toDef);
			// Create array for replicates of 'vbool26_1__selector_uses_F'
			Bernoulli[][] vbool26_1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					// Create array for 'vbool26_1__selector_uses' Forwards messages.
					vbool26_1__selector_uses_F[index0] = new Bernoulli[3];
					vbool26_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
					vbool26_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool26_1__selector_uses_B'
			Bernoulli[][] vbool26_1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					// Create array for 'vbool26_1__selector_uses' Backwards messages.
					vbool26_1__selector_uses_B[index0] = new Bernoulli[3];
					vbool26_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1_1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_1_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_0_1_1__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						// Create array for 'CPTQuality_0_0_1_' Backwards messages.
						CPTQuality_0_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
					if (!this.drum[index0]) {
						if (this.paper[index0]) {
							CPTQuality_0_0_1__B[index0][_gateind5] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1__0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_1__0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_0_1__0__0__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_0_0_1__0__0_' from Bernoulli factor
						CPTQuality_0_0_1__0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_0_0_1_' from Copy factor
						CPTQuality_0_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_1__B[index0][0], CPTQuality_0_0_1__0__0__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep2_B;
			// Create array for 'CPTQuality_item0_item0_rep2' Backwards messages.
			CPTQuality_item0_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item0_item0_rep2_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item0_item0_rep2_B_toDef;
			// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
			CPTQuality_item0_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[0][0][1]);
			// Create array for replicates of 'CPTQuality_1_1_1_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_1_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_1_1_1__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						// Create array for 'CPTQuality_1_1_1_' Backwards messages.
						CPTQuality_1_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind8 = 0; _gateind8<1; _gateind8++) {
					if (!this.drum[index0]) {
						if (!this.paper[index0]) {
							CPTQuality_1_1_1__B[index0][_gateind8] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_1__1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_1__1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_1_1__1__1__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_1_1_1__1__1_' from Bernoulli factor
						CPTQuality_1_1_1__1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_1_1_1_' from Copy factor
						CPTQuality_1_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_1__B[index0][0], CPTQuality_1_1_1__1__1__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep2_B;
			// Create array for 'CPTQuality_item1_item1_rep2' Backwards messages.
			CPTQuality_item1_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item1_item1_rep2_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item1_item1_rep2_B_toDef;
			// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
			CPTQuality_item1_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[1][1][1]);
			Beta CPTQuality_item1_item1_rep2_F_marginal;
			// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
			CPTQuality_item1_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[1][1][1]);
			// Create array for replicates of 'vbool26_1__selector_cases_1_uses_B'
			Bernoulli[][] vbool26_1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					// Create array for 'vbool26_1__selector_cases_1_uses' Backwards messages.
					vbool26_1__selector_cases_1_uses_B[index0] = new Bernoulli[5];
					vbool26_1__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
					vbool26_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_1__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
					vbool26_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1_1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_1_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_1_1_1__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						// Create array for 'CPTQuality_0_1_1_' Backwards messages.
						CPTQuality_0_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind7 = 0; _gateind7<1; _gateind7++) {
					if (!this.drum[index0]) {
						if (this.paper[index0]) {
							CPTQuality_0_1_1__B[index0][_gateind7] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1__1__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_1__1__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (this.paper[index0]) {
						CPTQuality_0_1_1__1__0__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_0_1_1__1__0_' from Bernoulli factor
						CPTQuality_0_1_1__1__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_0_1_1_' from Copy factor
						CPTQuality_0_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_1__B[index0][0], CPTQuality_0_1_1__1__0__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep2_B;
			// Create array for 'CPTQuality_item0_item1_rep2' Backwards messages.
			CPTQuality_item0_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item0_item1_rep2_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item0_item1_rep2_B_toDef;
			// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
			CPTQuality_item0_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[0][1][1]);
			Beta CPTQuality_item0_item1_rep2_F_marginal;
			// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
			CPTQuality_item0_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[0][1][1]);
			// Create array for replicates of 'vbool26_1__selector_cases_1_B'
			DistributionStructArray<Bernoulli,bool> vbool26_1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					vbool26_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'vbool26_1__selector_cases_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool26_1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					// Create array for 'vbool26_1__selector_cases' Backwards messages.
					vbool26_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				}
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					if (!this.drum[index0]) {
						vbool26_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_1_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_0_1_1__B[index0] = Beta.Uniform();
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						// Create array for 'CPTQuality_1_0_1_' Backwards messages.
						CPTQuality_1_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
					}
				}
				for(int _gateind6 = 0; _gateind6<1; _gateind6++) {
					if (!this.drum[index0]) {
						if (!this.paper[index0]) {
							CPTQuality_1_0_1__B[index0][_gateind6] = Beta.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1__0__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_1__0__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					if (!this.paper[index0]) {
						CPTQuality_1_0_1__0__1__B[index0] = Beta.Uniform();
						// Message to 'CPTQuality_1_0_1__0__1_' from Bernoulli factor
						CPTQuality_1_0_1__0__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
						// Message to 'CPTQuality_1_0_1_' from Copy factor
						CPTQuality_1_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_1__B[index0][0], CPTQuality_1_0_1__0__1__B[index0]);
					}
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep2_B;
			// Create array for 'CPTQuality_item1_item0_rep2' Backwards messages.
			CPTQuality_item1_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_item1_item0_rep2_B[index0] = Beta.Uniform();
			}
			Beta CPTQuality_item1_item0_rep2_B_toDef;
			// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
			CPTQuality_item1_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTQuality_F[1][0][1]);
			Beta CPTQuality_item1_item0_rep2_F_marginal;
			// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
			CPTQuality_item1_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[1][0][1]);
			// Create array for replicates of 'vbool26_1__selector_cases_0_uses_B'
			Bernoulli[][] vbool26_1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					// Create array for 'vbool26_1__selector_cases_0_uses' Backwards messages.
					vbool26_1__selector_cases_0_uses_B[index0] = new Bernoulli[5];
					vbool26_1__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
					vbool26_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
					vbool26_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
					vbool26_1__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
					vbool26_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
				}
			}
			Beta CPTQuality_item0_item0_rep2_F_marginal;
			// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
			CPTQuality_item0_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(CPTQuality_F[0][0][1]);
			// Create array for replicates of 'vbool26_1__selector_cases_0_B'
			DistributionStructArray<Bernoulli,bool> vbool26_1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (!this.drum[index0]) {
					vbool26_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index0 = 0; index0<this.NumExample; index0++) {
					if (!this.drum[index0]) {
						// Message to 'vbool26_1__selector_uses' from Replicate factor
						vbool26_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26_1__selector_uses_B_toDef[index0], this.vbool26_F[index0], vbool26_1__selector_uses_F_marginal[index0]);
						// Message to 'vbool26_1__selector_uses' from Replicate factor
						vbool26_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool26_1__selector_uses_B[index0][1], vbool26_1__selector_uses_F_marginal[index0], 1, vbool26_1__selector_uses_F[index0][1]);
						if (this.paper[index0]) {
							// Message to 'CPTQuality_0_0_1_1_' from EnterPartial factor
							CPTQuality_0_0_1_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_1__B[index0], vbool26_1__selector_uses_F[index0][1], this.CPTQuality_item0_item0_rep2_F[index0], new int[1] {0}, CPTQuality_0_0_1_1__B[index0]);
							// Message to 'CPTQuality_item0_item0_rep2' from Copy factor
							CPTQuality_item0_item0_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_rep2_B[index0], CPTQuality_0_0_1_1__B[index0]);
						}
						// Message to 'vbool26_1__selector_uses' from Replicate factor
						vbool26_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(vbool26_1__selector_uses_B[index0][2], vbool26_1__selector_uses_F_marginal[index0], 2, vbool26_1__selector_uses_F[index0][2]);
						if (!this.paper[index0]) {
							// Message to 'CPTQuality_1_1_1_1_' from EnterPartial factor
							CPTQuality_1_1_1_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_1__B[index0], vbool26_1__selector_uses_F[index0][2], this.CPTQuality_item1_item1_rep2_F[index0], new int[1] {1}, CPTQuality_1_1_1_1__B[index0]);
							// Message to 'CPTQuality_item1_item1_rep2' from Copy factor
							CPTQuality_item1_item1_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_rep2_B[index0], CPTQuality_1_1_1_1__B[index0]);
						}
						if (this.paper[index0]) {
							// Message to 'CPTQuality_0_1_1_1_' from EnterPartial factor
							CPTQuality_0_1_1_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_1__B[index0], vbool26_1__selector_uses_F[index0][2], this.CPTQuality_item0_item1_rep2_F[index0], new int[1] {1}, CPTQuality_0_1_1_1__B[index0]);
							// Message to 'CPTQuality_item0_item1_rep2' from Copy factor
							CPTQuality_item0_item1_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_rep2_B[index0], CPTQuality_0_1_1_1__B[index0]);
						}
						if (!this.paper[index0]) {
							// Message to 'CPTQuality_1_0_1_1_' from EnterPartial factor
							CPTQuality_1_0_1_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_1__B[index0], vbool26_1__selector_uses_F[index0][1], this.CPTQuality_item1_item0_rep2_F[index0], new int[1] {0}, CPTQuality_1_0_1_1__B[index0]);
							// Message to 'CPTQuality_item1_item0_rep2' from Copy factor
							CPTQuality_item1_item0_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_rep2_B[index0], CPTQuality_1_0_1_1__B[index0]);
						}
					}
				}
				// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
				CPTQuality_item0_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item0_item0_rep2_B, CPTQuality_item0_item0_rep2_B_toDef);
				// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
				CPTQuality_item1_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item1_item1_rep2_B, CPTQuality_item1_item1_rep2_B_toDef);
				// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
				CPTQuality_item1_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item1_item1_rep2_B_toDef, CPTQuality_F[1][1][1], CPTQuality_item1_item1_rep2_F_marginal);
				// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
				CPTQuality_item0_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item0_item0_rep2_B_toDef, CPTQuality_F[0][0][1], CPTQuality_item0_item0_rep2_F_marginal);
				// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
				CPTQuality_item1_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item1_item0_rep2_B, CPTQuality_item1_item0_rep2_B_toDef);
				// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
				CPTQuality_item1_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item1_item0_rep2_B_toDef, CPTQuality_F[1][0][1], CPTQuality_item1_item0_rep2_F_marginal);
				// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
				CPTQuality_item0_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTQuality_item0_item1_rep2_B, CPTQuality_item0_item1_rep2_B_toDef);
				// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
				CPTQuality_item0_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(CPTQuality_item0_item1_rep2_B_toDef, CPTQuality_F[0][1][1], CPTQuality_item0_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
					this.CPTQuality_item1_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item1_item1_rep2_B[index0], CPTQuality_item1_item1_rep2_F_marginal, index0, this.CPTQuality_item1_item1_rep2_F[index0]);
					// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
					this.CPTQuality_item0_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item0_item0_rep2_B[index0], CPTQuality_item0_item0_rep2_F_marginal, index0, this.CPTQuality_item0_item0_rep2_F[index0]);
					// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
					this.CPTQuality_item1_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item1_item0_rep2_B[index0], CPTQuality_item1_item0_rep2_F_marginal, index0, this.CPTQuality_item1_item0_rep2_F[index0]);
					// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
					this.CPTQuality_item0_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(CPTQuality_item0_item1_rep2_B[index0], CPTQuality_item0_item1_rep2_F_marginal, index0, this.CPTQuality_item0_item1_rep2_F[index0]);
					if (!this.drum[index0]) {
						if (!this.paper[index0]) {
							// Message to 'vbool26_1__selector_cases_1_uses' from Bernoulli factor
							vbool26_1__selector_cases_1_uses_B[index0][0] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep2_F[index0]));
						}
						if (this.paper[index0]) {
							// Message to 'vbool26_1__selector_cases_1_uses' from Bernoulli factor
							vbool26_1__selector_cases_1_uses_B[index0][4] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep2_F[index0]));
						}
						// Message to 'vbool26_1__selector_cases_1' from Replicate factor
						vbool26_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool26_1__selector_cases_1_uses_B[index0], vbool26_1__selector_cases_1_B[index0]);
						// Message to 'vbool26_1__selector_cases' from Copy factor
						vbool26_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(vbool26_1__selector_cases_B[index0][1], vbool26_1__selector_cases_1_B[index0]);
						if (!this.paper[index0]) {
							// Message to 'vbool26_1__selector_cases_0_uses' from Bernoulli factor
							vbool26_1__selector_cases_0_uses_B[index0][0] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep2_F[index0]));
						}
						if (this.paper[index0]) {
							// Message to 'vbool26_1__selector_cases_0_uses' from Bernoulli factor
							vbool26_1__selector_cases_0_uses_B[index0][4] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep2_F[index0]));
						}
						// Message to 'vbool26_1__selector_cases_0' from Replicate factor
						vbool26_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(vbool26_1__selector_cases_0_uses_B[index0], vbool26_1__selector_cases_0_B[index0]);
						// Message to 'vbool26_1__selector_cases' from Copy factor
						vbool26_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(vbool26_1__selector_cases_B[index0][0], vbool26_1__selector_cases_0_B[index0]);
						// Message to 'vbool26_1__selector_uses' from Cases factor
						vbool26_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(vbool26_1__selector_cases_B[index0]);
						// Message to 'vbool26_1__selector_uses' from Replicate factor
						this.vbool26_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(vbool26_1__selector_uses_B[index0], this.vbool26_1__selector_uses_B_toDef[index0]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'CPTQuality_item0_item0' from Replicate factor
			CPTQuality_item0_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_B[1], CPTQuality_item0_item0_rep2_B_toDef);
			// Message to 'CPTQuality_item0' from Copy factor
			CPTQuality_item0_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item0_B[0], CPTQuality_item0_item0_B);
			DistributionStructArray<Beta,double> CPTQuality_item0_item1_B;
			// Create array for 'CPTQuality_item0_item1' Backwards messages.
			CPTQuality_item0_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item0_item1_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item0_item1' from Replicate factor
			CPTQuality_item0_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_B[0], CPTQuality_item0_item1_rep_B_toDef);
			// Message to 'CPTQuality_item0_item1' from Replicate factor
			CPTQuality_item0_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_B[1], CPTQuality_item0_item1_rep2_B_toDef);
			// Message to 'CPTQuality_item0' from Copy factor
			CPTQuality_item0_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item0_B[1], CPTQuality_item0_item1_B);
			// Message to 'CPTQuality_use' from Copy factor
			CPTQuality_use_B[0] = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>>(CPTQuality_use_B[0], CPTQuality_item0_B);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_item1_B;
			// Create array for 'CPTQuality_item1' Backwards messages.
			CPTQuality_item1_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int tonerRange = 0; tonerRange<2; tonerRange++) {
				// Create array for 'CPTQuality_item1' Backwards messages.
				CPTQuality_item1_B[tonerRange] = new DistributionStructArray<Beta,double>(2);
				for(int drumRange = 0; drumRange<2; drumRange++) {
					CPTQuality_item1_B[tonerRange][drumRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item0_B;
			// Create array for 'CPTQuality_item1_item0' Backwards messages.
			CPTQuality_item1_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item1_item0_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item1_item0' from Replicate factor
			CPTQuality_item1_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_B[0], CPTQuality_item1_item0_rep_B_toDef);
			// Message to 'CPTQuality_item1_item0' from Replicate factor
			CPTQuality_item1_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_B[1], CPTQuality_item1_item0_rep2_B_toDef);
			// Message to 'CPTQuality_item1' from Copy factor
			CPTQuality_item1_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item1_B[0], CPTQuality_item1_item0_B);
			DistributionStructArray<Beta,double> CPTQuality_item1_item1_B;
			// Create array for 'CPTQuality_item1_item1' Backwards messages.
			CPTQuality_item1_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item1_item1_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item1_item1' from Replicate factor
			CPTQuality_item1_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_B[0], CPTQuality_item1_item1_rep_B_toDef);
			// Message to 'CPTQuality_item1_item1' from Replicate factor
			CPTQuality_item1_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_B[1], CPTQuality_item1_item1_rep2_B_toDef);
			// Message to 'CPTQuality_item1' from Copy factor
			CPTQuality_item1_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item1_B[1], CPTQuality_item1_item1_B);
			// Message to 'CPTQuality_use' from Copy factor
			CPTQuality_use_B[1] = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>>(CPTQuality_use_B[1], CPTQuality_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality_marginal' Forwards messages.
				this.CPTQuality_marginal_F[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality_marginal' Forwards messages.
					this.CPTQuality_marginal_F[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange] = Beta.Uniform();
						// Message to 'CPTQuality_marginal' from Variable factor
						this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange] = VariableOp.MarginalAverageConditional<Beta>(CPTQuality_use_B[paperRange][tonerRange][drumRange], this.probQualityPrior[paperRange][tonerRange][drumRange], this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange]);
					}
				}
			}
			this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Drum and numberOfIterationsDecreased and numExample and must reset on changes to Paper and ProbQualityPrior and Quality and Toner</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner(bool initialise)
		{
			if (this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone&&((!initialise)||this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				if (this.drum[index0]) {
					// Message to 'vbool26_0__selector_uses' from Replicate factor
					this.vbool26_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool26_F[index0]);
				}
				if (!this.drum[index0]) {
					// Message to 'vbool26_1__selector_uses' from Replicate factor
					this.vbool26_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool26_F[index0]);
				}
			}
			this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone = true;
			this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Drum and numExample</summary>
		private void Changed_Drum_numExample()
		{
			if (this.Changed_Drum_numExample_isDone) {
				return ;
			}
			this.Drum_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Drum_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Drum_marginal, this.drum);
			// Create array for replicates of 'vbool26_0__selector_uses_B_toDef'
			this.vbool26_0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26_1__selector_uses_B_toDef'
			this.vbool26_1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			this.Changed_Drum_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Drum and numExample and ProbDrumPrior</summary>
		private void Changed_Drum_numExample_ProbDrumPrior()
		{
			if (this.Changed_Drum_numExample_ProbDrumPrior_isDone) {
				return ;
			}
			this.ProbDrum_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> ProbDrum_rep_B;
			// Create array for 'ProbDrum_rep' Backwards messages.
			ProbDrum_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				ProbDrum_rep_B[index0] = Beta.Uniform();
				// Message to 'ProbDrum_rep' from Bernoulli factor
				ProbDrum_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.drum[index0]);
			}
			Beta ProbDrum_rep_B_toDef;
			// Message to 'ProbDrum_rep' from Replicate factor
			ProbDrum_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probDrumPrior);
			// Message to 'ProbDrum_rep' from Replicate factor
			ProbDrum_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(ProbDrum_rep_B, ProbDrum_rep_B_toDef);
			// Message to 'ProbDrum_marginal' from Variable factor
			this.ProbDrum_marginal_F = VariableOp.MarginalAverageConditional<Beta>(ProbDrum_rep_B_toDef, this.probDrumPrior, this.ProbDrum_marginal_F);
			this.Changed_Drum_numExample_ProbDrumPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Fuse and numExample</summary>
		private void Changed_Fuse_numExample()
		{
			if (this.Changed_Fuse_numExample_isDone) {
				return ;
			}
			this.Fuse_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Fuse_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Fuse_marginal, this.fuse);
			this.Changed_Fuse_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Fuse and numExample and Paper and ProbWrinkledPrior and Wrinkled</summary>
		private void Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled()
		{
			if (this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone) {
				return ;
			}
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_F;
			// Create array for 'CPTWrinkled' Forwards messages.
			CPTWrinkled_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled' Forwards messages.
				CPTWrinkled_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					CPTWrinkled_F[paperRange][fuseRange] = Beta.Uniform();
				}
			}
			// Create array for 'CPTWrinkled_marginal' Forwards messages.
			this.CPTWrinkled_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_use_B;
			// Create array for 'CPTWrinkled_use' Backwards messages.
			CPTWrinkled_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled_use' Backwards messages.
				CPTWrinkled_use_B[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					CPTWrinkled_use_B[paperRange][fuseRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTWrinkled_item0_B;
			// Create array for 'CPTWrinkled_item0' Backwards messages.
			CPTWrinkled_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTWrinkled_item0_B[fuseRange] = Beta.Uniform();
			}
			Beta CPTWrinkled_item0_rep_B_toDef;
			// Message to 'CPTWrinkled_item0_rep' from Replicate factor
			CPTWrinkled_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTWrinkled_F[0][0]);
			DistributionStructArray<Beta,double> CPTWrinkled_item0_rep_B;
			// Create array for 'CPTWrinkled_item0_rep' Backwards messages.
			CPTWrinkled_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTWrinkled_0_0_0__0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_item0_rep_B[index0] = Beta.Uniform();
				if (this.fuse[index0]) {
					if (this.paper[index0]) {
						CPTWrinkled_0_0_0__0__B[index0] = Beta.Uniform();
						// Message to 'CPTWrinkled_0_0_0__0_' from Bernoulli factor
						CPTWrinkled_0_0_0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
						// Message to 'CPTWrinkled_item0_rep' from Copy factor
						CPTWrinkled_item0_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_rep_B[index0], CPTWrinkled_0_0_0__0__B[index0]);
					}
				}
			}
			// Message to 'CPTWrinkled_item0_rep' from Replicate factor
			CPTWrinkled_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTWrinkled_item0_rep_B, CPTWrinkled_item0_rep_B_toDef);
			// Message to 'CPTWrinkled_item0' from Replicate factor
			CPTWrinkled_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_B[0], CPTWrinkled_item0_rep_B_toDef);
			Beta CPTWrinkled_item0_rep2_B_toDef;
			// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
			CPTWrinkled_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTWrinkled_F[0][1]);
			DistributionStructArray<Beta,double> CPTWrinkled_item0_rep2_B;
			// Create array for 'CPTWrinkled_item0_rep2' Backwards messages.
			CPTWrinkled_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTWrinkled_0_1_1__0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_1_1__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_item0_rep2_B[index0] = Beta.Uniform();
				if (!this.fuse[index0]) {
					if (this.paper[index0]) {
						CPTWrinkled_0_1_1__0__B[index0] = Beta.Uniform();
						// Message to 'CPTWrinkled_0_1_1__0_' from Bernoulli factor
						CPTWrinkled_0_1_1__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
						// Message to 'CPTWrinkled_item0_rep2' from Copy factor
						CPTWrinkled_item0_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_rep2_B[index0], CPTWrinkled_0_1_1__0__B[index0]);
					}
				}
			}
			// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
			CPTWrinkled_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTWrinkled_item0_rep2_B, CPTWrinkled_item0_rep2_B_toDef);
			// Message to 'CPTWrinkled_item0' from Replicate factor
			CPTWrinkled_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_B[1], CPTWrinkled_item0_rep2_B_toDef);
			// Message to 'CPTWrinkled_use' from Copy factor
			CPTWrinkled_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTWrinkled_use_B[0], CPTWrinkled_item0_B);
			DistributionStructArray<Beta,double> CPTWrinkled_item1_B;
			// Create array for 'CPTWrinkled_item1' Backwards messages.
			CPTWrinkled_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTWrinkled_item1_B[fuseRange] = Beta.Uniform();
			}
			Beta CPTWrinkled_item1_rep_B_toDef;
			// Message to 'CPTWrinkled_item1_rep' from Replicate factor
			CPTWrinkled_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTWrinkled_F[1][0]);
			DistributionStructArray<Beta,double> CPTWrinkled_item1_rep_B;
			// Create array for 'CPTWrinkled_item1_rep' Backwards messages.
			CPTWrinkled_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTWrinkled_1_0_0__1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_0_0__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_item1_rep_B[index0] = Beta.Uniform();
				if (this.fuse[index0]) {
					if (!this.paper[index0]) {
						CPTWrinkled_1_0_0__1__B[index0] = Beta.Uniform();
						// Message to 'CPTWrinkled_1_0_0__1_' from Bernoulli factor
						CPTWrinkled_1_0_0__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
						// Message to 'CPTWrinkled_item1_rep' from Copy factor
						CPTWrinkled_item1_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_rep_B[index0], CPTWrinkled_1_0_0__1__B[index0]);
					}
				}
			}
			// Message to 'CPTWrinkled_item1_rep' from Replicate factor
			CPTWrinkled_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTWrinkled_item1_rep_B, CPTWrinkled_item1_rep_B_toDef);
			// Message to 'CPTWrinkled_item1' from Replicate factor
			CPTWrinkled_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_B[0], CPTWrinkled_item1_rep_B_toDef);
			Beta CPTWrinkled_item1_rep2_B_toDef;
			// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
			CPTWrinkled_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTWrinkled_F[1][1]);
			DistributionStructArray<Beta,double> CPTWrinkled_item1_rep2_B;
			// Create array for 'CPTWrinkled_item1_rep2' Backwards messages.
			CPTWrinkled_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTWrinkled_1_1_1__1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_item1_rep2_B[index0] = Beta.Uniform();
				if (!this.fuse[index0]) {
					if (!this.paper[index0]) {
						CPTWrinkled_1_1_1__1__B[index0] = Beta.Uniform();
						// Message to 'CPTWrinkled_1_1_1__1_' from Bernoulli factor
						CPTWrinkled_1_1_1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
						// Message to 'CPTWrinkled_item1_rep2' from Copy factor
						CPTWrinkled_item1_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_rep2_B[index0], CPTWrinkled_1_1_1__1__B[index0]);
					}
				}
			}
			// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
			CPTWrinkled_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTWrinkled_item1_rep2_B, CPTWrinkled_item1_rep2_B_toDef);
			// Message to 'CPTWrinkled_item1' from Replicate factor
			CPTWrinkled_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_B[1], CPTWrinkled_item1_rep2_B_toDef);
			// Message to 'CPTWrinkled_use' from Copy factor
			CPTWrinkled_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTWrinkled_use_B[1], CPTWrinkled_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled_marginal' Forwards messages.
				this.CPTWrinkled_marginal_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					this.CPTWrinkled_marginal_F[paperRange][fuseRange] = Beta.Uniform();
					// Message to 'CPTWrinkled_marginal' from Variable factor
					this.CPTWrinkled_marginal_F[paperRange][fuseRange] = VariableOp.MarginalAverageConditional<Beta>(CPTWrinkled_use_B[paperRange][fuseRange], this.probWrinkledPrior[paperRange][fuseRange], this.CPTWrinkled_marginal_F[paperRange][fuseRange]);
				}
			}
			this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Fuse and numExample and PaperJam and ProbPaperJamPrior and Roller</summary>
		private void Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller()
		{
			if (this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone) {
				return ;
			}
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_F;
			// Create array for 'CPTPaperJam' Forwards messages.
			CPTPaperJam_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam' Forwards messages.
				CPTPaperJam_F[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTPaperJam_F[fuseRange][rollerRange] = Beta.Uniform();
				}
			}
			// Create array for 'CPTPaperJam_marginal' Forwards messages.
			this.CPTPaperJam_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_use_B;
			// Create array for 'CPTPaperJam_use' Backwards messages.
			CPTPaperJam_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam_use' Backwards messages.
				CPTPaperJam_use_B[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTPaperJam_use_B[fuseRange][rollerRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTPaperJam_item0_B;
			// Create array for 'CPTPaperJam_item0' Backwards messages.
			CPTPaperJam_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTPaperJam_item0_B[rollerRange] = Beta.Uniform();
			}
			Beta CPTPaperJam_item0_rep_B_toDef;
			// Message to 'CPTPaperJam_item0_rep' from Replicate factor
			CPTPaperJam_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTPaperJam_F[0][0]);
			DistributionStructArray<Beta,double> CPTPaperJam_item0_rep_B;
			// Create array for 'CPTPaperJam_item0_rep' Backwards messages.
			CPTPaperJam_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTPaperJam_0_0_0__0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_item0_rep_B[index0] = Beta.Uniform();
				if (this.fuse[index0]) {
					if (this.roller[index0]) {
						CPTPaperJam_0_0_0__0__B[index0] = Beta.Uniform();
						// Message to 'CPTPaperJam_0_0_0__0_' from Bernoulli factor
						CPTPaperJam_0_0_0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
						// Message to 'CPTPaperJam_item0_rep' from Copy factor
						CPTPaperJam_item0_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_rep_B[index0], CPTPaperJam_0_0_0__0__B[index0]);
					}
				}
			}
			// Message to 'CPTPaperJam_item0_rep' from Replicate factor
			CPTPaperJam_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTPaperJam_item0_rep_B, CPTPaperJam_item0_rep_B_toDef);
			// Message to 'CPTPaperJam_item0' from Replicate factor
			CPTPaperJam_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_B[0], CPTPaperJam_item0_rep_B_toDef);
			Beta CPTPaperJam_item0_rep2_B_toDef;
			// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
			CPTPaperJam_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTPaperJam_F[0][1]);
			DistributionStructArray<Beta,double> CPTPaperJam_item0_rep2_B;
			// Create array for 'CPTPaperJam_item0_rep2' Backwards messages.
			CPTPaperJam_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTPaperJam_0_1_1__0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_1_1__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_item0_rep2_B[index0] = Beta.Uniform();
				if (!this.fuse[index0]) {
					if (this.roller[index0]) {
						CPTPaperJam_0_1_1__0__B[index0] = Beta.Uniform();
						// Message to 'CPTPaperJam_0_1_1__0_' from Bernoulli factor
						CPTPaperJam_0_1_1__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
						// Message to 'CPTPaperJam_item0_rep2' from Copy factor
						CPTPaperJam_item0_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_rep2_B[index0], CPTPaperJam_0_1_1__0__B[index0]);
					}
				}
			}
			// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
			CPTPaperJam_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTPaperJam_item0_rep2_B, CPTPaperJam_item0_rep2_B_toDef);
			// Message to 'CPTPaperJam_item0' from Replicate factor
			CPTPaperJam_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_B[1], CPTPaperJam_item0_rep2_B_toDef);
			// Message to 'CPTPaperJam_use' from Copy factor
			CPTPaperJam_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTPaperJam_use_B[0], CPTPaperJam_item0_B);
			DistributionStructArray<Beta,double> CPTPaperJam_item1_B;
			// Create array for 'CPTPaperJam_item1' Backwards messages.
			CPTPaperJam_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTPaperJam_item1_B[rollerRange] = Beta.Uniform();
			}
			Beta CPTPaperJam_item1_rep_B_toDef;
			// Message to 'CPTPaperJam_item1_rep' from Replicate factor
			CPTPaperJam_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTPaperJam_F[1][0]);
			DistributionStructArray<Beta,double> CPTPaperJam_item1_rep_B;
			// Create array for 'CPTPaperJam_item1_rep' Backwards messages.
			CPTPaperJam_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTPaperJam_1_0_0__1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_0_0__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_item1_rep_B[index0] = Beta.Uniform();
				if (this.fuse[index0]) {
					if (!this.roller[index0]) {
						CPTPaperJam_1_0_0__1__B[index0] = Beta.Uniform();
						// Message to 'CPTPaperJam_1_0_0__1_' from Bernoulli factor
						CPTPaperJam_1_0_0__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
						// Message to 'CPTPaperJam_item1_rep' from Copy factor
						CPTPaperJam_item1_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_rep_B[index0], CPTPaperJam_1_0_0__1__B[index0]);
					}
				}
			}
			// Message to 'CPTPaperJam_item1_rep' from Replicate factor
			CPTPaperJam_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTPaperJam_item1_rep_B, CPTPaperJam_item1_rep_B_toDef);
			// Message to 'CPTPaperJam_item1' from Replicate factor
			CPTPaperJam_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_B[0], CPTPaperJam_item1_rep_B_toDef);
			Beta CPTPaperJam_item1_rep2_B_toDef;
			// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
			CPTPaperJam_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTPaperJam_F[1][1]);
			DistributionStructArray<Beta,double> CPTPaperJam_item1_rep2_B;
			// Create array for 'CPTPaperJam_item1_rep2' Backwards messages.
			CPTPaperJam_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTPaperJam_1_1_1__1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_item1_rep2_B[index0] = Beta.Uniform();
				if (!this.fuse[index0]) {
					if (!this.roller[index0]) {
						CPTPaperJam_1_1_1__1__B[index0] = Beta.Uniform();
						// Message to 'CPTPaperJam_1_1_1__1_' from Bernoulli factor
						CPTPaperJam_1_1_1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
						// Message to 'CPTPaperJam_item1_rep2' from Copy factor
						CPTPaperJam_item1_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_rep2_B[index0], CPTPaperJam_1_1_1__1__B[index0]);
					}
				}
			}
			// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
			CPTPaperJam_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTPaperJam_item1_rep2_B, CPTPaperJam_item1_rep2_B_toDef);
			// Message to 'CPTPaperJam_item1' from Replicate factor
			CPTPaperJam_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_B[1], CPTPaperJam_item1_rep2_B_toDef);
			// Message to 'CPTPaperJam_use' from Copy factor
			CPTPaperJam_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTPaperJam_use_B[1], CPTPaperJam_item1_B);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam_marginal' Forwards messages.
				this.CPTPaperJam_marginal_F[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTPaperJam_marginal_F[fuseRange][rollerRange] = Beta.Uniform();
					// Message to 'CPTPaperJam_marginal' from Variable factor
					this.CPTPaperJam_marginal_F[fuseRange][rollerRange] = VariableOp.MarginalAverageConditional<Beta>(CPTPaperJam_use_B[fuseRange][rollerRange], this.probPaperJamPrior[fuseRange][rollerRange], this.CPTPaperJam_marginal_F[fuseRange][rollerRange]);
				}
			}
			this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Fuse and numExample and ProbFusePrior</summary>
		private void Changed_Fuse_numExample_ProbFusePrior()
		{
			if (this.Changed_Fuse_numExample_ProbFusePrior_isDone) {
				return ;
			}
			this.ProbFuse_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> ProbFuse_rep_B;
			// Create array for 'ProbFuse_rep' Backwards messages.
			ProbFuse_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				ProbFuse_rep_B[index0] = Beta.Uniform();
				// Message to 'ProbFuse_rep' from Bernoulli factor
				ProbFuse_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.fuse[index0]);
			}
			Beta ProbFuse_rep_B_toDef;
			// Message to 'ProbFuse_rep' from Replicate factor
			ProbFuse_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probFusePrior);
			// Message to 'ProbFuse_rep' from Replicate factor
			ProbFuse_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(ProbFuse_rep_B, ProbFuse_rep_B_toDef);
			// Message to 'ProbFuse_marginal' from Variable factor
			this.ProbFuse_marginal_F = VariableOp.MarginalAverageConditional<Beta>(ProbFuse_rep_B_toDef, this.probFusePrior, this.ProbFuse_marginal_F);
			this.Changed_Fuse_numExample_ProbFusePrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numExample</summary>
		private void Changed_MultPages_numExample()
		{
			if (this.Changed_MultPages_numExample_isDone) {
				return ;
			}
			this.MultPages_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.MultPages_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.MultPages_marginal, this.multPages);
			this.Changed_MultPages_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numExample and Paper and ProbMultPagesPrior and Roller</summary>
		private void Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller()
		{
			if (this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone) {
				return ;
			}
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_F;
			// Create array for 'CPTMultPages' Forwards messages.
			CPTMultPages_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages' Forwards messages.
				CPTMultPages_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTMultPages_F[paperRange][rollerRange] = Beta.Uniform();
				}
			}
			// Create array for 'CPTMultPages_marginal' Forwards messages.
			this.CPTMultPages_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_use_B;
			// Create array for 'CPTMultPages_use' Backwards messages.
			CPTMultPages_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages_use' Backwards messages.
				CPTMultPages_use_B[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTMultPages_use_B[paperRange][rollerRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTMultPages_item0_B;
			// Create array for 'CPTMultPages_item0' Backwards messages.
			CPTMultPages_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTMultPages_item0_B[rollerRange] = Beta.Uniform();
			}
			Beta CPTMultPages_item0_rep_B_toDef;
			// Message to 'CPTMultPages_item0_rep' from Replicate factor
			CPTMultPages_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTMultPages_F[0][0]);
			DistributionStructArray<Beta,double> CPTMultPages_item0_rep_B;
			// Create array for 'CPTMultPages_item0_rep' Backwards messages.
			CPTMultPages_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTMultPages_0_0_0__0__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_item0_rep_B[index0] = Beta.Uniform();
				if (this.paper[index0]) {
					if (this.roller[index0]) {
						CPTMultPages_0_0_0__0__B[index0] = Beta.Uniform();
						// Message to 'CPTMultPages_0_0_0__0_' from Bernoulli factor
						CPTMultPages_0_0_0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
						// Message to 'CPTMultPages_item0_rep' from Copy factor
						CPTMultPages_item0_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_rep_B[index0], CPTMultPages_0_0_0__0__B[index0]);
					}
				}
			}
			// Message to 'CPTMultPages_item0_rep' from Replicate factor
			CPTMultPages_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTMultPages_item0_rep_B, CPTMultPages_item0_rep_B_toDef);
			// Message to 'CPTMultPages_item0' from Replicate factor
			CPTMultPages_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_B[0], CPTMultPages_item0_rep_B_toDef);
			Beta CPTMultPages_item0_rep2_B_toDef;
			// Message to 'CPTMultPages_item0_rep2' from Replicate factor
			CPTMultPages_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTMultPages_F[0][1]);
			DistributionStructArray<Beta,double> CPTMultPages_item0_rep2_B;
			// Create array for 'CPTMultPages_item0_rep2' Backwards messages.
			CPTMultPages_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTMultPages_0_1_1__0__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_1_1__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_item0_rep2_B[index0] = Beta.Uniform();
				if (!this.paper[index0]) {
					if (this.roller[index0]) {
						CPTMultPages_0_1_1__0__B[index0] = Beta.Uniform();
						// Message to 'CPTMultPages_0_1_1__0_' from Bernoulli factor
						CPTMultPages_0_1_1__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
						// Message to 'CPTMultPages_item0_rep2' from Copy factor
						CPTMultPages_item0_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_rep2_B[index0], CPTMultPages_0_1_1__0__B[index0]);
					}
				}
			}
			// Message to 'CPTMultPages_item0_rep2' from Replicate factor
			CPTMultPages_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTMultPages_item0_rep2_B, CPTMultPages_item0_rep2_B_toDef);
			// Message to 'CPTMultPages_item0' from Replicate factor
			CPTMultPages_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_B[1], CPTMultPages_item0_rep2_B_toDef);
			// Message to 'CPTMultPages_use' from Copy factor
			CPTMultPages_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTMultPages_use_B[0], CPTMultPages_item0_B);
			DistributionStructArray<Beta,double> CPTMultPages_item1_B;
			// Create array for 'CPTMultPages_item1' Backwards messages.
			CPTMultPages_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTMultPages_item1_B[rollerRange] = Beta.Uniform();
			}
			Beta CPTMultPages_item1_rep_B_toDef;
			// Message to 'CPTMultPages_item1_rep' from Replicate factor
			CPTMultPages_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTMultPages_F[1][0]);
			DistributionStructArray<Beta,double> CPTMultPages_item1_rep_B;
			// Create array for 'CPTMultPages_item1_rep' Backwards messages.
			CPTMultPages_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTMultPages_1_0_0__1__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_0_0__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_item1_rep_B[index0] = Beta.Uniform();
				if (this.paper[index0]) {
					if (!this.roller[index0]) {
						CPTMultPages_1_0_0__1__B[index0] = Beta.Uniform();
						// Message to 'CPTMultPages_1_0_0__1_' from Bernoulli factor
						CPTMultPages_1_0_0__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
						// Message to 'CPTMultPages_item1_rep' from Copy factor
						CPTMultPages_item1_rep_B[index0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_rep_B[index0], CPTMultPages_1_0_0__1__B[index0]);
					}
				}
			}
			// Message to 'CPTMultPages_item1_rep' from Replicate factor
			CPTMultPages_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTMultPages_item1_rep_B, CPTMultPages_item1_rep_B_toDef);
			// Message to 'CPTMultPages_item1' from Replicate factor
			CPTMultPages_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_B[0], CPTMultPages_item1_rep_B_toDef);
			Beta CPTMultPages_item1_rep2_B_toDef;
			// Message to 'CPTMultPages_item1_rep2' from Replicate factor
			CPTMultPages_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(CPTMultPages_F[1][1]);
			DistributionStructArray<Beta,double> CPTMultPages_item1_rep2_B;
			// Create array for 'CPTMultPages_item1_rep2' Backwards messages.
			CPTMultPages_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'CPTMultPages_1_1_1__1__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_item1_rep2_B[index0] = Beta.Uniform();
				if (!this.paper[index0]) {
					if (!this.roller[index0]) {
						CPTMultPages_1_1_1__1__B[index0] = Beta.Uniform();
						// Message to 'CPTMultPages_1_1_1__1_' from Bernoulli factor
						CPTMultPages_1_1_1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
						// Message to 'CPTMultPages_item1_rep2' from Copy factor
						CPTMultPages_item1_rep2_B[index0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_rep2_B[index0], CPTMultPages_1_1_1__1__B[index0]);
					}
				}
			}
			// Message to 'CPTMultPages_item1_rep2' from Replicate factor
			CPTMultPages_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(CPTMultPages_item1_rep2_B, CPTMultPages_item1_rep2_B_toDef);
			// Message to 'CPTMultPages_item1' from Replicate factor
			CPTMultPages_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_B[1], CPTMultPages_item1_rep2_B_toDef);
			// Message to 'CPTMultPages_use' from Copy factor
			CPTMultPages_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTMultPages_use_B[1], CPTMultPages_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages_marginal' Forwards messages.
				this.CPTMultPages_marginal_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTMultPages_marginal_F[paperRange][rollerRange] = Beta.Uniform();
					// Message to 'CPTMultPages_marginal' from Variable factor
					this.CPTMultPages_marginal_F[paperRange][rollerRange] = VariableOp.MarginalAverageConditional<Beta>(CPTMultPages_use_B[paperRange][rollerRange], this.probMultPagesPrior[paperRange][rollerRange], this.CPTMultPages_marginal_F[paperRange][rollerRange]);
				}
			}
			this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and must reset on changes to Drum and Paper and ProbQualityPrior and Quality and Toner</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.CPTQuality_item0_item0_rep_F[index0] = Beta.Uniform();
				this.CPTQuality_item1_item1_rep_F[index0] = Beta.Uniform();
				this.CPTQuality_item0_item1_rep_F[index0] = Beta.Uniform();
				this.CPTQuality_item1_item0_rep_F[index0] = Beta.Uniform();
				this.CPTQuality_item0_item0_rep2_F[index0] = Beta.Uniform();
				this.CPTQuality_item1_item1_rep2_F[index0] = Beta.Uniform();
				this.CPTQuality_item0_item1_rep2_F[index0] = Beta.Uniform();
				this.CPTQuality_item1_item0_rep2_F[index0] = Beta.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numExample</summary>
		private void Changed_numExample()
		{
			if (this.Changed_numExample_isDone) {
				return ;
			}
			this.numExample_marginal = new PointMass<int>(this.NumExample);
			// Create array for replicates of 'vbool26_F'
			this.vbool26_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.vbool26_F[index0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTQuality_item0_item0_rep' Forwards messages.
			this.CPTQuality_item0_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item1_rep' Forwards messages.
			this.CPTQuality_item1_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item1_rep' Forwards messages.
			this.CPTQuality_item0_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item0_rep' Forwards messages.
			this.CPTQuality_item1_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item0_rep2' Forwards messages.
			this.CPTQuality_item0_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item1_rep2' Forwards messages.
			this.CPTQuality_item1_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item1_rep2' Forwards messages.
			this.CPTQuality_item0_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item0_rep2' Forwards messages.
			this.CPTQuality_item1_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			this.Changed_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Paper</summary>
		private void Changed_numExample_Paper()
		{
			if (this.Changed_numExample_Paper_isDone) {
				return ;
			}
			this.Paper_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Paper_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Paper_marginal, this.paper);
			this.Changed_numExample_Paper_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Paper and ProbPaperPrior</summary>
		private void Changed_numExample_Paper_ProbPaperPrior()
		{
			if (this.Changed_numExample_Paper_ProbPaperPrior_isDone) {
				return ;
			}
			this.ProbPaper_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> ProbPaper_rep_B;
			// Create array for 'ProbPaper_rep' Backwards messages.
			ProbPaper_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				ProbPaper_rep_B[index0] = Beta.Uniform();
				// Message to 'ProbPaper_rep' from Bernoulli factor
				ProbPaper_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paper[index0]);
			}
			Beta ProbPaper_rep_B_toDef;
			// Message to 'ProbPaper_rep' from Replicate factor
			ProbPaper_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probPaperPrior);
			// Message to 'ProbPaper_rep' from Replicate factor
			ProbPaper_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(ProbPaper_rep_B, ProbPaper_rep_B_toDef);
			// Message to 'ProbPaper_marginal' from Variable factor
			this.ProbPaper_marginal_F = VariableOp.MarginalAverageConditional<Beta>(ProbPaper_rep_B_toDef, this.probPaperPrior, this.ProbPaper_marginal_F);
			this.Changed_numExample_Paper_ProbPaperPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and PaperJam</summary>
		private void Changed_numExample_PaperJam()
		{
			if (this.Changed_numExample_PaperJam_isDone) {
				return ;
			}
			this.PaperJam_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.PaperJam_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PaperJam_marginal, this.paperJam);
			this.Changed_numExample_PaperJam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and ProbRollerPrior and Roller</summary>
		private void Changed_numExample_ProbRollerPrior_Roller()
		{
			if (this.Changed_numExample_ProbRollerPrior_Roller_isDone) {
				return ;
			}
			this.Probroller_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> Probroller_rep_B;
			// Create array for 'Probroller_rep' Backwards messages.
			Probroller_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				Probroller_rep_B[index0] = Beta.Uniform();
				// Message to 'Probroller_rep' from Bernoulli factor
				Probroller_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.roller[index0]);
			}
			Beta Probroller_rep_B_toDef;
			// Message to 'Probroller_rep' from Replicate factor
			Probroller_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probRollerPrior);
			// Message to 'Probroller_rep' from Replicate factor
			Probroller_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(Probroller_rep_B, Probroller_rep_B_toDef);
			// Message to 'Probroller_marginal' from Variable factor
			this.Probroller_marginal_F = VariableOp.MarginalAverageConditional<Beta>(Probroller_rep_B_toDef, this.probRollerPrior, this.Probroller_marginal_F);
			this.Changed_numExample_ProbRollerPrior_Roller_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and ProbTonerPrior and Toner</summary>
		private void Changed_numExample_ProbTonerPrior_Toner()
		{
			if (this.Changed_numExample_ProbTonerPrior_Toner_isDone) {
				return ;
			}
			this.ProbToner_marginal_F = Beta.Uniform();
			DistributionStructArray<Beta,double> ProbToner_rep_B;
			// Create array for 'ProbToner_rep' Backwards messages.
			ProbToner_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				ProbToner_rep_B[index0] = Beta.Uniform();
				// Message to 'ProbToner_rep' from Bernoulli factor
				ProbToner_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.toner[index0]);
			}
			Beta ProbToner_rep_B_toDef;
			// Message to 'ProbToner_rep' from Replicate factor
			ProbToner_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probTonerPrior);
			// Message to 'ProbToner_rep' from Replicate factor
			ProbToner_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(ProbToner_rep_B, ProbToner_rep_B_toDef);
			// Message to 'ProbToner_marginal' from Variable factor
			this.ProbToner_marginal_F = VariableOp.MarginalAverageConditional<Beta>(ProbToner_rep_B_toDef, this.probTonerPrior, this.ProbToner_marginal_F);
			this.Changed_numExample_ProbTonerPrior_Toner_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Quality</summary>
		private void Changed_numExample_Quality()
		{
			if (this.Changed_numExample_Quality_isDone) {
				return ;
			}
			this.Quality_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Quality_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Quality_marginal, this.quality);
			this.Changed_numExample_Quality_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Roller</summary>
		private void Changed_numExample_Roller()
		{
			if (this.Changed_numExample_Roller_isDone) {
				return ;
			}
			this.Roller_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Roller_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Roller_marginal, this.roller);
			this.Changed_numExample_Roller_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Toner</summary>
		private void Changed_numExample_Toner()
		{
			if (this.Changed_numExample_Toner_isDone) {
				return ;
			}
			this.Toner_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Toner_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Toner_marginal, this.toner);
			this.Changed_numExample_Toner_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Wrinkled</summary>
		private void Changed_numExample_Wrinkled()
		{
			if (this.Changed_numExample_Wrinkled_isDone) {
				return ;
			}
			this.Wrinkled_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Wrinkled_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Wrinkled_marginal, this.wrinkled);
			this.Changed_numExample_Wrinkled_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbBurningPrior</summary>
		private void Changed_ProbBurningPrior()
		{
			if (this.Changed_ProbBurningPrior_isDone) {
				return ;
			}
			this.ProbBurningPrior_marginal = new PointMass<Beta[]>(this.probBurningPrior);
			this.Changed_ProbBurningPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbDrumPrior</summary>
		private void Changed_ProbDrumPrior()
		{
			if (this.Changed_ProbDrumPrior_isDone) {
				return ;
			}
			this.ProbDrumPrior_marginal = new PointMass<Beta>(this.probDrumPrior);
			this.Changed_ProbDrumPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbFusePrior</summary>
		private void Changed_ProbFusePrior()
		{
			if (this.Changed_ProbFusePrior_isDone) {
				return ;
			}
			this.ProbFusePrior_marginal = new PointMass<Beta>(this.probFusePrior);
			this.Changed_ProbFusePrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbMultPagesPrior</summary>
		private void Changed_ProbMultPagesPrior()
		{
			if (this.Changed_ProbMultPagesPrior_isDone) {
				return ;
			}
			this.ProbMultPagesPrior_marginal = new PointMass<Beta[][]>(this.probMultPagesPrior);
			this.Changed_ProbMultPagesPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbPaperJamPrior</summary>
		private void Changed_ProbPaperJamPrior()
		{
			if (this.Changed_ProbPaperJamPrior_isDone) {
				return ;
			}
			this.ProbPaperJamPrior_marginal = new PointMass<Beta[][]>(this.probPaperJamPrior);
			this.Changed_ProbPaperJamPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbPaperPrior</summary>
		private void Changed_ProbPaperPrior()
		{
			if (this.Changed_ProbPaperPrior_isDone) {
				return ;
			}
			this.ProbPaperPrior_marginal = new PointMass<Beta>(this.probPaperPrior);
			this.Changed_ProbPaperPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbQualityPrior</summary>
		private void Changed_ProbQualityPrior()
		{
			if (this.Changed_ProbQualityPrior_isDone) {
				return ;
			}
			this.ProbQualityPrior_marginal = new PointMass<Beta[][][]>(this.probQualityPrior);
			this.Changed_ProbQualityPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbRollerPrior</summary>
		private void Changed_ProbRollerPrior()
		{
			if (this.Changed_ProbRollerPrior_isDone) {
				return ;
			}
			this.ProbRollerPrior_marginal = new PointMass<Beta>(this.probRollerPrior);
			this.Changed_ProbRollerPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbTonerPrior</summary>
		private void Changed_ProbTonerPrior()
		{
			if (this.Changed_ProbTonerPrior_isDone) {
				return ;
			}
			this.ProbTonerPrior_marginal = new PointMass<Beta>(this.probTonerPrior);
			this.Changed_ProbTonerPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbWrinkledPrior</summary>
		private void Changed_ProbWrinkledPrior()
		{
			if (this.Changed_ProbWrinkledPrior_isDone) {
				return ;
			}
			this.ProbWrinkledPrior_marginal = new PointMass<Beta[][]>(this.probWrinkledPrior);
			this.Changed_ProbWrinkledPrior_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTBurning' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> CPTBurningMarginal()
		{
			return this.CPTBurning_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTMultPages' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPagesMarginal()
		{
			return this.CPTMultPages_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTPaperJam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJamMarginal()
		{
			return this.CPTPaperJam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTQuality' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQualityMarginal()
		{
			return this.CPTQuality_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTWrinkled' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkledMarginal()
		{
			return this.CPTWrinkled_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Drum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> DrumMarginal()
		{
			return this.Drum_marginal;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
					this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
				}
				this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner_isDone = false;
			}
			this.Changed_Fuse_numExample_PaperJam_ProbPaperJamPrior_Roller();
			this.Changed_MultPages_numExample_Paper_ProbMultPagesPrior_Roller();
			this.Changed_Fuse_numExample_Paper_ProbWrinkledPrior_Wrinkled();
			this.Constant();
			this.Changed_Burning_Fuse_numExample_ProbBurningPrior();
			this.Changed_numExample_ProbRollerPrior_Roller();
			this.Changed_numExample_Paper_ProbPaperPrior();
			this.Changed_numExample_ProbTonerPrior_Toner();
			this.Changed_Drum_numExample_ProbDrumPrior();
			this.Changed_Fuse_numExample_ProbFusePrior();
			this.Changed_numExample_PaperJam();
			this.Changed_MultPages_numExample();
			this.Changed_numExample_Wrinkled();
			this.Changed_numExample_Quality();
			this.Changed_Burning_numExample();
			this.Changed_numExample_Roller();
			this.Changed_numExample_Paper();
			this.Changed_numExample_Toner();
			this.Changed_Drum_numExample();
			this.Changed_Fuse_numExample();
			this.Changed_ProbPaperJamPrior();
			this.Changed_ProbMultPagesPrior();
			this.Changed_ProbWrinkledPrior();
			this.Changed_ProbQualityPrior();
			this.Changed_ProbBurningPrior();
			this.Changed_ProbRollerPrior();
			this.Changed_ProbPaperPrior();
			this.Changed_ProbTonerPrior();
			this.Changed_ProbDrumPrior();
			this.Changed_ProbFusePrior();
			this.Changed_numExample();
			this.Changed_numberOfIterationsDecreased_numExample_Init_Drum_Paper_ProbQualityPrior_Quality_Toner(initialise);
			this.Changed_Drum_numberOfIterationsDecreased_numExample_Init_Paper_ProbQualityPrior_Quality_Toner(initialise);
			this.Changed_Drum_numberOfIterations_numExample_Paper_ProbQualityPrior_Quality_Toner(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Fuse' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> FuseMarginal()
		{
			return this.Fuse_marginal;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="numExample") {
				return this.numExample;
			}
			if (variableName=="ProbFusePrior") {
				return this.ProbFusePrior;
			}
			if (variableName=="ProbDrumPrior") {
				return this.ProbDrumPrior;
			}
			if (variableName=="ProbTonerPrior") {
				return this.ProbTonerPrior;
			}
			if (variableName=="ProbPaperPrior") {
				return this.ProbPaperPrior;
			}
			if (variableName=="ProbRollerPrior") {
				return this.ProbRollerPrior;
			}
			if (variableName=="ProbBurningPrior") {
				return this.ProbBurningPrior;
			}
			if (variableName=="ProbQualityPrior") {
				return this.ProbQualityPrior;
			}
			if (variableName=="ProbWrinkledPrior") {
				return this.ProbWrinkledPrior;
			}
			if (variableName=="ProbMultPagesPrior") {
				return this.ProbMultPagesPrior;
			}
			if (variableName=="ProbPaperJamPrior") {
				return this.ProbPaperJamPrior;
			}
			if (variableName=="Fuse") {
				return this.Fuse;
			}
			if (variableName=="Drum") {
				return this.Drum;
			}
			if (variableName=="Toner") {
				return this.Toner;
			}
			if (variableName=="Paper") {
				return this.Paper;
			}
			if (variableName=="Roller") {
				return this.Roller;
			}
			if (variableName=="Burning") {
				return this.Burning;
			}
			if (variableName=="Quality") {
				return this.Quality;
			}
			if (variableName=="Wrinkled") {
				return this.Wrinkled;
			}
			if (variableName=="MultPages") {
				return this.MultPages;
			}
			if (variableName=="PaperJam") {
				return this.PaperJam;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="CPTPaperJam") {
				return this.CPTPaperJamMarginal();
			}
			if (variableName=="CPTMultPages") {
				return this.CPTMultPagesMarginal();
			}
			if (variableName=="CPTWrinkled") {
				return this.CPTWrinkledMarginal();
			}
			if (variableName=="CPTBurning") {
				return this.CPTBurningMarginal();
			}
			if (variableName=="Probroller") {
				return this.ProbrollerMarginal();
			}
			if (variableName=="ProbPaper") {
				return this.ProbPaperMarginal();
			}
			if (variableName=="ProbToner") {
				return this.ProbTonerMarginal();
			}
			if (variableName=="ProbDrum") {
				return this.ProbDrumMarginal();
			}
			if (variableName=="ProbFuse") {
				return this.ProbFuseMarginal();
			}
			if (variableName=="PaperJam") {
				return this.PaperJamMarginal();
			}
			if (variableName=="MultPages") {
				return this.MultPagesMarginal();
			}
			if (variableName=="Wrinkled") {
				return this.WrinkledMarginal();
			}
			if (variableName=="Quality") {
				return this.QualityMarginal();
			}
			if (variableName=="Burning") {
				return this.BurningMarginal();
			}
			if (variableName=="Roller") {
				return this.RollerMarginal();
			}
			if (variableName=="Paper") {
				return this.PaperMarginal();
			}
			if (variableName=="Toner") {
				return this.TonerMarginal();
			}
			if (variableName=="Drum") {
				return this.DrumMarginal();
			}
			if (variableName=="Fuse") {
				return this.FuseMarginal();
			}
			if (variableName=="ProbPaperJamPrior") {
				return this.ProbPaperJamPriorMarginal();
			}
			if (variableName=="ProbMultPagesPrior") {
				return this.ProbMultPagesPriorMarginal();
			}
			if (variableName=="ProbWrinkledPrior") {
				return this.ProbWrinkledPriorMarginal();
			}
			if (variableName=="ProbQualityPrior") {
				return this.ProbQualityPriorMarginal();
			}
			if (variableName=="ProbBurningPrior") {
				return this.ProbBurningPriorMarginal();
			}
			if (variableName=="ProbRollerPrior") {
				return this.ProbRollerPriorMarginal();
			}
			if (variableName=="ProbPaperPrior") {
				return this.ProbPaperPriorMarginal();
			}
			if (variableName=="ProbTonerPrior") {
				return this.ProbTonerPriorMarginal();
			}
			if (variableName=="ProbDrumPrior") {
				return this.ProbDrumPriorMarginal();
			}
			if (variableName=="ProbFusePrior") {
				return this.ProbFusePriorMarginal();
			}
			if (variableName=="numExample") {
				return this.NumExampleMarginal();
			}
			if (variableName=="CPTQuality") {
				return this.CPTQualityMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'MultPages' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> MultPagesMarginal()
		{
			return this.MultPages_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'numExample' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NumExampleMarginal()
		{
			return this.numExample_marginal;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'PaperJam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> PaperJamMarginal()
		{
			return this.PaperJam_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Paper' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> PaperMarginal()
		{
			return this.Paper_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbBurningPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[]> ProbBurningPriorMarginal()
		{
			return this.ProbBurningPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbDrum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbDrumMarginal()
		{
			return this.ProbDrum_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbDrumPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbDrumPriorMarginal()
		{
			return this.ProbDrumPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbFuse' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbFuseMarginal()
		{
			return this.ProbFuse_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbFusePrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbFusePriorMarginal()
		{
			return this.ProbFusePrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbMultPagesPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbMultPagesPriorMarginal()
		{
			return this.ProbMultPagesPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaperJamPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbPaperJamPriorMarginal()
		{
			return this.ProbPaperJamPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaper' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbPaperMarginal()
		{
			return this.ProbPaper_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaperPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbPaperPriorMarginal()
		{
			return this.ProbPaperPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbQualityPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][][]> ProbQualityPriorMarginal()
		{
			return this.ProbQualityPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Probroller' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbrollerMarginal()
		{
			return this.Probroller_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbRollerPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbRollerPriorMarginal()
		{
			return this.ProbRollerPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbToner' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbTonerMarginal()
		{
			return this.ProbToner_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbTonerPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbTonerPriorMarginal()
		{
			return this.ProbTonerPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbWrinkledPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbWrinkledPriorMarginal()
		{
			return this.ProbWrinkledPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Quality' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> QualityMarginal()
		{
			return this.Quality_marginal;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Roller' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> RollerMarginal()
		{
			return this.Roller_marginal;
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="numExample") {
				this.numExample = (int)value;
				return ;
			}
			if (variableName=="ProbFusePrior") {
				this.ProbFusePrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbDrumPrior") {
				this.ProbDrumPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbTonerPrior") {
				this.ProbTonerPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbPaperPrior") {
				this.ProbPaperPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbRollerPrior") {
				this.ProbRollerPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbBurningPrior") {
				this.ProbBurningPrior = (Beta[])value;
				return ;
			}
			if (variableName=="ProbQualityPrior") {
				this.ProbQualityPrior = (Beta[][][])value;
				return ;
			}
			if (variableName=="ProbWrinkledPrior") {
				this.ProbWrinkledPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="ProbMultPagesPrior") {
				this.ProbMultPagesPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="ProbPaperJamPrior") {
				this.ProbPaperJamPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="Fuse") {
				this.Fuse = (bool[])value;
				return ;
			}
			if (variableName=="Drum") {
				this.Drum = (bool[])value;
				return ;
			}
			if (variableName=="Toner") {
				this.Toner = (bool[])value;
				return ;
			}
			if (variableName=="Paper") {
				this.Paper = (bool[])value;
				return ;
			}
			if (variableName=="Roller") {
				this.Roller = (bool[])value;
				return ;
			}
			if (variableName=="Burning") {
				this.Burning = (bool[])value;
				return ;
			}
			if (variableName=="Quality") {
				this.Quality = (bool[])value;
				return ;
			}
			if (variableName=="Wrinkled") {
				this.Wrinkled = (bool[])value;
				return ;
			}
			if (variableName=="MultPages") {
				this.MultPages = (bool[])value;
				return ;
			}
			if (variableName=="PaperJam") {
				this.PaperJam = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Toner' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> TonerMarginal()
		{
			return this.Toner_marginal;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Wrinkled' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> WrinkledMarginal()
		{
			return this.Wrinkled_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
