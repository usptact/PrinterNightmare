// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.1810.501 at 17:18 on Monday, October 8, 2018.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the Burning property</summary>
		private bool[] burning;
		public DistributionStructArray<Bernoulli,bool> Burning_marginal;
		/// <summary>True if Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16 has executed. Set this to false to force re-execution of Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16</summary>
		public bool Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone;
		/// <summary>True if Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46 has executed. Set this to false to force re-execution of Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46</summary>
		public bool Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone;
		/// <summary>True if Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46 has performed initialisation. Set this to false to force re-execution of Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46</summary>
		public bool Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isInitialised;
		/// <summary>True if Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47 has executed. Set this to false to force re-execution of Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47</summary>
		public bool Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone;
		/// <summary>True if Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47 has performed initialisation. Set this to false to force re-execution of Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47</summary>
		public bool Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isInitialised;
		/// <summary>True if Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45 has executed. Set this to false to force re-execution of Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45</summary>
		public bool Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone;
		/// <summary>True if Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45 has performed initialisation. Set this to false to force re-execution of Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45</summary>
		public bool Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised;
		/// <summary>True if Changed_Burning_numExample has executed. Set this to false to force re-execution of Changed_Burning_numExample</summary>
		public bool Changed_Burning_numExample_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40 has executed. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40 has performed initialisation. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39 has executed. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39 has performed initialisation. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43 has executed. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43 has performed initialisation. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38 has executed. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38 has performed initialisation. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32 has executed. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone;
		/// <summary>True if Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32 has performed initialisation. Set this to false to force re-execution of Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32</summary>
		public bool Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised;
		/// <summary>True if Changed_MultPages_numExample has executed. Set this to false to force re-execution of Changed_MultPages_numExample</summary>
		public bool Changed_MultPages_numExample_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20</summary>
		public bool Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42</summary>
		public bool Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21</summary>
		public bool Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21</summary>
		public bool Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24</summary>
		public bool Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24</summary>
		public bool Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18</summary>
		public bool Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18</summary>
		public bool Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26</summary>
		public bool Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26</summary>
		public bool Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27</summary>
		public bool Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27</summary>
		public bool Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28</summary>
		public bool Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28</summary>
		public bool Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22</summary>
		public bool Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22</summary>
		public bool Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23</summary>
		public bool Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23</summary>
		public bool Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25</summary>
		public bool Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25</summary>
		public bool Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised;
		/// <summary>True if Changed_numExample has executed. Set this to false to force re-execution of Changed_numExample</summary>
		public bool Changed_numExample_isDone;
		/// <summary>True if Changed_numExample_PaperJam has executed. Set this to false to force re-execution of Changed_numExample_PaperJam</summary>
		public bool Changed_numExample_PaperJam_isDone;
		/// <summary>True if Changed_numExample_Quality has executed. Set this to false to force re-execution of Changed_numExample_Quality</summary>
		public bool Changed_numExample_Quality_isDone;
		/// <summary>True if Changed_numExample_Wrinkled has executed. Set this to false to force re-execution of Changed_numExample_Wrinkled</summary>
		public bool Changed_numExample_Wrinkled_isDone;
		/// <summary>True if Changed_ProbBurningPrior has executed. Set this to false to force re-execution of Changed_ProbBurningPrior</summary>
		public bool Changed_ProbBurningPrior_isDone;
		/// <summary>True if Changed_ProbDrumPrior has executed. Set this to false to force re-execution of Changed_ProbDrumPrior</summary>
		public bool Changed_ProbDrumPrior_isDone;
		/// <summary>True if Changed_ProbFusePrior has executed. Set this to false to force re-execution of Changed_ProbFusePrior</summary>
		public bool Changed_ProbFusePrior_isDone;
		/// <summary>True if Changed_ProbMultPagesPrior has executed. Set this to false to force re-execution of Changed_ProbMultPagesPrior</summary>
		public bool Changed_ProbMultPagesPrior_isDone;
		/// <summary>True if Changed_ProbPaperJamPrior has executed. Set this to false to force re-execution of Changed_ProbPaperJamPrior</summary>
		public bool Changed_ProbPaperJamPrior_isDone;
		/// <summary>True if Changed_ProbPaperPrior has executed. Set this to false to force re-execution of Changed_ProbPaperPrior</summary>
		public bool Changed_ProbPaperPrior_isDone;
		/// <summary>True if Changed_ProbQualityPrior has executed. Set this to false to force re-execution of Changed_ProbQualityPrior</summary>
		public bool Changed_ProbQualityPrior_isDone;
		/// <summary>True if Changed_ProbRollerPrior has executed. Set this to false to force re-execution of Changed_ProbRollerPrior</summary>
		public bool Changed_ProbRollerPrior_isDone;
		/// <summary>True if Changed_ProbTonerPrior has executed. Set this to false to force re-execution of Changed_ProbTonerPrior</summary>
		public bool Changed_ProbTonerPrior_isDone;
		/// <summary>True if Changed_ProbWrinkledPrior has executed. Set this to false to force re-execution of Changed_ProbWrinkledPrior</summary>
		public bool Changed_ProbWrinkledPrior_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public DistributionStructArray<Beta,double> CPTBurning_F;
		/// <summary>Message to marginal of 'CPTBurning'</summary>
		public DistributionStructArray<Beta,double> CPTBurning_marginal_F;
		public DistributionStructArray<Beta,double> CPTBurning_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTBurning_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTBurning_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTBurning_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTBurning_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTBurning_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTBurning_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTBurning_rep2_F_marginal;
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_F;
		public DistributionStructArray<Beta,double> CPTMultPages_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTMultPages_item0_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTMultPages_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTMultPages_item0_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTMultPages_item0_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTMultPages_item0_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTMultPages_item0_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTMultPages_item0_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTMultPages_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTMultPages_item1_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTMultPages_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTMultPages_item1_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTMultPages_item1_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTMultPages_item1_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTMultPages_item1_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTMultPages_item1_rep2_F_marginal;
		/// <summary>Message to marginal of 'CPTMultPages'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_marginal_F;
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_F;
		public DistributionStructArray<Beta,double> CPTPaperJam_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTPaperJam_item0_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTPaperJam_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTPaperJam_item0_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTPaperJam_item0_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTPaperJam_item0_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTPaperJam_item0_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTPaperJam_item0_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTPaperJam_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTPaperJam_item1_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTPaperJam_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTPaperJam_item1_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTPaperJam_item1_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTPaperJam_item1_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTPaperJam_item1_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTPaperJam_item1_rep2_F_marginal;
		/// <summary>Message to marginal of 'CPTPaperJam'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_marginal_F;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_F;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item0_item0_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item0_item0_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item0_item0_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item0_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item0_item0_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item0_item1_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item0_item1_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item0_item1_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item0_item1_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item0_item1_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item1_item0_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item1_item0_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item1_item0_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item0_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item1_item0_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item1_item1_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item1_item1_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTQuality_item1_item1_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTQuality_item1_item1_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTQuality_item1_item1_rep2_F_marginal;
		/// <summary>Message to marginal of 'CPTQuality'</summary>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_marginal_F;
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_F;
		public DistributionStructArray<Beta,double> CPTWrinkled_item0_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTWrinkled_item0_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTWrinkled_item0_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTWrinkled_item0_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTWrinkled_item0_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTWrinkled_item0_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTWrinkled_item0_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTWrinkled_item0_rep2_F_marginal;
		public DistributionStructArray<Beta,double> CPTWrinkled_item1_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTWrinkled_item1_rep_B_toDef;
		public DistributionStructArray<Beta,double> CPTWrinkled_item1_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTWrinkled_item1_rep_F_marginal;
		public DistributionStructArray<Beta,double> CPTWrinkled_item1_rep2_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta CPTWrinkled_item1_rep2_B_toDef;
		public DistributionStructArray<Beta,double> CPTWrinkled_item1_rep2_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta CPTWrinkled_item1_rep2_F_marginal;
		/// <summary>Message to marginal of 'CPTWrinkled'</summary>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_marginal_F;
		public DistributionStructArray<Bernoulli,bool> Drum_F;
		public DistributionStructArray<Bernoulli,bool> Drum_index0__selector_cases_0_B;
		public Bernoulli[][] Drum_index0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Drum_index0__selector_cases_1_B;
		public Bernoulli[][] Drum_index0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Drum_index0__selector_cases_B;
		public Bernoulli[][] Drum_index0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Drum_index0__selector_uses_B_toDef;
		public Bernoulli[][] Drum_index0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Drum_index0__selector_uses_F_marginal;
		/// <summary>Message to marginal of 'Drum'</summary>
		public DistributionStructArray<Bernoulli,bool> Drum_marginal_F;
		public DistributionStructArray<Bernoulli,bool> Fuse_F;
		public DistributionStructArray<Bernoulli,bool> Fuse_index0__selector_cases_0_B;
		public Bernoulli[][] Fuse_index0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Fuse_index0__selector_cases_1_B;
		public Bernoulli[][] Fuse_index0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Fuse_index0__selector_cases_B;
		public Bernoulli[][] Fuse_index0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Fuse_index0__selector_uses_B_toDef;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Fuse_index0__selector_uses_F_marginal;
		/// <summary>Message to marginal of 'Fuse'</summary>
		public DistributionStructArray<Bernoulli,bool> Fuse_marginal_F;
		/// <summary>Field backing the MultPages property</summary>
		private bool[] multPages;
		public DistributionStructArray<Bernoulli,bool> MultPages_marginal;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the numExample property</summary>
		private int NumExample;
		public PointMass<int> numExample_marginal;
		public DistributionStructArray<Bernoulli,bool> Paper_F;
		public DistributionStructArray<Bernoulli,bool> Paper_index0__0__B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0__1__B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0__B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0__selector_cases_0_B;
		public Bernoulli[][] Paper_index0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0__selector_cases_1_B;
		public Bernoulli[][] Paper_index0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0__selector_cases_B;
		public Bernoulli[][] Paper_index0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_0__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_2_0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_0__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_2_0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_2_0__selector_cases_B;
		public Bernoulli[][] Paper_index0_2_0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_0__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_2_0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_1__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_2_1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_1__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_2_1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_2_1__selector_cases_B;
		public Bernoulli[][] Paper_index0_2_1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_1__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_2_1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_2_1__selector_uses_F_marginal;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_2_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_0__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_3_0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_0__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_3_0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_3_0__selector_cases_B;
		public Bernoulli[][] Paper_index0_3_0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_0__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_3_0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_1__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_3_1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_1__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_3_1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_3_1__selector_cases_B;
		public Bernoulli[][] Paper_index0_3_1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_1__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_3_1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_3_1__selector_uses_F_marginal;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_3_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_0__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_4_0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_0__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_4_0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_4_0__selector_cases_B;
		public Bernoulli[][] Paper_index0_4_0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_0__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_4_0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_1__selector_cases_0_B;
		public Bernoulli[][] Paper_index0_4_1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_1__selector_cases_1_B;
		public Bernoulli[][] Paper_index0_4_1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_4_1__selector_cases_B;
		public Bernoulli[][] Paper_index0_4_1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_1__selector_uses_B_toDef;
		public Bernoulli[][] Paper_index0_4_1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_index0_4_1__selector_uses_F_marginal;
		/// <summary>Message to marginal of 'Paper'</summary>
		public DistributionStructArray<Bernoulli,bool> Paper_marginal_F;
		/// <summary>Messages from use of 'Paper'</summary>
		public Bernoulli[][] Paper_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_uses_B_index0__toDef;
		/// <summary>Messages to use of 'Paper'</summary>
		public Bernoulli[][] Paper_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Paper_uses_F_index0__marginal;
		/// <summary>Field backing the PaperJam property</summary>
		private bool[] paperJam;
		public DistributionStructArray<Bernoulli,bool> PaperJam_marginal;
		/// <summary>Field backing the ProbBurningPrior property</summary>
		private Beta[] probBurningPrior;
		public PointMass<Beta[]> ProbBurningPrior_marginal;
		/// <summary>Message to marginal of 'ProbDrum'</summary>
		public Beta ProbDrum_marginal_F;
		public DistributionStructArray<Beta,double> ProbDrum_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta ProbDrum_rep_B_toDef;
		public DistributionStructArray<Beta,double> ProbDrum_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta ProbDrum_rep_F_marginal;
		/// <summary>Field backing the ProbDrumPrior property</summary>
		private Beta probDrumPrior;
		public PointMass<Beta> ProbDrumPrior_marginal;
		/// <summary>Message to marginal of 'ProbFuse'</summary>
		public Beta ProbFuse_marginal_F;
		public DistributionStructArray<Beta,double> ProbFuse_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta ProbFuse_rep_B_toDef;
		public DistributionStructArray<Beta,double> ProbFuse_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta ProbFuse_rep_F_marginal;
		/// <summary>Field backing the ProbFusePrior property</summary>
		private Beta probFusePrior;
		public PointMass<Beta> ProbFusePrior_marginal;
		/// <summary>Field backing the ProbMultPagesPrior property</summary>
		private Beta[][] probMultPagesPrior;
		public PointMass<Beta[][]> ProbMultPagesPrior_marginal;
		/// <summary>Message to marginal of 'ProbPaper'</summary>
		public Beta ProbPaper_marginal_F;
		public DistributionStructArray<Beta,double> ProbPaper_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta ProbPaper_rep_B_toDef;
		public DistributionStructArray<Beta,double> ProbPaper_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta ProbPaper_rep_F_marginal;
		/// <summary>Field backing the ProbPaperJamPrior property</summary>
		private Beta[][] probPaperJamPrior;
		public PointMass<Beta[][]> ProbPaperJamPrior_marginal;
		/// <summary>Field backing the ProbPaperPrior property</summary>
		private Beta probPaperPrior;
		public PointMass<Beta> ProbPaperPrior_marginal;
		/// <summary>Field backing the ProbQualityPrior property</summary>
		private Beta[][][] probQualityPrior;
		public PointMass<Beta[][][]> ProbQualityPrior_marginal;
		/// <summary>Message to marginal of 'Probroller'</summary>
		public Beta Probroller_marginal_F;
		public DistributionStructArray<Beta,double> Probroller_rep_F;
		/// <summary>Field backing the ProbRollerPrior property</summary>
		private Beta probRollerPrior;
		public PointMass<Beta> ProbRollerPrior_marginal;
		/// <summary>Message to marginal of 'ProbToner'</summary>
		public Beta ProbToner_marginal_F;
		public DistributionStructArray<Beta,double> ProbToner_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta ProbToner_rep_B_toDef;
		public DistributionStructArray<Beta,double> ProbToner_rep_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta ProbToner_rep_F_marginal;
		/// <summary>Field backing the ProbTonerPrior property</summary>
		private Beta probTonerPrior;
		public PointMass<Beta> ProbTonerPrior_marginal;
		/// <summary>Field backing the ProbWrinkledPrior property</summary>
		private Beta[][] probWrinkledPrior;
		public PointMass<Beta[][]> ProbWrinkledPrior_marginal;
		/// <summary>Field backing the Quality property</summary>
		private bool[] quality;
		public DistributionStructArray<Bernoulli,bool> Quality_marginal;
		public DistributionStructArray<Bernoulli,bool> Roller_F;
		public DistributionStructArray<Bernoulli,bool> Roller_index0__0__selector_cases_0_B;
		public Bernoulli[][] Roller_index0__0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Roller_index0__0__selector_cases_1_B;
		public Bernoulli[][] Roller_index0__0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0__0__selector_cases_B;
		public Bernoulli[][] Roller_index0__0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0__0__selector_uses_B_toDef;
		public Bernoulli[][] Roller_index0__0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0__0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Roller_index0__1__selector_cases_0_B;
		public Bernoulli[][] Roller_index0__1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Roller_index0__1__selector_cases_1_B;
		public Bernoulli[][] Roller_index0__1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0__1__selector_cases_B;
		public Bernoulli[][] Roller_index0__1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0__1__selector_uses_B_toDef;
		public Bernoulli[][] Roller_index0__1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0__1__selector_uses_F_marginal;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0__B;
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_0__selector_cases_0_B;
		public Bernoulli[][] Roller_index0_2_0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_0__selector_cases_1_B;
		public Bernoulli[][] Roller_index0_2_0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0_2_0__selector_cases_B;
		public Bernoulli[][] Roller_index0_2_0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_0__selector_uses_B_toDef;
		public Bernoulli[][] Roller_index0_2_0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_1__selector_cases_0_B;
		public Bernoulli[][] Roller_index0_2_1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_1__selector_cases_1_B;
		public Bernoulli[][] Roller_index0_2_1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0_2_1__selector_cases_B;
		public Bernoulli[][] Roller_index0_2_1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_1__selector_uses_B_toDef;
		public Bernoulli[][] Roller_index0_2_1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> Roller_index0_2_1__selector_uses_F_marginal;
		/// <summary>Message to marginal of 'Roller'</summary>
		public DistributionStructArray<Bernoulli,bool> Roller_marginal_F;
		/// <summary>Messages from use of 'Roller'</summary>
		public Bernoulli[][] Roller_uses_B;
		/// <summary>Messages to use of 'Roller'</summary>
		public Bernoulli[][] Roller_uses_F;
		public DistributionStructArray<Bernoulli,bool> Toner_F;
		/// <summary>Message to marginal of 'Toner'</summary>
		public DistributionStructArray<Bernoulli,bool> Toner_marginal_F;
		/// <summary>The constant 'vBernoulli0'</summary>
		public Bernoulli vBernoulli0;
		public DistributionStructArray<Bernoulli,bool> vbool26__0__selector_cases_0_B;
		public Bernoulli[][] vbool26__0__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> vbool26__0__selector_cases_1_B;
		public Bernoulli[][] vbool26__0__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool26__0__selector_cases_B;
		public Bernoulli[][] vbool26__0__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26__0__selector_uses_B_toDef;
		public Bernoulli[][] vbool26__0__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26__0__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> vbool26__1__selector_cases_0_B;
		public Bernoulli[][] vbool26__1__selector_cases_0_uses_B;
		public DistributionStructArray<Bernoulli,bool> vbool26__1__selector_cases_1_B;
		public Bernoulli[][] vbool26__1__selector_cases_1_uses_B;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool26__1__selector_cases_B;
		public Bernoulli[][] vbool26__1__selector_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26__1__selector_uses_B_toDef;
		public Bernoulli[][] vbool26__1__selector_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli></summary>
		public DistributionStructArray<Bernoulli,bool> vbool26__1__selector_uses_F_marginal;
		public DistributionStructArray<Bernoulli,bool> vbool26_F;
		/// <summary>Field backing the Wrinkled property</summary>
		private bool[] wrinkled;
		public DistributionStructArray<Bernoulli,bool> Wrinkled_marginal;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'Burning'</summary>
		public bool[] Burning
		{
			get {
				return this.burning;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Burning\'");
				}
				this.burning = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_Burning_numExample_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'MultPages'</summary>
		public bool[] MultPages
		{
			get {
				return this.multPages;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'MultPages\'");
				}
				this.multPages = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_MultPages_numExample_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'numExample'</summary>
		public int numExample
		{
			get {
				return this.NumExample;
			}
			set {
				if (this.NumExample!=value) {
					this.NumExample = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
					this.Changed_numExample_PaperJam_isDone = false;
					this.Changed_MultPages_numExample_isDone = false;
					this.Changed_numExample_Wrinkled_isDone = false;
					this.Changed_numExample_Quality_isDone = false;
					this.Changed_Burning_numExample_isDone = false;
					this.Changed_numExample_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'PaperJam'</summary>
		public bool[] PaperJam
		{
			get {
				return this.paperJam;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'PaperJam\'");
				}
				this.paperJam = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_numExample_PaperJam_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbBurningPrior'</summary>
		public Beta[] ProbBurningPrior
		{
			get {
				return this.probBurningPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbBurningPrior\'");
				}
				this.probBurningPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_ProbBurningPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbDrumPrior'</summary>
		public Beta ProbDrumPrior
		{
			get {
				return this.probDrumPrior;
			}
			set {
				if (this.probDrumPrior!=value) {
					this.probDrumPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
					this.Changed_ProbDrumPrior_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbFusePrior'</summary>
		public Beta ProbFusePrior
		{
			get {
				return this.probFusePrior;
			}
			set {
				if (this.probFusePrior!=value) {
					this.probFusePrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isDone = false;
					this.Changed_ProbFusePrior_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isInitialised = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbMultPagesPrior'</summary>
		public Beta[][] ProbMultPagesPrior
		{
			get {
				return this.probMultPagesPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbMultPagesPrior\'");
				}
				this.probMultPagesPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_ProbMultPagesPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbPaperJamPrior'</summary>
		public Beta[][] ProbPaperJamPrior
		{
			get {
				return this.probPaperJamPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbPaperJamPrior\'");
				}
				this.probPaperJamPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_ProbPaperJamPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbPaperPrior'</summary>
		public Beta ProbPaperPrior
		{
			get {
				return this.probPaperPrior;
			}
			set {
				if (this.probPaperPrior!=value) {
					this.probPaperPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
					this.Changed_ProbPaperPrior_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbQualityPrior'</summary>
		public Beta[][][] ProbQualityPrior
		{
			get {
				return this.probQualityPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbQualityPrior\'");
				}
				this.probQualityPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_ProbQualityPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ProbRollerPrior'</summary>
		public Beta ProbRollerPrior
		{
			get {
				return this.probRollerPrior;
			}
			set {
				if (this.probRollerPrior!=value) {
					this.probRollerPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
					this.Changed_ProbRollerPrior_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isInitialised = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isInitialised = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbTonerPrior'</summary>
		public Beta ProbTonerPrior
		{
			get {
				return this.probTonerPrior;
			}
			set {
				if (this.probTonerPrior!=value) {
					this.probTonerPrior = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
					this.Changed_ProbTonerPrior_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ProbWrinkledPrior'</summary>
		public Beta[][] ProbWrinkledPrior
		{
			get {
				return this.probWrinkledPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=2)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+2)+" was expected for variable \'ProbWrinkledPrior\'");
				}
				this.probWrinkledPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isDone = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_ProbWrinkledPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Quality'</summary>
		public bool[] Quality
		{
			get {
				return this.quality;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Quality\'");
				}
				this.quality = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_numExample_Quality_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'Wrinkled'</summary>
		public bool[] Wrinkled
		{
			get {
				return this.wrinkled;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumExample)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumExample)+" was expected for variable \'Wrinkled\'");
				}
				this.wrinkled = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = false;
				this.Changed_numExample_Wrinkled_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = false;
				this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
				this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = false;
				this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'Burning' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> BurningMarginal()
		{
			return this.Burning_marginal;
		}

		/// <summary>Computations that depend on the observed value of Burning and MultPages and numberOfIterations and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16(int numberOfIterations)
		{
			if (this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone) {
				return ;
			}
			this.ProbFuse_marginal_F = Beta.Uniform();
			// Create array for replicates of 'Fuse_index0__selector_uses_F'
			Bernoulli[][] Fuse_index0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Fuse_index0__selector_uses' Forwards messages.
				Fuse_index0__selector_uses_F[index0] = new Bernoulli[13];
				Fuse_index0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][3] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][4] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][5] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][6] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][7] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][8] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][9] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][10] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][11] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][12] = Bernoulli.Uniform();
				Fuse_index0__selector_uses_F[index0][2] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'CPTBurning_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTBurning_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTBurning_0_' Backwards messages.
				CPTBurning_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind = 0; _gateind<1; _gateind++) {
					CPTBurning_0__B[index0][_gateind] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTBurning_0__0__B'
			DistributionStructArray<Beta,double> CPTBurning_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTBurning_0__0__B[index0] = Beta.Uniform();
				// Message to 'CPTBurning_0__0_' from Bernoulli factor
				CPTBurning_0__0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.burning[index0]);
				// Message to 'CPTBurning_0_' from Copy factor
				CPTBurning_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTBurning_0__B[index0][0], CPTBurning_0__0__B[index0]);
			}
			// Create array for replicates of 'vbool26__B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool26__B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26_' Backwards messages.
				vbool26__B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _gateind3 = 0; _gateind3<2; _gateind3++) {
					vbool26__B[index0][_gateind3] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_0_' Backwards messages.
				CPTQuality_0_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind6 = 0; _gateind6<1; _gateind6++) {
					CPTQuality_0_0_0__B[index0][_gateind6] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_0_2' Backwards messages.
				CPTQuality_0_0_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind7 = 0; _gateind7<1; _gateind7++) {
					CPTQuality_0_0_0_2_B[index0][_gateind7] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_0_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_0_3' Backwards messages.
				CPTQuality_0_0_0_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind8 = 0; _gateind8<1; _gateind8++) {
					CPTQuality_0_0_0_3_B[index0][_gateind8] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_0_3_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_0_3_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_0_3_0__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_0_0_0_3_0_' from Bernoulli factor
				CPTQuality_0_0_0_3_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_0_0_0_3' from Copy factor
				CPTQuality_0_0_0_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_0_3_B[index0][0], CPTQuality_0_0_0_3_0__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_0_0_0_2_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_0_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_0_2_0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_0_0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_0_' Backwards messages.
				CPTQuality_1_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind9 = 0; _gateind9<1; _gateind9++) {
					CPTQuality_1_0_0__B[index0][_gateind9] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_0_2' Backwards messages.
				CPTQuality_1_0_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind10 = 0; _gateind10<1; _gateind10++) {
					CPTQuality_1_0_0_2_B[index0][_gateind10] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_0_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_0_3' Backwards messages.
				CPTQuality_1_0_0_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind11 = 0; _gateind11<1; _gateind11++) {
					CPTQuality_1_0_0_3_B[index0][_gateind11] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_0_3_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_0_3_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_0_3_1__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_1_0_0_3_1_' from Bernoulli factor
				CPTQuality_1_0_0_3_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_1_0_0_3' from Copy factor
				CPTQuality_1_0_0_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_0_3_B[index0][0], CPTQuality_1_0_0_3_1__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_1_0_0_2_0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_0_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_0_2_0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_0_0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_0_' Backwards messages.
				CPTQuality_0_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind12 = 0; _gateind12<1; _gateind12++) {
					CPTQuality_0_1_0__B[index0][_gateind12] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_0_2' Backwards messages.
				CPTQuality_0_1_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind13 = 0; _gateind13<1; _gateind13++) {
					CPTQuality_0_1_0_2_B[index0][_gateind13] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_0_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_0_3' Backwards messages.
				CPTQuality_0_1_0_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind14 = 0; _gateind14<1; _gateind14++) {
					CPTQuality_0_1_0_3_B[index0][_gateind14] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_0_3_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_0_3_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_0_3_0__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_0_1_0_3_0_' from Bernoulli factor
				CPTQuality_0_1_0_3_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_0_1_0_3' from Copy factor
				CPTQuality_0_1_0_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_0_3_B[index0][0], CPTQuality_0_1_0_3_0__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_0_1_0_2_1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_0_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_0_2_1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_1_0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_0_' Backwards messages.
				CPTQuality_1_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind15 = 0; _gateind15<1; _gateind15++) {
					CPTQuality_1_1_0__B[index0][_gateind15] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_0_2' Backwards messages.
				CPTQuality_1_1_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind16 = 0; _gateind16<1; _gateind16++) {
					CPTQuality_1_1_0_2_B[index0][_gateind16] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_0_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_0_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_0_3' Backwards messages.
				CPTQuality_1_1_0_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind17 = 0; _gateind17<1; _gateind17++) {
					CPTQuality_1_1_0_3_B[index0][_gateind17] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_0_3_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_0_3_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_0_3_1__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_1_1_0_3_1_' from Bernoulli factor
				CPTQuality_1_1_0_3_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_1_1_0_3' from Copy factor
				CPTQuality_1_1_0_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_0_3_B[index0][0], CPTQuality_1_1_0_3_1__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_1_1_0_2_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_0_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_0_2_1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_1_0__0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_1_' Backwards messages.
				CPTQuality_0_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind19 = 0; _gateind19<1; _gateind19++) {
					CPTQuality_0_0_1__B[index0][_gateind19] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_1_2' Backwards messages.
				CPTQuality_0_0_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind20 = 0; _gateind20<1; _gateind20++) {
					CPTQuality_0_0_1_2_B[index0][_gateind20] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_0_1_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_0_1_3' Backwards messages.
				CPTQuality_0_0_1_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind21 = 0; _gateind21<1; _gateind21++) {
					CPTQuality_0_0_1_3_B[index0][_gateind21] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_0_1_3_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_1_3_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_1_3_0__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_0_0_1_3_0_' from Bernoulli factor
				CPTQuality_0_0_1_3_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_0_0_1_3' from Copy factor
				CPTQuality_0_0_1_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_1_3_B[index0][0], CPTQuality_0_0_1_3_0__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_0_0_1_2_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_1_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_1_2_0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_0_1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_0_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_0_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_1_' Backwards messages.
				CPTQuality_1_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind22 = 0; _gateind22<1; _gateind22++) {
					CPTQuality_1_0_1__B[index0][_gateind22] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_1_2' Backwards messages.
				CPTQuality_1_0_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind23 = 0; _gateind23<1; _gateind23++) {
					CPTQuality_1_0_1_2_B[index0][_gateind23] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_0_1_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_0_1_3' Backwards messages.
				CPTQuality_1_0_1_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind24 = 0; _gateind24<1; _gateind24++) {
					CPTQuality_1_0_1_3_B[index0][_gateind24] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_0_1_3_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_1_3_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_1_3_1__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_1_0_1_3_1_' from Bernoulli factor
				CPTQuality_1_0_1_3_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_1_0_1_3' from Copy factor
				CPTQuality_1_0_1_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_1_3_B[index0][0], CPTQuality_1_0_1_3_1__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_1_0_1_2_0__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_1_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_1_2_0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_0_1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_0_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_0_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_1_' Backwards messages.
				CPTQuality_0_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind25 = 0; _gateind25<1; _gateind25++) {
					CPTQuality_0_1_1__B[index0][_gateind25] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_1_2' Backwards messages.
				CPTQuality_0_1_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind26 = 0; _gateind26<1; _gateind26++) {
					CPTQuality_0_1_1_2_B[index0][_gateind26] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_0_1_1_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_0_1_1_3' Backwards messages.
				CPTQuality_0_1_1_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind27 = 0; _gateind27<1; _gateind27++) {
					CPTQuality_0_1_1_3_B[index0][_gateind27] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_0_1_1_3_0__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_1_3_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_1_3_0__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_0_1_1_3_0_' from Bernoulli factor
				CPTQuality_0_1_1_3_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_0_1_1_3' from Copy factor
				CPTQuality_0_1_1_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_1_3_B[index0][0], CPTQuality_0_1_1_3_0__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_0_1_1_2_1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_1_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_1_2_1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_0_1_1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_0_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_0_1_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_1_' Backwards messages.
				CPTQuality_1_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind28 = 0; _gateind28<1; _gateind28++) {
					CPTQuality_1_1_1__B[index0][_gateind28] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_1_2' Backwards messages.
				CPTQuality_1_1_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind29 = 0; _gateind29<1; _gateind29++) {
					CPTQuality_1_1_1_2_B[index0][_gateind29] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_1_3_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_1_1_1_3_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTQuality_1_1_1_3' Backwards messages.
				CPTQuality_1_1_1_3_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind30 = 0; _gateind30<1; _gateind30++) {
					CPTQuality_1_1_1_3_B[index0][_gateind30] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTQuality_1_1_1_3_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_1_3_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_1_3_1__B[index0] = Beta.Uniform();
				// Message to 'CPTQuality_1_1_1_3_1_' from Bernoulli factor
				CPTQuality_1_1_1_3_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.quality[index0]);
				// Message to 'CPTQuality_1_1_1_3' from Copy factor
				CPTQuality_1_1_1_3_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_1_3_B[index0][0], CPTQuality_1_1_1_3_1__B[index0]);
			}
			// Create array for replicates of 'CPTQuality_1_1_1_2_1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_1_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_1_2_1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTQuality_1_1_1__1__B'
			DistributionStructArray<Beta,double> CPTQuality_1_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTQuality_1_1_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'vbool26_B'
			DistributionStructArray<Bernoulli,bool> vbool26_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				vbool26_B[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Bernoulli,bool> Toner_use_B;
			// Create array for 'Toner_use' Backwards messages.
			Toner_use_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				Toner_use_B[index0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_4_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Paper_index0_4_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4' Backwards messages.
				Paper_index0_4_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _gateind31 = 0; _gateind31<2; _gateind31++) {
					Paper_index0_4_B[index0][_gateind31] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_0_0_' Backwards messages.
				CPTWrinkled_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind32 = 0; _gateind32<1; _gateind32++) {
					CPTWrinkled_0_0__B[index0][_gateind32] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_0_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_0_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_0_0_2' Backwards messages.
				CPTWrinkled_0_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind33 = 0; _gateind33<1; _gateind33++) {
					CPTWrinkled_0_0_2_B[index0][_gateind33] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_0_0_2_0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_0_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_0_0_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTWrinkled_0_0_2_0_' from Bernoulli factor
				CPTWrinkled_0_0_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
				// Message to 'CPTWrinkled_0_0_2' from Copy factor
				CPTWrinkled_0_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_0_0_2_B[index0][0], CPTWrinkled_0_0_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTWrinkled_0_0__0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_0_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTWrinkled_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_1_0_' Backwards messages.
				CPTWrinkled_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind34 = 0; _gateind34<1; _gateind34++) {
					CPTWrinkled_1_0__B[index0][_gateind34] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_1_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_1_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_1_0_2' Backwards messages.
				CPTWrinkled_1_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind35 = 0; _gateind35<1; _gateind35++) {
					CPTWrinkled_1_0_2_B[index0][_gateind35] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_1_0_2_1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_0_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_1_0_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTWrinkled_1_0_2_1_' from Bernoulli factor
				CPTWrinkled_1_0_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
				// Message to 'CPTWrinkled_1_0_2' from Copy factor
				CPTWrinkled_1_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_1_0_2_B[index0][0], CPTWrinkled_1_0_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTWrinkled_1_0__0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_1_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTWrinkled_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_0_1_' Backwards messages.
				CPTWrinkled_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind36 = 0; _gateind36<1; _gateind36++) {
					CPTWrinkled_0_1__B[index0][_gateind36] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_0_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_0_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_0_1_2' Backwards messages.
				CPTWrinkled_0_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind37 = 0; _gateind37<1; _gateind37++) {
					CPTWrinkled_0_1_2_B[index0][_gateind37] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_0_1_2_0__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_1_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_0_1_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTWrinkled_0_1_2_0_' from Bernoulli factor
				CPTWrinkled_0_1_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
				// Message to 'CPTWrinkled_0_1_2' from Copy factor
				CPTWrinkled_0_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_0_1_2_B[index0][0], CPTWrinkled_0_1_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTWrinkled_0_1__1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_0_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_0_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTWrinkled_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_1_1_' Backwards messages.
				CPTWrinkled_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind38 = 0; _gateind38<1; _gateind38++) {
					CPTWrinkled_1_1__B[index0][_gateind38] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_1_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_1_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTWrinkled_1_1_2' Backwards messages.
				CPTWrinkled_1_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind39 = 0; _gateind39<1; _gateind39++) {
					CPTWrinkled_1_1_2_B[index0][_gateind39] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTWrinkled_1_1_2_1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_1_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_1_1_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTWrinkled_1_1_2_1_' from Bernoulli factor
				CPTWrinkled_1_1_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.wrinkled[index0]);
				// Message to 'CPTWrinkled_1_1_2' from Copy factor
				CPTWrinkled_1_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_1_1_2_B[index0][0], CPTWrinkled_1_1_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTWrinkled_1_1__1__B'
			DistributionStructArray<Beta,double> CPTWrinkled_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTWrinkled_1_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTMultPages_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_0_0_' Backwards messages.
				CPTMultPages_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind41 = 0; _gateind41<1; _gateind41++) {
					CPTMultPages_0_0__B[index0][_gateind41] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_0_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_0_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_0_0_2' Backwards messages.
				CPTMultPages_0_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind42 = 0; _gateind42<1; _gateind42++) {
					CPTMultPages_0_0_2_B[index0][_gateind42] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_0_0_2_0__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_0_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_0_0_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTMultPages_0_0_2_0_' from Bernoulli factor
				CPTMultPages_0_0_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
				// Message to 'CPTMultPages_0_0_2' from Copy factor
				CPTMultPages_0_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_0_0_2_B[index0][0], CPTMultPages_0_0_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTMultPages_0_0__0__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_0_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTMultPages_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_1_0_' Backwards messages.
				CPTMultPages_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind43 = 0; _gateind43<1; _gateind43++) {
					CPTMultPages_1_0__B[index0][_gateind43] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_1_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_1_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_1_0_2' Backwards messages.
				CPTMultPages_1_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind44 = 0; _gateind44<1; _gateind44++) {
					CPTMultPages_1_0_2_B[index0][_gateind44] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_1_0_2_1__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_0_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_1_0_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTMultPages_1_0_2_1_' from Bernoulli factor
				CPTMultPages_1_0_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
				// Message to 'CPTMultPages_1_0_2' from Copy factor
				CPTMultPages_1_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_1_0_2_B[index0][0], CPTMultPages_1_0_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTMultPages_1_0__0__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_1_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTMultPages_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_0_1_' Backwards messages.
				CPTMultPages_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind45 = 0; _gateind45<1; _gateind45++) {
					CPTMultPages_0_1__B[index0][_gateind45] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_0_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_0_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_0_1_2' Backwards messages.
				CPTMultPages_0_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind46 = 0; _gateind46<1; _gateind46++) {
					CPTMultPages_0_1_2_B[index0][_gateind46] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_0_1_2_0__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_1_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_0_1_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTMultPages_0_1_2_0_' from Bernoulli factor
				CPTMultPages_0_1_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
				// Message to 'CPTMultPages_0_1_2' from Copy factor
				CPTMultPages_0_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_0_1_2_B[index0][0], CPTMultPages_0_1_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTMultPages_0_1__1__B'
			DistributionStructArray<Beta,double> CPTMultPages_0_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_0_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTMultPages_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_1_1_' Backwards messages.
				CPTMultPages_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind47 = 0; _gateind47<1; _gateind47++) {
					CPTMultPages_1_1__B[index0][_gateind47] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_1_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_1_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTMultPages_1_1_2' Backwards messages.
				CPTMultPages_1_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind48 = 0; _gateind48<1; _gateind48++) {
					CPTMultPages_1_1_2_B[index0][_gateind48] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTMultPages_1_1_2_1__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_1_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_1_1_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTMultPages_1_1_2_1_' from Bernoulli factor
				CPTMultPages_1_1_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.multPages[index0]);
				// Message to 'CPTMultPages_1_1_2' from Copy factor
				CPTMultPages_1_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_1_1_2_B[index0][0], CPTMultPages_1_1_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTMultPages_1_1__1__B'
			DistributionStructArray<Beta,double> CPTMultPages_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTMultPages_1_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'Roller_index0_2_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Roller_index0_2_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2' Backwards messages.
				Roller_index0_2_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _gateind49 = 0; _gateind49<2; _gateind49++) {
					Roller_index0_2_B[index0][_gateind49] = Bernoulli.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_0_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_0_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_0_0_' Backwards messages.
				CPTPaperJam_0_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind50 = 0; _gateind50<1; _gateind50++) {
					CPTPaperJam_0_0__B[index0][_gateind50] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_0_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_0_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_0_0_2' Backwards messages.
				CPTPaperJam_0_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind51 = 0; _gateind51<1; _gateind51++) {
					CPTPaperJam_0_0_2_B[index0][_gateind51] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_0_0_2_0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_0_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_0_0_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTPaperJam_0_0_2_0_' from Bernoulli factor
				CPTPaperJam_0_0_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
				// Message to 'CPTPaperJam_0_0_2' from Copy factor
				CPTPaperJam_0_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_0_0_2_B[index0][0], CPTPaperJam_0_0_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTPaperJam_0_0__0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_0_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTPaperJam_1_0__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_1_0__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_1_0_' Backwards messages.
				CPTPaperJam_1_0__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind52 = 0; _gateind52<1; _gateind52++) {
					CPTPaperJam_1_0__B[index0][_gateind52] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_1_0_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_1_0_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_1_0_2' Backwards messages.
				CPTPaperJam_1_0_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind53 = 0; _gateind53<1; _gateind53++) {
					CPTPaperJam_1_0_2_B[index0][_gateind53] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_1_0_2_1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_0_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_1_0_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTPaperJam_1_0_2_1_' from Bernoulli factor
				CPTPaperJam_1_0_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
				// Message to 'CPTPaperJam_1_0_2' from Copy factor
				CPTPaperJam_1_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_1_0_2_B[index0][0], CPTPaperJam_1_0_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTPaperJam_1_0__0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_0__0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_1_0__0__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTPaperJam_0_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_0_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_0_1_' Backwards messages.
				CPTPaperJam_0_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind54 = 0; _gateind54<1; _gateind54++) {
					CPTPaperJam_0_1__B[index0][_gateind54] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_0_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_0_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_0_1_2' Backwards messages.
				CPTPaperJam_0_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind55 = 0; _gateind55<1; _gateind55++) {
					CPTPaperJam_0_1_2_B[index0][_gateind55] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_0_1_2_0__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_1_2_0__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_0_1_2_0__B[index0] = Beta.Uniform();
				// Message to 'CPTPaperJam_0_1_2_0_' from Bernoulli factor
				CPTPaperJam_0_1_2_0__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
				// Message to 'CPTPaperJam_0_1_2' from Copy factor
				CPTPaperJam_0_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_0_1_2_B[index0][0], CPTPaperJam_0_1_2_0__B[index0]);
			}
			// Create array for replicates of 'CPTPaperJam_0_1__1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_0_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_0_1__1__B[index0] = Beta.Uniform();
			}
			// Create array for replicates of 'CPTPaperJam_1_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_1_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_1_1_' Backwards messages.
				CPTPaperJam_1_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind56 = 0; _gateind56<1; _gateind56++) {
					CPTPaperJam_1_1__B[index0][_gateind56] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_1_1_2_B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_1_1_2_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTPaperJam_1_1_2' Backwards messages.
				CPTPaperJam_1_1_2_B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind57 = 0; _gateind57<1; _gateind57++) {
					CPTPaperJam_1_1_2_B[index0][_gateind57] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTPaperJam_1_1_2_1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_1_2_1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_1_1_2_1__B[index0] = Beta.Uniform();
				// Message to 'CPTPaperJam_1_1_2_1_' from Bernoulli factor
				CPTPaperJam_1_1_2_1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.paperJam[index0]);
				// Message to 'CPTPaperJam_1_1_2' from Copy factor
				CPTPaperJam_1_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_1_1_2_B[index0][0], CPTPaperJam_1_1_2_1__B[index0]);
			}
			// Create array for replicates of 'CPTPaperJam_1_1__1__B'
			DistributionStructArray<Beta,double> CPTPaperJam_1_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTPaperJam_1_1__1__B[index0] = Beta.Uniform();
			}
			DistributionStructArray<Bernoulli,bool> Roller_use_B;
			// Create array for 'Roller_use' Backwards messages.
			Roller_use_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				Roller_use_B[index0] = Bernoulli.Uniform();
			}
			DistributionStructArray<Beta,double> Probroller_rep_B;
			// Create array for 'Probroller_rep' Backwards messages.
			Probroller_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				Probroller_rep_B[index0] = Beta.Uniform();
			}
			Beta Probroller_rep_B_toDef;
			// Message to 'Probroller_rep' from Replicate factor
			Probroller_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probRollerPrior);
			Beta Probroller_rep_F_marginal;
			// Message to 'Probroller_rep' from Replicate factor
			Probroller_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.probRollerPrior);
			// Create array for replicates of 'CPTBurning_1__B'
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTBurning_1__B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'CPTBurning_1_' Backwards messages.
				CPTBurning_1__B[index0] = new DistributionStructArray<Beta,double>(1);
				for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
					CPTBurning_1__B[index0][_gateind2] = Beta.Uniform();
				}
			}
			// Create array for replicates of 'CPTBurning_1__1__B'
			DistributionStructArray<Beta,double> CPTBurning_1__1__B = new DistributionStructArray<Beta,double>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				CPTBurning_1__1__B[index0] = Beta.Uniform();
				// Message to 'CPTBurning_1__1_' from Bernoulli factor
				CPTBurning_1__1__B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.burning[index0]);
				// Message to 'CPTBurning_1_' from Copy factor
				CPTBurning_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTBurning_1__B[index0][0], CPTBurning_1__1__B[index0]);
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'CPTMultPages_item1_rep2' from Replicate factor
				this.CPTMultPages_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item1_rep2_B_toDef, this.CPTMultPages_F[1][1], this.CPTMultPages_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTMultPages_item1_rep2' from Replicate factor
					this.CPTMultPages_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item1_rep2_B[index0], this.CPTMultPages_item1_rep2_F_marginal, index0, this.CPTMultPages_item1_rep2_F[index0]);
				}
				// Message to 'CPTMultPages_item1_rep' from Replicate factor
				this.CPTMultPages_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item1_rep_B_toDef, this.CPTMultPages_F[1][0], this.CPTMultPages_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTMultPages_item1_rep' from Replicate factor
					this.CPTMultPages_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item1_rep_B[index0], this.CPTMultPages_item1_rep_F_marginal, index0, this.CPTMultPages_item1_rep_F[index0]);
				}
				// Message to 'CPTMultPages_item0_rep2' from Replicate factor
				this.CPTMultPages_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item0_rep2_B_toDef, this.CPTMultPages_F[0][1], this.CPTMultPages_item0_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTMultPages_item0_rep2' from Replicate factor
					this.CPTMultPages_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item0_rep2_B[index0], this.CPTMultPages_item0_rep2_F_marginal, index0, this.CPTMultPages_item0_rep2_F[index0]);
				}
				// Message to 'CPTMultPages_item0_rep' from Replicate factor
				this.CPTMultPages_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item0_rep_B_toDef, this.CPTMultPages_F[0][0], this.CPTMultPages_item0_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTMultPages_item0_rep' from Replicate factor
					this.CPTMultPages_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item0_rep_B[index0], this.CPTMultPages_item0_rep_F_marginal, index0, this.CPTMultPages_item0_rep_F[index0]);
					// Message to 'Roller_index0__1__selector_cases_1_uses' from Bernoulli factor
					this.Roller_index0__1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item1_rep2_F[index0]));
					// Message to 'Roller_index0__1__selector_cases_1' from Replicate factor
					this.Roller_index0__1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__1__selector_cases_1_uses_B[index0], this.Roller_index0__1__selector_cases_1_B[index0]);
					// Message to 'Roller_index0__1__selector_cases' from Copy factor
					this.Roller_index0__1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__1__selector_cases_B[index0][1], this.Roller_index0__1__selector_cases_1_B[index0]);
					// Message to 'Roller_index0__1__selector_cases_0_uses' from Bernoulli factor
					this.Roller_index0__1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item0_rep2_F[index0]));
					// Message to 'Roller_index0__1__selector_cases_0' from Replicate factor
					this.Roller_index0__1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__1__selector_cases_0_uses_B[index0], this.Roller_index0__1__selector_cases_0_B[index0]);
					// Message to 'Roller_index0__1__selector_cases' from Copy factor
					this.Roller_index0__1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__1__selector_cases_B[index0][0], this.Roller_index0__1__selector_cases_0_B[index0]);
					// Message to 'Roller_index0__1__selector_uses' from Cases factor
					this.Roller_index0__1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0__1__selector_cases_B[index0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0], this.Roller_index0__1__selector_uses_B_toDef[index0]);
					// Message to 'Roller_index0__0__selector_cases_1_uses' from Bernoulli factor
					this.Roller_index0__0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item1_rep_F[index0]));
					// Message to 'Roller_index0__0__selector_cases_1' from Replicate factor
					this.Roller_index0__0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__0__selector_cases_1_uses_B[index0], this.Roller_index0__0__selector_cases_1_B[index0]);
					// Message to 'Roller_index0__0__selector_cases' from Copy factor
					this.Roller_index0__0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__0__selector_cases_B[index0][1], this.Roller_index0__0__selector_cases_1_B[index0]);
					// Message to 'Roller_index0__0__selector_cases_0_uses' from Bernoulli factor
					this.Roller_index0__0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item0_rep_F[index0]));
					// Message to 'Roller_index0__0__selector_cases_0' from Replicate factor
					this.Roller_index0__0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__0__selector_cases_0_uses_B[index0], this.Roller_index0__0__selector_cases_0_B[index0]);
					// Message to 'Roller_index0__0__selector_cases' from Copy factor
					this.Roller_index0__0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__0__selector_cases_B[index0][0], this.Roller_index0__0__selector_cases_0_B[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Cases factor
					this.Roller_index0__0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0__0__selector_cases_B[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0], this.Roller_index0__0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0__selector_cases_1_uses' from Cases factor
					this.Paper_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0__1__selector_cases_B[index0], this.Roller_index0__1__selector_uses_F[index0][0]));
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__1__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0], 0, this.Roller_index0__1__selector_uses_F[index0][0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][2], this.Roller_index0__1__selector_uses_F_marginal[index0], 2, this.Roller_index0__1__selector_uses_F[index0][2]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][1], this.Roller_index0__1__selector_uses_F_marginal[index0], 1, this.Roller_index0__1__selector_uses_F[index0][1]);
					// Message to 'Paper_index0__selector_cases_1_uses' from Replicate factor
					this.Paper_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0], this.Roller_uses_F[index0][0], this.Roller_index0__1__selector_uses_F[index0]));
					// Message to 'Paper_index0__selector_cases_1' from Replicate factor
					this.Paper_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0__selector_cases_1_uses_B[index0], this.Paper_index0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0__selector_cases' from Copy factor
					this.Paper_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__selector_cases_B[index0][1], this.Paper_index0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0__selector_cases_0_uses' from Cases factor
					this.Paper_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0__0__selector_cases_B[index0], this.Roller_index0__0__selector_uses_F[index0][0]));
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__0__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0], 0, this.Roller_index0__0__selector_uses_F[index0][0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][2], this.Roller_index0__0__selector_uses_F_marginal[index0], 2, this.Roller_index0__0__selector_uses_F[index0][2]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][1], this.Roller_index0__0__selector_uses_F_marginal[index0], 1, this.Roller_index0__0__selector_uses_F[index0][1]);
					// Message to 'Paper_index0__selector_cases_0_uses' from Replicate factor
					this.Paper_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0], this.Roller_uses_F[index0][0], this.Roller_index0__0__selector_uses_F[index0]));
					// Message to 'Paper_index0__selector_cases_0' from Replicate factor
					this.Paper_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0__selector_cases_0_uses_B[index0], this.Paper_index0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0__selector_cases' from Copy factor
					this.Paper_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__selector_cases_B[index0][0], this.Paper_index0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0__selector_uses' from Cases factor
					this.Paper_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0__selector_cases_B[index0]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0__selector_uses_B[index0], this.Paper_index0__selector_uses_B_toDef[index0]);
				}
				// Message to 'CPTWrinkled_item1_rep' from Replicate factor
				this.CPTWrinkled_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item1_rep_B_toDef, this.CPTWrinkled_F[1][0], this.CPTWrinkled_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_item1_rep' from Replicate factor
					this.CPTWrinkled_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item1_rep_B[index0], this.CPTWrinkled_item1_rep_F_marginal, index0, this.CPTWrinkled_item1_rep_F[index0]);
					// Message to 'Paper_index0_4_0__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_4_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item1_rep_F[index0]));
					// Message to 'Paper_index0_4_0__selector_cases_1' from Replicate factor
					this.Paper_index0_4_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_cases_1_uses_B[index0], this.Paper_index0_4_0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_4_0__selector_cases' from Copy factor
					this.Paper_index0_4_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_0__selector_cases_B[index0][1], this.Paper_index0_4_0__selector_cases_1_B[index0]);
				}
				// Message to 'CPTWrinkled_item0_rep' from Replicate factor
				this.CPTWrinkled_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item0_rep_B_toDef, this.CPTWrinkled_F[0][0], this.CPTWrinkled_item0_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_item0_rep' from Replicate factor
					this.CPTWrinkled_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item0_rep_B[index0], this.CPTWrinkled_item0_rep_F_marginal, index0, this.CPTWrinkled_item0_rep_F[index0]);
					// Message to 'Paper_index0_4_0__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_4_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item0_rep_F[index0]));
					// Message to 'Paper_index0_4_0__selector_cases_0' from Replicate factor
					this.Paper_index0_4_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_cases_0_uses_B[index0], this.Paper_index0_4_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_4_0__selector_cases' from Copy factor
					this.Paper_index0_4_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_0__selector_cases_B[index0][0], this.Paper_index0_4_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_4_0__selector_uses' from Cases factor
					this.Paper_index0_4_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_4_0__selector_cases_B[index0]);
					// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
					this.Paper_index0_4_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0], this.Paper_index0_4_0__selector_uses_B_toDef[index0]);
				}
				// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
				this.CPTWrinkled_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item1_rep2_B_toDef, this.CPTWrinkled_F[1][1], this.CPTWrinkled_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
					this.CPTWrinkled_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item1_rep2_B[index0], this.CPTWrinkled_item1_rep2_F_marginal, index0, this.CPTWrinkled_item1_rep2_F[index0]);
					// Message to 'Paper_index0_4_1__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_4_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item1_rep2_F[index0]));
					// Message to 'Paper_index0_4_1__selector_cases_1' from Replicate factor
					this.Paper_index0_4_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_cases_1_uses_B[index0], this.Paper_index0_4_1__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_4_1__selector_cases' from Copy factor
					this.Paper_index0_4_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_1__selector_cases_B[index0][1], this.Paper_index0_4_1__selector_cases_1_B[index0]);
				}
				// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
				this.CPTWrinkled_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item0_rep2_B_toDef, this.CPTWrinkled_F[0][1], this.CPTWrinkled_item0_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
					this.CPTWrinkled_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item0_rep2_B[index0], this.CPTWrinkled_item0_rep2_F_marginal, index0, this.CPTWrinkled_item0_rep2_F[index0]);
					// Message to 'Paper_index0_4_1__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_4_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item0_rep2_F[index0]));
					// Message to 'Paper_index0_4_1__selector_cases_0' from Replicate factor
					this.Paper_index0_4_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_cases_0_uses_B[index0], this.Paper_index0_4_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_4_1__selector_cases' from Copy factor
					this.Paper_index0_4_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_1__selector_cases_B[index0][0], this.Paper_index0_4_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_4_1__selector_uses' from Cases factor
					this.Paper_index0_4_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_4_1__selector_cases_B[index0]);
					// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
					this.Paper_index0_4_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0], this.Paper_index0_4_1__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0_4' from Copy factor
					Paper_index0_4_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(Paper_index0_4_B[index0][1], this.Paper_index0_4_1__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0_4' from Copy factor
					Paper_index0_4_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(Paper_index0_4_B[index0][0], this.Paper_index0_4_0__selector_uses_B_toDef[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][3], this.Fuse_index0__selector_uses_F_marginal[index0], 3, Fuse_index0__selector_uses_F[index0][3]);
					// Message to 'Paper_uses' from EnterPartial factor
					this.Paper_uses_B[index0][1] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(Paper_index0_4_B[index0], Fuse_index0__selector_uses_F[index0][3], this.Paper_uses_F[index0][1], new int[2] {0, 1}, this.Paper_uses_B[index0][1]);
				}
				// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
				this.CPTQuality_item1_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item1_rep2_B_toDef, this.CPTQuality_F[1][1][1], this.CPTQuality_item1_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
					this.CPTQuality_item1_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item1_rep2_B[index0], this.CPTQuality_item1_item1_rep2_F_marginal, index0, this.CPTQuality_item1_item1_rep2_F[index0]);
					// Message to 'Paper_index0_3_1__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_3_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep2_F[index0]));
					// Message to 'Paper_index0_3_1__selector_cases_1' from Replicate factor
					this.Paper_index0_3_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_cases_1_uses_B[index0], this.Paper_index0_3_1__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_3_1__selector_cases' from Copy factor
					this.Paper_index0_3_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_1__selector_cases_B[index0][1], this.Paper_index0_3_1__selector_cases_1_B[index0]);
				}
				// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
				this.CPTQuality_item0_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item1_rep2_B_toDef, this.CPTQuality_F[0][1][1], this.CPTQuality_item0_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
					this.CPTQuality_item0_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item1_rep2_B[index0], this.CPTQuality_item0_item1_rep2_F_marginal, index0, this.CPTQuality_item0_item1_rep2_F[index0]);
					// Message to 'Paper_index0_3_1__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_3_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep2_F[index0]));
					// Message to 'Paper_index0_3_1__selector_cases_0' from Replicate factor
					this.Paper_index0_3_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_cases_0_uses_B[index0], this.Paper_index0_3_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_3_1__selector_cases' from Copy factor
					this.Paper_index0_3_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_1__selector_cases_B[index0][0], this.Paper_index0_3_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_3_1__selector_uses' from Cases factor
					this.Paper_index0_3_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_3_1__selector_cases_B[index0]);
					// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
					this.Paper_index0_3_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0], this.Paper_index0_3_1__selector_uses_B_toDef[index0]);
				}
				// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
				this.CPTQuality_item1_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item0_rep_B_toDef, this.CPTQuality_F[1][0][0], this.CPTQuality_item1_item0_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
					this.CPTQuality_item1_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item0_rep_B[index0], this.CPTQuality_item1_item0_rep_F_marginal, index0, this.CPTQuality_item1_item0_rep_F[index0]);
					// Message to 'Paper_index0_2_0__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep_F[index0]));
					// Message to 'Paper_index0_2_0__selector_cases_1' from Replicate factor
					this.Paper_index0_2_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_cases_1_uses_B[index0], this.Paper_index0_2_0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_2_0__selector_cases' from Copy factor
					this.Paper_index0_2_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_0__selector_cases_B[index0][1], this.Paper_index0_2_0__selector_cases_1_B[index0]);
				}
				// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
				this.CPTQuality_item0_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item0_rep_B_toDef, this.CPTQuality_F[0][0][0], this.CPTQuality_item0_item0_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
					this.CPTQuality_item0_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item0_rep_B[index0], this.CPTQuality_item0_item0_rep_F_marginal, index0, this.CPTQuality_item0_item0_rep_F[index0]);
					// Message to 'Paper_index0_2_0__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep_F[index0]));
					// Message to 'Paper_index0_2_0__selector_cases_0' from Replicate factor
					this.Paper_index0_2_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_cases_0_uses_B[index0], this.Paper_index0_2_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_2_0__selector_cases' from Copy factor
					this.Paper_index0_2_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_0__selector_cases_B[index0][0], this.Paper_index0_2_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_2_0__selector_uses' from Cases factor
					this.Paper_index0_2_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_2_0__selector_cases_B[index0]);
					// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
					this.Paper_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0], this.Paper_index0_2_0__selector_uses_B_toDef[index0]);
				}
				// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
				this.CPTQuality_item1_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item1_rep_B_toDef, this.CPTQuality_F[1][1][0], this.CPTQuality_item1_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
					this.CPTQuality_item1_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item1_rep_B[index0], this.CPTQuality_item1_item1_rep_F_marginal, index0, this.CPTQuality_item1_item1_rep_F[index0]);
					// Message to 'Paper_index0_2_1__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep_F[index0]));
					// Message to 'Paper_index0_2_1__selector_cases_1' from Replicate factor
					this.Paper_index0_2_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_cases_1_uses_B[index0], this.Paper_index0_2_1__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_2_1__selector_cases' from Copy factor
					this.Paper_index0_2_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_1__selector_cases_B[index0][1], this.Paper_index0_2_1__selector_cases_1_B[index0]);
				}
				// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
				this.CPTQuality_item0_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item1_rep_B_toDef, this.CPTQuality_F[0][1][0], this.CPTQuality_item0_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
					this.CPTQuality_item0_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item1_rep_B[index0], this.CPTQuality_item0_item1_rep_F_marginal, index0, this.CPTQuality_item0_item1_rep_F[index0]);
					// Message to 'Paper_index0_2_1__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep_F[index0]));
					// Message to 'Paper_index0_2_1__selector_cases_0' from Replicate factor
					this.Paper_index0_2_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_cases_0_uses_B[index0], this.Paper_index0_2_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_2_1__selector_cases' from Copy factor
					this.Paper_index0_2_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_1__selector_cases_B[index0][0], this.Paper_index0_2_1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_2_1__selector_uses' from Cases factor
					this.Paper_index0_2_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_2_1__selector_cases_B[index0]);
					// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
					this.Paper_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0], this.Paper_index0_2_1__selector_uses_B_toDef[index0]);
				}
				// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
				this.CPTQuality_item1_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item0_rep2_B_toDef, this.CPTQuality_F[1][0][1], this.CPTQuality_item1_item0_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
					this.CPTQuality_item1_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item0_rep2_B[index0], this.CPTQuality_item1_item0_rep2_F_marginal, index0, this.CPTQuality_item1_item0_rep2_F[index0]);
					// Message to 'Paper_index0_3_0__selector_cases_1_uses' from Bernoulli factor
					this.Paper_index0_3_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep2_F[index0]));
					// Message to 'Paper_index0_3_0__selector_cases_1' from Replicate factor
					this.Paper_index0_3_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_cases_1_uses_B[index0], this.Paper_index0_3_0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_3_0__selector_cases' from Copy factor
					this.Paper_index0_3_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_0__selector_cases_B[index0][1], this.Paper_index0_3_0__selector_cases_1_B[index0]);
				}
				// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
				this.CPTQuality_item0_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item0_rep2_B_toDef, this.CPTQuality_F[0][0][1], this.CPTQuality_item0_item0_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
					this.CPTQuality_item0_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item0_rep2_B[index0], this.CPTQuality_item0_item0_rep2_F_marginal, index0, this.CPTQuality_item0_item0_rep2_F[index0]);
					// Message to 'Paper_index0_3_0__selector_cases_0_uses' from Bernoulli factor
					this.Paper_index0_3_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep2_F[index0]));
					// Message to 'Paper_index0_3_0__selector_cases_0' from Replicate factor
					this.Paper_index0_3_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_cases_0_uses_B[index0], this.Paper_index0_3_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_3_0__selector_cases' from Copy factor
					this.Paper_index0_3_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_0__selector_cases_B[index0][0], this.Paper_index0_3_0__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_3_0__selector_uses' from Cases factor
					this.Paper_index0_3_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_3_0__selector_cases_B[index0]);
					// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
					this.Paper_index0_3_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0], this.Paper_index0_3_0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0_3' from Copy factor
					this.Paper_index0_3_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_B[index0][1], this.Paper_index0_3_1__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0_3' from Copy factor
					this.Paper_index0_3_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_B[index0][0], this.Paper_index0_3_0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0__1_' from EnterPartial factor
					this.Paper_index0__1__B[index0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0_3_B[index0], this.vbool26__1__selector_uses_F[index0][1], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_index0__1__B[index0]);
					// Message to 'Paper_index0_' from Copy factor
					this.Paper_index0__B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__B[index0][1], this.Paper_index0__1__B[index0]);
					// Message to 'Paper_index0_2' from Copy factor
					this.Paper_index0_2_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_B[index0][1], this.Paper_index0_2_1__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0_2' from Copy factor
					this.Paper_index0_2_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_B[index0][0], this.Paper_index0_2_0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_index0__0_' from EnterPartial factor
					this.Paper_index0__0__B[index0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0_2_B[index0], this.vbool26__0__selector_uses_F[index0][1], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_index0__0__B[index0]);
					// Message to 'Paper_index0_' from Copy factor
					this.Paper_index0__B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__B[index0][0], this.Paper_index0__0__B[index0]);
					// Message to 'Paper_uses' from EnterPartial factor
					this.Paper_uses_B[index0][0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0__B[index0], this.Drum_index0__selector_uses_F[index0][2], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_uses_B[index0][0]);
					// Message to 'Paper_uses' from Copy factor
					this.Paper_uses_B[index0][2] = ArrayHelper.SetTo<Bernoulli>(this.Paper_uses_B[index0][2], this.Paper_index0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_uses' from Replicate factor
					this.Paper_uses_B_index0__toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_uses_B[index0], this.Paper_uses_B_index0__toDef[index0]);
					// Message to 'ProbPaper_rep' from Bernoulli factor
					this.ProbPaper_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Paper_uses_B_index0__toDef[index0], this.ProbPaper_rep_F[index0]);
				}
				// Message to 'ProbPaper_rep' from Replicate factor
				this.ProbPaper_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbPaper_rep_B, this.ProbPaper_rep_B_toDef);
				// Message to 'ProbPaper_rep' from Replicate factor
				this.ProbPaper_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbPaper_rep_B_toDef, this.probPaperPrior, this.ProbPaper_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'ProbPaper_rep' from Replicate factor
					this.ProbPaper_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbPaper_rep_B[index0], this.ProbPaper_rep_F_marginal, index0, this.ProbPaper_rep_F[index0]);
					// Message to 'Paper' from Bernoulli factor
					this.Paper_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbPaper_rep_F[index0]);
				}
				// Message to 'CPTBurning_rep2' from Replicate factor
				this.CPTBurning_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTBurning_rep2_B_toDef, this.CPTBurning_F[1], this.CPTBurning_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTBurning_rep2' from Replicate factor
					this.CPTBurning_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTBurning_rep2_B[index0], this.CPTBurning_rep2_F_marginal, index0, this.CPTBurning_rep2_F[index0]);
				}
				// Message to 'CPTBurning_rep' from Replicate factor
				this.CPTBurning_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTBurning_rep_B_toDef, this.CPTBurning_F[0], this.CPTBurning_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTBurning_rep' from Replicate factor
					this.CPTBurning_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTBurning_rep_B[index0], this.CPTBurning_rep_F_marginal, index0, this.CPTBurning_rep_F[index0]);
					// Message to 'Roller_index0_' from Copy factor
					this.Roller_index0__B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__B[index0][1], this.Roller_index0__1__selector_uses_B_toDef[index0]);
					// Message to 'Roller_index0_' from Copy factor
					this.Roller_index0__B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__B[index0][0], this.Roller_index0__0__selector_uses_B_toDef[index0]);
					// Message to 'Paper_uses' from Replicate factor
					this.Paper_uses_F_index0__marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_uses_B_index0__toDef[index0], this.Paper_F[index0], this.Paper_uses_F_index0__marginal[index0]);
					// Message to 'Paper_uses' from Replicate factor
					this.Paper_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B_toDef[index0], this.Paper_uses_F_index0__marginal[index0], 2, this.Paper_uses_F[index0][2]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][2], this.Paper_index0__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][1], this.Paper_index0__selector_uses_F_marginal[index0], 1, this.Paper_index0__selector_uses_F[index0][1]);
					// Message to 'Roller_uses' from EnterPartial factor
					this.Roller_uses_B[index0][0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Roller_index0__B[index0], this.Paper_index0__selector_uses_F[index0][1], this.Roller_uses_F[index0][0], new int[2] {0, 1}, this.Roller_uses_B[index0][0]);
					// Message to 'Roller_uses' from Replicate factor
					this.Roller_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.Roller_uses_B[index0], this.Roller_F[index0], 1, this.Roller_uses_F[index0][1]);
					// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
					this.Roller_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0_2_1__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_1__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
					this.Roller_index0_2_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][0], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 0, this.Roller_index0_2_1__selector_uses_F[index0][0]);
					// Message to 'Fuse_index0__selector_cases_1_uses' from Cases factor
					this.Fuse_index0__selector_cases_1_uses_B[index0][24] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0_2_1__selector_cases_B[index0], this.Roller_index0_2_1__selector_uses_F[index0][0]));
					// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
					this.Roller_index0_2_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][2], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 2, this.Roller_index0_2_1__selector_uses_F[index0][2]);
					// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
					this.Roller_index0_2_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][1], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 1, this.Roller_index0_2_1__selector_uses_F[index0][1]);
					// Message to 'Fuse_index0__selector_cases_1_uses' from Replicate factor
					this.Fuse_index0__selector_cases_1_uses_B[index0][23] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_1__selector_uses_F[index0]));
					// Message to 'Paper_uses' from Replicate factor
					this.Paper_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_uses_B[index0][1], this.Paper_uses_F_index0__marginal[index0], 1, this.Paper_uses_F[index0][1]);
					// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
					this.Paper_index0_4_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_4_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_1__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
					this.Paper_index0_4_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][0], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_4_1__selector_uses_F[index0][0]);
					// Message to 'Fuse_index0__selector_cases_1_uses' from Cases factor
					this.Fuse_index0__selector_cases_1_uses_B[index0][9] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_4_1__selector_cases_B[index0], this.Paper_index0_4_1__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
					this.Paper_index0_4_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][2], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_4_1__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
					this.Paper_index0_4_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][1], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_4_1__selector_uses_F[index0][1]);
					// Message to 'Fuse_index0__selector_cases_1_uses' from Replicate factor
					this.Fuse_index0__selector_cases_1_uses_B[index0][8] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_1__selector_uses_F[index0]));
					// Message to 'Fuse_index0__selector_cases_1_uses' from Bernoulli factor
					this.Fuse_index0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.burning[index0], this.CPTBurning_rep2_F[index0]));
					// Message to 'Fuse_index0__selector_cases_1' from Replicate factor
					this.Fuse_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Fuse_index0__selector_cases_1_uses_B[index0], this.Fuse_index0__selector_cases_1_B[index0]);
					// Message to 'Fuse_index0__selector_cases' from Copy factor
					this.Fuse_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Fuse_index0__selector_cases_B[index0][1], this.Fuse_index0__selector_cases_1_B[index0]);
					// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
					this.Roller_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0_2_0__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_0__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
					this.Roller_index0_2_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][0], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 0, this.Roller_index0_2_0__selector_uses_F[index0][0]);
					// Message to 'Fuse_index0__selector_cases_0_uses' from Cases factor
					this.Fuse_index0__selector_cases_0_uses_B[index0][24] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0_2_0__selector_cases_B[index0], this.Roller_index0_2_0__selector_uses_F[index0][0]));
					// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
					this.Roller_index0_2_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][2], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 2, this.Roller_index0_2_0__selector_uses_F[index0][2]);
					// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
					this.Roller_index0_2_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][1], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 1, this.Roller_index0_2_0__selector_uses_F[index0][1]);
					// Message to 'Fuse_index0__selector_cases_0_uses' from Replicate factor
					this.Fuse_index0__selector_cases_0_uses_B[index0][23] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_0__selector_uses_F[index0]));
					// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
					this.Paper_index0_4_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_4_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_0__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
					this.Paper_index0_4_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][0], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_4_0__selector_uses_F[index0][0]);
					// Message to 'Fuse_index0__selector_cases_0_uses' from Cases factor
					this.Fuse_index0__selector_cases_0_uses_B[index0][9] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_4_0__selector_cases_B[index0], this.Paper_index0_4_0__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
					this.Paper_index0_4_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][2], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_4_0__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
					this.Paper_index0_4_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][1], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_4_0__selector_uses_F[index0][1]);
					// Message to 'Fuse_index0__selector_cases_0_uses' from Replicate factor
					this.Fuse_index0__selector_cases_0_uses_B[index0][8] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_0__selector_uses_F[index0]));
					// Message to 'Fuse_index0__selector_cases_0_uses' from Bernoulli factor
					this.Fuse_index0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.burning[index0], this.CPTBurning_rep_F[index0]));
					// Message to 'Fuse_index0__selector_cases_0' from Replicate factor
					this.Fuse_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Fuse_index0__selector_cases_0_uses_B[index0], this.Fuse_index0__selector_cases_0_B[index0]);
					// Message to 'Fuse_index0__selector_cases' from Copy factor
					this.Fuse_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Fuse_index0__selector_cases_B[index0][0], this.Fuse_index0__selector_cases_0_B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Cases factor
					this.Fuse_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Fuse_index0__selector_cases_B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					this.Fuse_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Fuse_index0__selector_uses_B[index0], this.Fuse_index0__selector_uses_B_toDef[index0]);
					// Message to 'CPTPaperJam_1_1__1_' from EnterPartial factor
					CPTPaperJam_1_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_1_1_2_B[index0], this.Roller_index0_2_1__selector_uses_F[index0][2], this.CPTPaperJam_item1_rep2_F[index0], new int[1] {1}, CPTPaperJam_1_1__1__B[index0]);
					// Message to 'CPTPaperJam_1_1_' from Copy factor
					CPTPaperJam_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_1_1__B[index0][0], CPTPaperJam_1_1__1__B[index0]);
					// Message to 'CPTPaperJam_0_1__1_' from EnterPartial factor
					CPTPaperJam_0_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_0_1_2_B[index0], this.Roller_index0_2_1__selector_uses_F[index0][1], this.CPTPaperJam_item0_rep2_F[index0], new int[1] {0}, CPTPaperJam_0_1__1__B[index0]);
					// Message to 'CPTPaperJam_0_1_' from Copy factor
					CPTPaperJam_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_0_1__B[index0][0], CPTPaperJam_0_1__1__B[index0]);
					// Message to 'CPTPaperJam_1_0__0_' from EnterPartial factor
					CPTPaperJam_1_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_1_0_2_B[index0], this.Roller_index0_2_0__selector_uses_F[index0][2], this.CPTPaperJam_item1_rep_F[index0], new int[1] {1}, CPTPaperJam_1_0__0__B[index0]);
					// Message to 'CPTPaperJam_0_0__0_' from EnterPartial factor
					CPTPaperJam_0_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_0_0_2_B[index0], this.Roller_index0_2_0__selector_uses_F[index0][1], this.CPTPaperJam_item0_rep_F[index0], new int[1] {0}, CPTPaperJam_0_0__0__B[index0]);
					// Message to 'CPTPaperJam_0_0_' from Copy factor
					CPTPaperJam_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_0_0__B[index0][0], CPTPaperJam_0_0__0__B[index0]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][5], this.Paper_index0__selector_uses_F_marginal[index0], 5, this.Paper_index0__selector_uses_F[index0][5]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][4], this.Paper_index0__selector_uses_F_marginal[index0], 4, this.Paper_index0__selector_uses_F[index0][4]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][3], this.Paper_index0__selector_uses_F_marginal[index0], 3, this.Paper_index0__selector_uses_F[index0][3]);
					// Message to 'Paper_index0__selector_uses' from Replicate factor
					this.Paper_index0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][2], this.Paper_index0__selector_uses_F_marginal[index0], 2, this.Paper_index0__selector_uses_F[index0][2]);
					// Message to 'CPTWrinkled_1_1__1_' from EnterPartial factor
					CPTWrinkled_1_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_1_1_2_B[index0], this.Paper_index0_4_1__selector_uses_F[index0][2], this.CPTWrinkled_item1_rep2_F[index0], new int[1] {1}, CPTWrinkled_1_1__1__B[index0]);
					// Message to 'CPTWrinkled_0_1__1_' from EnterPartial factor
					CPTWrinkled_0_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_0_1_2_B[index0], this.Paper_index0_4_1__selector_uses_F[index0][1], this.CPTWrinkled_item0_rep2_F[index0], new int[1] {0}, CPTWrinkled_0_1__1__B[index0]);
					// Message to 'CPTWrinkled_1_0__0_' from EnterPartial factor
					CPTWrinkled_1_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_1_0_2_B[index0], this.Paper_index0_4_0__selector_uses_F[index0][2], this.CPTWrinkled_item1_rep_F[index0], new int[1] {1}, CPTWrinkled_1_0__0__B[index0]);
					// Message to 'CPTWrinkled_0_0__0_' from EnterPartial factor
					CPTWrinkled_0_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_0_0_2_B[index0], this.Paper_index0_4_0__selector_uses_F[index0][1], this.CPTWrinkled_item0_rep_F[index0], new int[1] {0}, CPTWrinkled_0_0__0__B[index0]);
					// Message to 'Paper_uses' from Replicate factor
					this.Paper_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_uses_B[index0][0], this.Paper_uses_F_index0__marginal[index0], 0, this.Paper_uses_F[index0][0]);
					// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
					this.Paper_index0_3_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_3_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_1__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
					this.Paper_index0_3_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][0], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_3_1__selector_uses_F[index0][0]);
					// Message to 'vbool26__1__selector_cases_1_uses' from Cases factor
					this.vbool26__1__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_3_1__selector_cases_B[index0], this.Paper_index0_3_1__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
					this.Paper_index0_3_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][2], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_3_1__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
					this.Paper_index0_3_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][1], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_3_1__selector_uses_F[index0][1]);
					// Message to 'vbool26__1__selector_cases_1_uses' from Replicate factor
					this.vbool26__1__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_1__selector_uses_F[index0]));
					// Message to 'vbool26__1__selector_cases_1' from Replicate factor
					this.vbool26__1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__1__selector_cases_1_uses_B[index0], this.vbool26__1__selector_cases_1_B[index0]);
					// Message to 'vbool26__1__selector_cases' from Copy factor
					this.vbool26__1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__1__selector_cases_B[index0][1], this.vbool26__1__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
					this.Paper_index0_3_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_3_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_0__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
					this.Paper_index0_3_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][0], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_3_0__selector_uses_F[index0][0]);
					// Message to 'vbool26__1__selector_cases_0_uses' from Cases factor
					this.vbool26__1__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_3_0__selector_cases_B[index0], this.Paper_index0_3_0__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
					this.Paper_index0_3_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][2], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_3_0__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
					this.Paper_index0_3_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][1], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_3_0__selector_uses_F[index0][1]);
					// Message to 'vbool26__1__selector_cases_0_uses' from Replicate factor
					this.vbool26__1__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_0__selector_uses_F[index0]));
					// Message to 'vbool26__1__selector_cases_0' from Replicate factor
					this.vbool26__1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__1__selector_cases_0_uses_B[index0], this.vbool26__1__selector_cases_0_B[index0]);
					// Message to 'vbool26__1__selector_cases' from Copy factor
					this.vbool26__1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__1__selector_cases_B[index0][0], this.vbool26__1__selector_cases_0_B[index0]);
					// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
					this.Paper_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_2_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_1__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
					this.Paper_index0_2_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][0], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_2_1__selector_uses_F[index0][0]);
					// Message to 'vbool26__0__selector_cases_1_uses' from Cases factor
					this.vbool26__0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_2_1__selector_cases_B[index0], this.Paper_index0_2_1__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
					this.Paper_index0_2_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][2], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_2_1__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
					this.Paper_index0_2_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][1], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_2_1__selector_uses_F[index0][1]);
					// Message to 'vbool26__0__selector_cases_1_uses' from Replicate factor
					this.vbool26__0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_1__selector_uses_F[index0]));
					// Message to 'vbool26__0__selector_cases_1' from Replicate factor
					this.vbool26__0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__0__selector_cases_1_uses_B[index0], this.vbool26__0__selector_cases_1_B[index0]);
					// Message to 'vbool26__0__selector_cases' from Copy factor
					this.vbool26__0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__0__selector_cases_B[index0][1], this.vbool26__0__selector_cases_1_B[index0]);
					// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
					this.Paper_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_2_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_0__selector_uses_F_marginal[index0]);
					// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
					this.Paper_index0_2_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][0], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_2_0__selector_uses_F[index0][0]);
					// Message to 'vbool26__0__selector_cases_0_uses' from Cases factor
					this.vbool26__0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_2_0__selector_cases_B[index0], this.Paper_index0_2_0__selector_uses_F[index0][0]));
					// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
					this.Paper_index0_2_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][2], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_2_0__selector_uses_F[index0][2]);
					// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
					this.Paper_index0_2_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][1], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_2_0__selector_uses_F[index0][1]);
					// Message to 'vbool26__0__selector_cases_0_uses' from Replicate factor
					this.vbool26__0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_0__selector_uses_F[index0]));
					// Message to 'vbool26__0__selector_cases_0' from Replicate factor
					this.vbool26__0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__0__selector_cases_0_uses_B[index0], this.vbool26__0__selector_cases_0_B[index0]);
					// Message to 'vbool26__0__selector_cases' from Copy factor
					this.vbool26__0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__0__selector_cases_B[index0][0], this.vbool26__0__selector_cases_0_B[index0]);
					// Message to 'ProbFuse_rep' from Bernoulli factor
					this.ProbFuse_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Fuse_index0__selector_uses_B_toDef[index0], this.ProbFuse_rep_F[index0]);
				}
				// Message to 'ProbFuse_rep' from Replicate factor
				this.ProbFuse_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbFuse_rep_B, this.ProbFuse_rep_B_toDef);
				// Message to 'ProbFuse_rep' from Replicate factor
				this.ProbFuse_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbFuse_rep_B_toDef, this.probFusePrior, this.ProbFuse_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'ProbFuse_rep' from Replicate factor
					this.ProbFuse_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbFuse_rep_B[index0], this.ProbFuse_rep_F_marginal, index0, this.ProbFuse_rep_F[index0]);
					// Message to 'Fuse' from Bernoulli factor
					this.Fuse_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbFuse_rep_F[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					this.Fuse_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Fuse_index0__selector_uses_B_toDef[index0], this.Fuse_F[index0], this.Fuse_index0__selector_uses_F_marginal[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][2], this.Fuse_index0__selector_uses_F_marginal[index0], 2, Fuse_index0__selector_uses_F[index0][2]);
					// Message to 'CPTBurning_rep2' from EnterPartial factor
					this.CPTBurning_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTBurning_1__B[index0], Fuse_index0__selector_uses_F[index0][2], this.CPTBurning_rep2_F[index0], new int[1] {1}, this.CPTBurning_rep2_B[index0]);
				}
				// Message to 'CPTBurning_rep2' from Replicate factor
				this.CPTBurning_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTBurning_rep2_B, this.CPTBurning_rep2_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][12] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][12], this.Fuse_index0__selector_uses_F_marginal[index0], 12, Fuse_index0__selector_uses_F[index0][12]);
					// Message to 'CPTPaperJam_item1_rep2' from EnterPartial factor
					this.CPTPaperJam_item1_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_1_1__B[index0], Fuse_index0__selector_uses_F[index0][12], this.CPTPaperJam_item1_rep2_F[index0], new int[1] {1}, this.CPTPaperJam_item1_rep2_B[index0]);
				}
				// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
				this.CPTPaperJam_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTPaperJam_item1_rep2_B, this.CPTPaperJam_item1_rep2_B_toDef);
				// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
				this.CPTPaperJam_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item1_rep2_B_toDef, this.CPTPaperJam_F[1][1], this.CPTPaperJam_item1_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][9] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][9], this.Fuse_index0__selector_uses_F_marginal[index0], 9, Fuse_index0__selector_uses_F[index0][9]);
					// Message to 'CPTPaperJam_item0_rep' from EnterPartial factor
					this.CPTPaperJam_item0_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_0_0__B[index0], Fuse_index0__selector_uses_F[index0][9], this.CPTPaperJam_item0_rep_F[index0], new int[1] {0}, this.CPTPaperJam_item0_rep_B[index0]);
				}
				// Message to 'CPTPaperJam_item0_rep' from Replicate factor
				this.CPTPaperJam_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTPaperJam_item0_rep_B, this.CPTPaperJam_item0_rep_B_toDef);
				// Message to 'CPTPaperJam_item0_rep' from Replicate factor
				this.CPTPaperJam_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item0_rep_B_toDef, this.CPTPaperJam_F[0][0], this.CPTPaperJam_item0_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTPaperJam_1_0_' from Copy factor
					CPTPaperJam_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_1_0__B[index0][0], CPTPaperJam_1_0__0__B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][10] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][10], this.Fuse_index0__selector_uses_F_marginal[index0], 10, Fuse_index0__selector_uses_F[index0][10]);
					// Message to 'CPTPaperJam_item1_rep' from EnterPartial factor
					this.CPTPaperJam_item1_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_1_0__B[index0], Fuse_index0__selector_uses_F[index0][10], this.CPTPaperJam_item1_rep_F[index0], new int[1] {0}, this.CPTPaperJam_item1_rep_B[index0]);
				}
				// Message to 'CPTPaperJam_item1_rep' from Replicate factor
				this.CPTPaperJam_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTPaperJam_item1_rep_B, this.CPTPaperJam_item1_rep_B_toDef);
				// Message to 'CPTPaperJam_item1_rep' from Replicate factor
				this.CPTPaperJam_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item1_rep_B_toDef, this.CPTPaperJam_F[1][0], this.CPTPaperJam_item1_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][11] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][11], this.Fuse_index0__selector_uses_F_marginal[index0], 11, Fuse_index0__selector_uses_F[index0][11]);
					// Message to 'CPTPaperJam_item0_rep2' from EnterPartial factor
					this.CPTPaperJam_item0_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTPaperJam_0_1__B[index0], Fuse_index0__selector_uses_F[index0][11], this.CPTPaperJam_item0_rep2_F[index0], new int[1] {1}, this.CPTPaperJam_item0_rep2_B[index0]);
				}
				// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
				this.CPTPaperJam_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTPaperJam_item0_rep2_B, this.CPTPaperJam_item0_rep2_B_toDef);
				// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
				this.CPTPaperJam_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item0_rep2_B_toDef, this.CPTPaperJam_F[0][1], this.CPTPaperJam_item0_rep2_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
					this.CPTPaperJam_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item1_rep2_B[index0], this.CPTPaperJam_item1_rep2_F_marginal, index0, this.CPTPaperJam_item1_rep2_F[index0]);
					// Message to 'Roller_index0_2_1__selector_cases_1_uses' from Bernoulli factor
					this.Roller_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item1_rep2_F[index0]));
					// Message to 'Roller_index0_2_1__selector_cases_1' from Replicate factor
					this.Roller_index0_2_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_cases_1_uses_B[index0], this.Roller_index0_2_1__selector_cases_1_B[index0]);
					// Message to 'Roller_index0_2_1__selector_cases' from Copy factor
					this.Roller_index0_2_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_1__selector_cases_B[index0][1], this.Roller_index0_2_1__selector_cases_1_B[index0]);
					// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
					this.CPTPaperJam_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item0_rep2_B[index0], this.CPTPaperJam_item0_rep2_F_marginal, index0, this.CPTPaperJam_item0_rep2_F[index0]);
					// Message to 'Roller_index0_2_1__selector_cases_0_uses' from Bernoulli factor
					this.Roller_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item0_rep2_F[index0]));
					// Message to 'Roller_index0_2_1__selector_cases_0' from Replicate factor
					this.Roller_index0_2_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_cases_0_uses_B[index0], this.Roller_index0_2_1__selector_cases_0_B[index0]);
					// Message to 'Roller_index0_2_1__selector_cases' from Copy factor
					this.Roller_index0_2_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_1__selector_cases_B[index0][0], this.Roller_index0_2_1__selector_cases_0_B[index0]);
					// Message to 'Roller_index0_2_1__selector_uses' from Cases factor
					this.Roller_index0_2_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0_2_1__selector_cases_B[index0]);
					// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
					this.Roller_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0], this.Roller_index0_2_1__selector_uses_B_toDef[index0]);
					// Message to 'Roller_index0_2' from Copy factor
					Roller_index0_2_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(Roller_index0_2_B[index0][1], this.Roller_index0_2_1__selector_uses_B_toDef[index0]);
					// Message to 'CPTPaperJam_item1_rep' from Replicate factor
					this.CPTPaperJam_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item1_rep_B[index0], this.CPTPaperJam_item1_rep_F_marginal, index0, this.CPTPaperJam_item1_rep_F[index0]);
					// Message to 'Roller_index0_2_0__selector_cases_1_uses' from Bernoulli factor
					this.Roller_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item1_rep_F[index0]));
					// Message to 'Roller_index0_2_0__selector_cases_1' from Replicate factor
					this.Roller_index0_2_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_cases_1_uses_B[index0], this.Roller_index0_2_0__selector_cases_1_B[index0]);
					// Message to 'Roller_index0_2_0__selector_cases' from Copy factor
					this.Roller_index0_2_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_0__selector_cases_B[index0][1], this.Roller_index0_2_0__selector_cases_1_B[index0]);
					// Message to 'CPTPaperJam_item0_rep' from Replicate factor
					this.CPTPaperJam_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item0_rep_B[index0], this.CPTPaperJam_item0_rep_F_marginal, index0, this.CPTPaperJam_item0_rep_F[index0]);
					// Message to 'Roller_index0_2_0__selector_cases_0_uses' from Bernoulli factor
					this.Roller_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item0_rep_F[index0]));
					// Message to 'Roller_index0_2_0__selector_cases_0' from Replicate factor
					this.Roller_index0_2_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_cases_0_uses_B[index0], this.Roller_index0_2_0__selector_cases_0_B[index0]);
					// Message to 'Roller_index0_2_0__selector_cases' from Copy factor
					this.Roller_index0_2_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_0__selector_cases_B[index0][0], this.Roller_index0_2_0__selector_cases_0_B[index0]);
					// Message to 'Roller_index0_2_0__selector_uses' from Cases factor
					this.Roller_index0_2_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0_2_0__selector_cases_B[index0]);
					// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
					this.Roller_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0], this.Roller_index0_2_0__selector_uses_B_toDef[index0]);
					// Message to 'Roller_index0_2' from Copy factor
					Roller_index0_2_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(Roller_index0_2_B[index0][0], this.Roller_index0_2_0__selector_uses_B_toDef[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][8] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][8], this.Fuse_index0__selector_uses_F_marginal[index0], 8, Fuse_index0__selector_uses_F[index0][8]);
					// Message to 'Roller_uses' from EnterPartial factor
					this.Roller_uses_B[index0][1] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(Roller_index0_2_B[index0], Fuse_index0__selector_uses_F[index0][8], this.Roller_uses_F[index0][1], new int[2] {0, 1}, this.Roller_uses_B[index0][1]);
					// Message to 'Roller_use' from Replicate factor
					Roller_use_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_uses_B[index0], Roller_use_B[index0]);
					// Message to 'Probroller_rep' from Bernoulli factor
					Probroller_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(Roller_use_B[index0], this.Probroller_rep_F[index0]);
				}
				// Message to 'Probroller_rep' from Replicate factor
				Probroller_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(Probroller_rep_B, Probroller_rep_B_toDef);
				// Message to 'Probroller_rep' from Replicate factor
				Probroller_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(Probroller_rep_B_toDef, this.probRollerPrior, Probroller_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'Probroller_rep' from Replicate factor
					this.Probroller_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(Probroller_rep_B[index0], Probroller_rep_F_marginal, index0, this.Probroller_rep_F[index0]);
					// Message to 'Roller' from Bernoulli factor
					this.Roller_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.Probroller_rep_F[index0]);
					// Message to 'Roller_uses' from Replicate factor
					this.Roller_uses_F[index0][0] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.Roller_uses_B[index0], this.Roller_F[index0], 0, this.Roller_uses_F[index0][0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__1__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0], 0, this.Roller_index0__1__selector_uses_F[index0][0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__0__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0], 0, this.Roller_index0__0__selector_uses_F[index0][0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][2], this.Roller_index0__1__selector_uses_F_marginal[index0], 2, this.Roller_index0__1__selector_uses_F[index0][2]);
					// Message to 'CPTMultPages_1_1__1_' from EnterPartial factor
					CPTMultPages_1_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_1_1_2_B[index0], this.Roller_index0__1__selector_uses_F[index0][2], this.CPTMultPages_item1_rep2_F[index0], new int[1] {1}, CPTMultPages_1_1__1__B[index0]);
					// Message to 'CPTMultPages_1_1_' from Copy factor
					CPTMultPages_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_1_1__B[index0][0], CPTMultPages_1_1__1__B[index0]);
					// Message to 'CPTMultPages_item1_rep2' from EnterPartial factor
					this.CPTMultPages_item1_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_1_1__B[index0], this.Paper_index0__selector_uses_F[index0][5], this.CPTMultPages_item1_rep2_F[index0], new int[1] {1}, this.CPTMultPages_item1_rep2_B[index0]);
					// Message to 'Roller_index0__1__selector_uses' from Replicate factor
					this.Roller_index0__1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][1], this.Roller_index0__1__selector_uses_F_marginal[index0], 1, this.Roller_index0__1__selector_uses_F[index0][1]);
					// Message to 'CPTMultPages_0_1__1_' from EnterPartial factor
					CPTMultPages_0_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_0_1_2_B[index0], this.Roller_index0__1__selector_uses_F[index0][1], this.CPTMultPages_item0_rep2_F[index0], new int[1] {0}, CPTMultPages_0_1__1__B[index0]);
					// Message to 'CPTMultPages_0_1_' from Copy factor
					CPTMultPages_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_0_1__B[index0][0], CPTMultPages_0_1__1__B[index0]);
					// Message to 'CPTMultPages_item0_rep2' from EnterPartial factor
					this.CPTMultPages_item0_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_0_1__B[index0], this.Paper_index0__selector_uses_F[index0][4], this.CPTMultPages_item0_rep2_F[index0], new int[1] {1}, this.CPTMultPages_item0_rep2_B[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][2], this.Roller_index0__0__selector_uses_F_marginal[index0], 2, this.Roller_index0__0__selector_uses_F[index0][2]);
					// Message to 'CPTMultPages_1_0__0_' from EnterPartial factor
					CPTMultPages_1_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_1_0_2_B[index0], this.Roller_index0__0__selector_uses_F[index0][2], this.CPTMultPages_item1_rep_F[index0], new int[1] {1}, CPTMultPages_1_0__0__B[index0]);
					// Message to 'CPTMultPages_1_0_' from Copy factor
					CPTMultPages_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_1_0__B[index0][0], CPTMultPages_1_0__0__B[index0]);
					// Message to 'CPTMultPages_item1_rep' from EnterPartial factor
					this.CPTMultPages_item1_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_1_0__B[index0], this.Paper_index0__selector_uses_F[index0][3], this.CPTMultPages_item1_rep_F[index0], new int[1] {0}, this.CPTMultPages_item1_rep_B[index0]);
					// Message to 'Roller_index0__0__selector_uses' from Replicate factor
					this.Roller_index0__0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][1], this.Roller_index0__0__selector_uses_F_marginal[index0], 1, this.Roller_index0__0__selector_uses_F[index0][1]);
					// Message to 'CPTMultPages_0_0__0_' from EnterPartial factor
					CPTMultPages_0_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_0_0_2_B[index0], this.Roller_index0__0__selector_uses_F[index0][1], this.CPTMultPages_item0_rep_F[index0], new int[1] {0}, CPTMultPages_0_0__0__B[index0]);
					// Message to 'CPTMultPages_0_0_' from Copy factor
					CPTMultPages_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTMultPages_0_0__B[index0][0], CPTMultPages_0_0__0__B[index0]);
					// Message to 'CPTMultPages_item0_rep' from EnterPartial factor
					this.CPTMultPages_item0_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTMultPages_0_0__B[index0], this.Paper_index0__selector_uses_F[index0][2], this.CPTMultPages_item0_rep_F[index0], new int[1] {0}, this.CPTMultPages_item0_rep_B[index0]);
				}
				// Message to 'CPTMultPages_item1_rep2' from Replicate factor
				this.CPTMultPages_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTMultPages_item1_rep2_B, this.CPTMultPages_item1_rep2_B_toDef);
				// Message to 'CPTMultPages_item0_rep2' from Replicate factor
				this.CPTMultPages_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTMultPages_item0_rep2_B, this.CPTMultPages_item0_rep2_B_toDef);
				// Message to 'CPTMultPages_item1_rep' from Replicate factor
				this.CPTMultPages_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTMultPages_item1_rep_B, this.CPTMultPages_item1_rep_B_toDef);
				// Message to 'CPTMultPages_item0_rep' from Replicate factor
				this.CPTMultPages_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTMultPages_item0_rep_B, this.CPTMultPages_item0_rep_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_1_1_' from Copy factor
					CPTWrinkled_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_1_1__B[index0][0], CPTWrinkled_1_1__1__B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][7] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][7], this.Fuse_index0__selector_uses_F_marginal[index0], 7, Fuse_index0__selector_uses_F[index0][7]);
					// Message to 'CPTWrinkled_item1_rep2' from EnterPartial factor
					this.CPTWrinkled_item1_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_1_1__B[index0], Fuse_index0__selector_uses_F[index0][7], this.CPTWrinkled_item1_rep2_F[index0], new int[1] {1}, this.CPTWrinkled_item1_rep2_B[index0]);
				}
				// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
				this.CPTWrinkled_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTWrinkled_item1_rep2_B, this.CPTWrinkled_item1_rep2_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_0_1_' from Copy factor
					CPTWrinkled_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_0_1__B[index0][0], CPTWrinkled_0_1__1__B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][6] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][6], this.Fuse_index0__selector_uses_F_marginal[index0], 6, Fuse_index0__selector_uses_F[index0][6]);
					// Message to 'CPTWrinkled_item0_rep2' from EnterPartial factor
					this.CPTWrinkled_item0_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_0_1__B[index0], Fuse_index0__selector_uses_F[index0][6], this.CPTWrinkled_item0_rep2_F[index0], new int[1] {1}, this.CPTWrinkled_item0_rep2_B[index0]);
				}
				// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
				this.CPTWrinkled_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTWrinkled_item0_rep2_B, this.CPTWrinkled_item0_rep2_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_1_0_' from Copy factor
					CPTWrinkled_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_1_0__B[index0][0], CPTWrinkled_1_0__0__B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][5], this.Fuse_index0__selector_uses_F_marginal[index0], 5, Fuse_index0__selector_uses_F[index0][5]);
					// Message to 'CPTWrinkled_item1_rep' from EnterPartial factor
					this.CPTWrinkled_item1_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_1_0__B[index0], Fuse_index0__selector_uses_F[index0][5], this.CPTWrinkled_item1_rep_F[index0], new int[1] {0}, this.CPTWrinkled_item1_rep_B[index0]);
				}
				// Message to 'CPTWrinkled_item1_rep' from Replicate factor
				this.CPTWrinkled_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTWrinkled_item1_rep_B, this.CPTWrinkled_item1_rep_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'CPTWrinkled_0_0_' from Copy factor
					CPTWrinkled_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_0_0__B[index0][0], CPTWrinkled_0_0__0__B[index0]);
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][4], this.Fuse_index0__selector_uses_F_marginal[index0], 4, Fuse_index0__selector_uses_F[index0][4]);
					// Message to 'CPTWrinkled_item0_rep' from EnterPartial factor
					this.CPTWrinkled_item0_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTWrinkled_0_0__B[index0], Fuse_index0__selector_uses_F[index0][4], this.CPTWrinkled_item0_rep_F[index0], new int[1] {0}, this.CPTWrinkled_item0_rep_B[index0]);
				}
				// Message to 'CPTWrinkled_item0_rep' from Replicate factor
				this.CPTWrinkled_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTWrinkled_item0_rep_B, this.CPTWrinkled_item0_rep_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'vbool26__1__selector_uses' from Cases factor
					this.vbool26__1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.vbool26__1__selector_cases_B[index0]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool26__1__selector_uses_B[index0], this.vbool26__1__selector_uses_B_toDef[index0]);
					// Message to 'vbool26__0__selector_uses' from Cases factor
					this.vbool26__0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.vbool26__0__selector_cases_B[index0]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool26__0__selector_uses_B[index0], this.vbool26__0__selector_uses_B_toDef[index0]);
					// Message to 'vbool26_' from Copy factor
					vbool26__B[index0][1] = ArrayHelper.SetTo<Bernoulli>(vbool26__B[index0][1], this.vbool26__1__selector_uses_B_toDef[index0]);
					// Message to 'vbool26_' from Copy factor
					vbool26__B[index0][0] = ArrayHelper.SetTo<Bernoulli>(vbool26__B[index0][0], this.vbool26__0__selector_uses_B_toDef[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][1], this.Drum_index0__selector_uses_F_marginal[index0], 1, this.Drum_index0__selector_uses_F[index0][1]);
					// Message to 'vbool26' from EnterPartial factor
					vbool26_B[index0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(vbool26__B[index0], this.Drum_index0__selector_uses_F[index0][1], this.vbool26_F[index0], new int[2] {0, 1}, vbool26_B[index0]);
					// Message to 'Toner_use' from And factor
					Toner_use_B[index0] = BooleanAndOp.AAverageConditional(vbool26_B[index0], this.vBernoulli0);
					// Message to 'ProbToner_rep' from Bernoulli factor
					this.ProbToner_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(Toner_use_B[index0], this.ProbToner_rep_F[index0]);
				}
				// Message to 'ProbToner_rep' from Replicate factor
				this.ProbToner_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbToner_rep_B, this.ProbToner_rep_B_toDef);
				// Message to 'ProbToner_rep' from Replicate factor
				this.ProbToner_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbToner_rep_B_toDef, this.probTonerPrior, this.ProbToner_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'ProbToner_rep' from Replicate factor
					this.ProbToner_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbToner_rep_B[index0], this.ProbToner_rep_F_marginal, index0, this.ProbToner_rep_F[index0]);
					// Message to 'Toner' from Bernoulli factor
					this.Toner_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbToner_rep_F[index0]);
					// Message to 'vbool26' from And factor
					this.vbool26_F[index0] = BooleanAndOp.AndAverageConditional(this.Toner_F[index0], this.vBernoulli0);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26__1__selector_uses_B_toDef[index0], this.vbool26_F[index0], this.vbool26__1__selector_uses_F_marginal[index0]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][0], this.vbool26__1__selector_uses_F_marginal[index0], 0, this.vbool26__1__selector_uses_F[index0][0]);
					// Message to 'Drum_index0__selector_cases_1_uses' from Cases factor
					this.Drum_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.vbool26__1__selector_cases_B[index0], this.vbool26__1__selector_uses_F[index0][0]));
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][1], this.vbool26__1__selector_uses_F_marginal[index0], 1, this.vbool26__1__selector_uses_F[index0][1]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][5], this.vbool26__1__selector_uses_F_marginal[index0], 5, this.vbool26__1__selector_uses_F[index0][5]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][4], this.vbool26__1__selector_uses_F_marginal[index0], 4, this.vbool26__1__selector_uses_F[index0][4]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][3], this.vbool26__1__selector_uses_F_marginal[index0], 3, this.vbool26__1__selector_uses_F[index0][3]);
					// Message to 'vbool26__1__selector_uses' from Replicate factor
					this.vbool26__1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][2], this.vbool26__1__selector_uses_F_marginal[index0], 2, this.vbool26__1__selector_uses_F[index0][2]);
					// Message to 'Drum_index0__selector_cases_1_uses' from Replicate factor
					this.Drum_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.vbool26__1__selector_uses_B[index0], this.vbool26_F[index0], this.vbool26__1__selector_uses_F[index0]));
					// Message to 'Drum_index0__selector_cases_1' from Replicate factor
					this.Drum_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Drum_index0__selector_cases_1_uses_B[index0], this.Drum_index0__selector_cases_1_B[index0]);
					// Message to 'Drum_index0__selector_cases' from Copy factor
					this.Drum_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Drum_index0__selector_cases_B[index0][1], this.Drum_index0__selector_cases_1_B[index0]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26__0__selector_uses_B_toDef[index0], this.vbool26_F[index0], this.vbool26__0__selector_uses_F_marginal[index0]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][0], this.vbool26__0__selector_uses_F_marginal[index0], 0, this.vbool26__0__selector_uses_F[index0][0]);
					// Message to 'Drum_index0__selector_cases_0_uses' from Cases factor
					this.Drum_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.vbool26__0__selector_cases_B[index0], this.vbool26__0__selector_uses_F[index0][0]));
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][1], this.vbool26__0__selector_uses_F_marginal[index0], 1, this.vbool26__0__selector_uses_F[index0][1]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][5], this.vbool26__0__selector_uses_F_marginal[index0], 5, this.vbool26__0__selector_uses_F[index0][5]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][4], this.vbool26__0__selector_uses_F_marginal[index0], 4, this.vbool26__0__selector_uses_F[index0][4]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][3], this.vbool26__0__selector_uses_F_marginal[index0], 3, this.vbool26__0__selector_uses_F[index0][3]);
					// Message to 'vbool26__0__selector_uses' from Replicate factor
					this.vbool26__0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][2], this.vbool26__0__selector_uses_F_marginal[index0], 2, this.vbool26__0__selector_uses_F[index0][2]);
					// Message to 'Drum_index0__selector_cases_0_uses' from Replicate factor
					this.Drum_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.vbool26__0__selector_uses_B[index0], this.vbool26_F[index0], this.vbool26__0__selector_uses_F[index0]));
					// Message to 'Drum_index0__selector_cases_0' from Replicate factor
					this.Drum_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Drum_index0__selector_cases_0_uses_B[index0], this.Drum_index0__selector_cases_0_B[index0]);
					// Message to 'Drum_index0__selector_cases' from Copy factor
					this.Drum_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Drum_index0__selector_cases_B[index0][0], this.Drum_index0__selector_cases_0_B[index0]);
					// Message to 'Drum_index0__selector_uses' from Cases factor
					this.Drum_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Drum_index0__selector_cases_B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Drum_index0__selector_uses_B[index0], this.Drum_index0__selector_uses_B_toDef[index0]);
					// Message to 'CPTQuality_1_1_0_2_1_' from EnterPartial factor
					CPTQuality_1_1_0_2_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_0_3_B[index0], this.Paper_index0_2_1__selector_uses_F[index0][2], this.CPTQuality_item1_item1_rep_F[index0], new int[1] {1}, CPTQuality_1_1_0_2_1__B[index0]);
					// Message to 'CPTQuality_1_1_0_2' from Copy factor
					CPTQuality_1_1_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_0_2_B[index0][0], CPTQuality_1_1_0_2_1__B[index0]);
					// Message to 'CPTQuality_1_1_0__0_' from EnterPartial factor
					CPTQuality_1_1_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_0_2_B[index0], this.vbool26__0__selector_uses_F[index0][5], this.CPTQuality_item1_item1_rep_F[index0], new int[1] {1}, CPTQuality_1_1_0__0__B[index0]);
					// Message to 'CPTQuality_0_1_0_2_1_' from EnterPartial factor
					CPTQuality_0_1_0_2_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_0_3_B[index0], this.Paper_index0_2_1__selector_uses_F[index0][1], this.CPTQuality_item0_item1_rep_F[index0], new int[1] {0}, CPTQuality_0_1_0_2_1__B[index0]);
					// Message to 'CPTQuality_0_1_0_2' from Copy factor
					CPTQuality_0_1_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_0_2_B[index0][0], CPTQuality_0_1_0_2_1__B[index0]);
					// Message to 'CPTQuality_0_1_0__0_' from EnterPartial factor
					CPTQuality_0_1_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_0_2_B[index0], this.vbool26__0__selector_uses_F[index0][4], this.CPTQuality_item0_item1_rep_F[index0], new int[1] {1}, CPTQuality_0_1_0__0__B[index0]);
					// Message to 'CPTQuality_1_0_0_2_0_' from EnterPartial factor
					CPTQuality_1_0_0_2_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_0_3_B[index0], this.Paper_index0_2_0__selector_uses_F[index0][2], this.CPTQuality_item1_item0_rep_F[index0], new int[1] {1}, CPTQuality_1_0_0_2_0__B[index0]);
					// Message to 'CPTQuality_1_0_0_2' from Copy factor
					CPTQuality_1_0_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_0_2_B[index0][0], CPTQuality_1_0_0_2_0__B[index0]);
					// Message to 'CPTQuality_1_0_0__0_' from EnterPartial factor
					CPTQuality_1_0_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_0_2_B[index0], this.vbool26__0__selector_uses_F[index0][3], this.CPTQuality_item1_item0_rep_F[index0], new int[1] {0}, CPTQuality_1_0_0__0__B[index0]);
					// Message to 'CPTQuality_0_0_0_2_0_' from EnterPartial factor
					CPTQuality_0_0_0_2_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_0_3_B[index0], this.Paper_index0_2_0__selector_uses_F[index0][1], this.CPTQuality_item0_item0_rep_F[index0], new int[1] {0}, CPTQuality_0_0_0_2_0__B[index0]);
					// Message to 'CPTQuality_0_0_0_2' from Copy factor
					CPTQuality_0_0_0_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_0_2_B[index0][0], CPTQuality_0_0_0_2_0__B[index0]);
					// Message to 'CPTQuality_0_0_0__0_' from EnterPartial factor
					CPTQuality_0_0_0__0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_0_2_B[index0], this.vbool26__0__selector_uses_F[index0][2], this.CPTQuality_item0_item0_rep_F[index0], new int[1] {0}, CPTQuality_0_0_0__0__B[index0]);
					// Message to 'CPTQuality_0_0_0_' from Copy factor
					CPTQuality_0_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_0__B[index0][0], CPTQuality_0_0_0__0__B[index0]);
					// Message to 'ProbDrum_rep' from Bernoulli factor
					this.ProbDrum_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Drum_index0__selector_uses_B_toDef[index0], this.ProbDrum_rep_F[index0]);
				}
				// Message to 'ProbDrum_rep' from Replicate factor
				this.ProbDrum_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbDrum_rep_B, this.ProbDrum_rep_B_toDef);
				// Message to 'ProbDrum_rep' from Replicate factor
				this.ProbDrum_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbDrum_rep_B_toDef, this.probDrumPrior, this.ProbDrum_rep_F_marginal);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'ProbDrum_rep' from Replicate factor
					this.ProbDrum_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbDrum_rep_B[index0], this.ProbDrum_rep_F_marginal, index0, this.ProbDrum_rep_F[index0]);
					// Message to 'Drum' from Bernoulli factor
					this.Drum_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbDrum_rep_F[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Drum_index0__selector_uses_B_toDef[index0], this.Drum_F[index0], this.Drum_index0__selector_uses_F_marginal[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][2], this.Drum_index0__selector_uses_F_marginal[index0], 2, this.Drum_index0__selector_uses_F[index0][2]);
					// Message to 'CPTQuality_1_1_1_2_1_' from EnterPartial factor
					CPTQuality_1_1_1_2_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_1_3_B[index0], this.Paper_index0_3_1__selector_uses_F[index0][2], this.CPTQuality_item1_item1_rep2_F[index0], new int[1] {1}, CPTQuality_1_1_1_2_1__B[index0]);
					// Message to 'CPTQuality_1_1_1_2' from Copy factor
					CPTQuality_1_1_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_1_2_B[index0][0], CPTQuality_1_1_1_2_1__B[index0]);
					// Message to 'CPTQuality_1_1_1__1_' from EnterPartial factor
					CPTQuality_1_1_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_1_2_B[index0], this.vbool26__1__selector_uses_F[index0][5], this.CPTQuality_item1_item1_rep2_F[index0], new int[1] {1}, CPTQuality_1_1_1__1__B[index0]);
					// Message to 'CPTQuality_1_1_1_' from Copy factor
					CPTQuality_1_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_1__B[index0][0], CPTQuality_1_1_1__1__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][10] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][10], this.Drum_index0__selector_uses_F_marginal[index0], 10, this.Drum_index0__selector_uses_F[index0][10]);
					// Message to 'CPTQuality_item1_item1_rep2' from EnterPartial factor
					this.CPTQuality_item1_item1_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_1__B[index0], this.Drum_index0__selector_uses_F[index0][10], this.CPTQuality_item1_item1_rep2_F[index0], new int[1] {1}, this.CPTQuality_item1_item1_rep2_B[index0]);
					// Message to 'CPTQuality_0_1_1_2_1_' from EnterPartial factor
					CPTQuality_0_1_1_2_1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_1_3_B[index0], this.Paper_index0_3_1__selector_uses_F[index0][1], this.CPTQuality_item0_item1_rep2_F[index0], new int[1] {0}, CPTQuality_0_1_1_2_1__B[index0]);
					// Message to 'CPTQuality_0_1_1_2' from Copy factor
					CPTQuality_0_1_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_1_2_B[index0][0], CPTQuality_0_1_1_2_1__B[index0]);
					// Message to 'CPTQuality_0_1_1__1_' from EnterPartial factor
					CPTQuality_0_1_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_1_2_B[index0], this.vbool26__1__selector_uses_F[index0][4], this.CPTQuality_item0_item1_rep2_F[index0], new int[1] {1}, CPTQuality_0_1_1__1__B[index0]);
					// Message to 'CPTQuality_0_1_1_' from Copy factor
					CPTQuality_0_1_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_1__B[index0][0], CPTQuality_0_1_1__1__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][9] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][9], this.Drum_index0__selector_uses_F_marginal[index0], 9, this.Drum_index0__selector_uses_F[index0][9]);
					// Message to 'CPTQuality_item0_item1_rep2' from EnterPartial factor
					this.CPTQuality_item0_item1_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_1__B[index0], this.Drum_index0__selector_uses_F[index0][9], this.CPTQuality_item0_item1_rep2_F[index0], new int[1] {1}, this.CPTQuality_item0_item1_rep2_B[index0]);
					// Message to 'CPTQuality_1_0_1_2_0_' from EnterPartial factor
					CPTQuality_1_0_1_2_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_1_3_B[index0], this.Paper_index0_3_0__selector_uses_F[index0][2], this.CPTQuality_item1_item0_rep2_F[index0], new int[1] {1}, CPTQuality_1_0_1_2_0__B[index0]);
					// Message to 'CPTQuality_1_0_1_2' from Copy factor
					CPTQuality_1_0_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_1_2_B[index0][0], CPTQuality_1_0_1_2_0__B[index0]);
					// Message to 'CPTQuality_1_0_1__1_' from EnterPartial factor
					CPTQuality_1_0_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_1_2_B[index0], this.vbool26__1__selector_uses_F[index0][3], this.CPTQuality_item1_item0_rep2_F[index0], new int[1] {0}, CPTQuality_1_0_1__1__B[index0]);
					// Message to 'CPTQuality_1_0_1_' from Copy factor
					CPTQuality_1_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_1__B[index0][0], CPTQuality_1_0_1__1__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][8] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][8], this.Drum_index0__selector_uses_F_marginal[index0], 8, this.Drum_index0__selector_uses_F[index0][8]);
					// Message to 'CPTQuality_item1_item0_rep2' from EnterPartial factor
					this.CPTQuality_item1_item0_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_1__B[index0], this.Drum_index0__selector_uses_F[index0][8], this.CPTQuality_item1_item0_rep2_F[index0], new int[1] {1}, this.CPTQuality_item1_item0_rep2_B[index0]);
					// Message to 'CPTQuality_0_0_1_2_0_' from EnterPartial factor
					CPTQuality_0_0_1_2_0__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_1_3_B[index0], this.Paper_index0_3_0__selector_uses_F[index0][1], this.CPTQuality_item0_item0_rep2_F[index0], new int[1] {0}, CPTQuality_0_0_1_2_0__B[index0]);
					// Message to 'CPTQuality_0_0_1_2' from Copy factor
					CPTQuality_0_0_1_2_B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_1_2_B[index0][0], CPTQuality_0_0_1_2_0__B[index0]);
					// Message to 'CPTQuality_0_0_1__1_' from EnterPartial factor
					CPTQuality_0_0_1__1__B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_1_2_B[index0], this.vbool26__1__selector_uses_F[index0][2], this.CPTQuality_item0_item0_rep2_F[index0], new int[1] {0}, CPTQuality_0_0_1__1__B[index0]);
					// Message to 'CPTQuality_0_0_1_' from Copy factor
					CPTQuality_0_0_1__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_0_1__B[index0][0], CPTQuality_0_0_1__1__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][7] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][7], this.Drum_index0__selector_uses_F_marginal[index0], 7, this.Drum_index0__selector_uses_F[index0][7]);
					// Message to 'CPTQuality_item0_item0_rep2' from EnterPartial factor
					this.CPTQuality_item0_item0_rep2_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_1__B[index0], this.Drum_index0__selector_uses_F[index0][7], this.CPTQuality_item0_item0_rep2_F[index0], new int[1] {1}, this.CPTQuality_item0_item0_rep2_B[index0]);
					// Message to 'CPTQuality_1_1_0_' from Copy factor
					CPTQuality_1_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_1_0__B[index0][0], CPTQuality_1_1_0__0__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][6] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][6], this.Drum_index0__selector_uses_F_marginal[index0], 6, this.Drum_index0__selector_uses_F[index0][6]);
					// Message to 'CPTQuality_item1_item1_rep' from EnterPartial factor
					this.CPTQuality_item1_item1_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_1_0__B[index0], this.Drum_index0__selector_uses_F[index0][6], this.CPTQuality_item1_item1_rep_F[index0], new int[1] {0}, this.CPTQuality_item1_item1_rep_B[index0]);
					// Message to 'CPTQuality_0_1_0_' from Copy factor
					CPTQuality_0_1_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_0_1_0__B[index0][0], CPTQuality_0_1_0__0__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][5], this.Drum_index0__selector_uses_F_marginal[index0], 5, this.Drum_index0__selector_uses_F[index0][5]);
					// Message to 'CPTQuality_item0_item1_rep' from EnterPartial factor
					this.CPTQuality_item0_item1_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_1_0__B[index0], this.Drum_index0__selector_uses_F[index0][5], this.CPTQuality_item0_item1_rep_F[index0], new int[1] {0}, this.CPTQuality_item0_item1_rep_B[index0]);
					// Message to 'CPTQuality_1_0_0_' from Copy factor
					CPTQuality_1_0_0__B[index0][0] = ArrayHelper.SetTo<Beta>(CPTQuality_1_0_0__B[index0][0], CPTQuality_1_0_0__0__B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][4], this.Drum_index0__selector_uses_F_marginal[index0], 4, this.Drum_index0__selector_uses_F[index0][4]);
					// Message to 'CPTQuality_item1_item0_rep' from EnterPartial factor
					this.CPTQuality_item1_item0_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_1_0_0__B[index0], this.Drum_index0__selector_uses_F[index0][4], this.CPTQuality_item1_item0_rep_F[index0], new int[1] {0}, this.CPTQuality_item1_item0_rep_B[index0]);
					// Message to 'Drum_index0__selector_uses' from Replicate factor
					this.Drum_index0__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][3], this.Drum_index0__selector_uses_F_marginal[index0], 3, this.Drum_index0__selector_uses_F[index0][3]);
					// Message to 'CPTQuality_item0_item0_rep' from EnterPartial factor
					this.CPTQuality_item0_item0_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTQuality_0_0_0__B[index0], this.Drum_index0__selector_uses_F[index0][3], this.CPTQuality_item0_item0_rep_F[index0], new int[1] {0}, this.CPTQuality_item0_item0_rep_B[index0]);
				}
				// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
				this.CPTQuality_item1_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item1_item1_rep2_B, this.CPTQuality_item1_item1_rep2_B_toDef);
				// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
				this.CPTQuality_item0_item1_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item0_item1_rep2_B, this.CPTQuality_item0_item1_rep2_B_toDef);
				// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
				this.CPTQuality_item1_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item1_item0_rep2_B, this.CPTQuality_item1_item0_rep2_B_toDef);
				// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
				this.CPTQuality_item0_item0_rep2_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item0_item0_rep2_B, this.CPTQuality_item0_item0_rep2_B_toDef);
				// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
				this.CPTQuality_item1_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item1_item1_rep_B, this.CPTQuality_item1_item1_rep_B_toDef);
				// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
				this.CPTQuality_item0_item1_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item0_item1_rep_B, this.CPTQuality_item0_item1_rep_B_toDef);
				// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
				this.CPTQuality_item1_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item1_item0_rep_B, this.CPTQuality_item1_item0_rep_B_toDef);
				// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
				this.CPTQuality_item0_item0_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTQuality_item0_item0_rep_B, this.CPTQuality_item0_item0_rep_B_toDef);
				for(int index0 = 0; index0<this.NumExample; index0++) {
					// Message to 'Fuse_index0__selector_uses' from Replicate factor
					Fuse_index0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B[index0][1], this.Fuse_index0__selector_uses_F_marginal[index0], 1, Fuse_index0__selector_uses_F[index0][1]);
					// Message to 'CPTBurning_rep' from EnterPartial factor
					this.CPTBurning_rep_B[index0] = GateEnterPartialOp<double>.ValueAverageConditional<Beta>(CPTBurning_0__B[index0], Fuse_index0__selector_uses_F[index0][1], this.CPTBurning_rep_F[index0], new int[1] {0}, this.CPTBurning_rep_B[index0]);
				}
				// Message to 'CPTBurning_rep' from Replicate factor
				this.CPTBurning_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.CPTBurning_rep_B, this.CPTBurning_rep_B_toDef);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'ProbFuse_marginal' from Variable factor
			this.ProbFuse_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.ProbFuse_rep_B_toDef, this.probFusePrior, this.ProbFuse_marginal_F);
			this.ProbDrum_marginal_F = Beta.Uniform();
			// Message to 'ProbDrum_marginal' from Variable factor
			this.ProbDrum_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.ProbDrum_rep_B_toDef, this.probDrumPrior, this.ProbDrum_marginal_F);
			this.ProbToner_marginal_F = Beta.Uniform();
			// Message to 'ProbToner_marginal' from Variable factor
			this.ProbToner_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.ProbToner_rep_B_toDef, this.probTonerPrior, this.ProbToner_marginal_F);
			this.ProbPaper_marginal_F = Beta.Uniform();
			// Message to 'ProbPaper_marginal' from Variable factor
			this.ProbPaper_marginal_F = VariableOp.MarginalAverageConditional<Beta>(this.ProbPaper_rep_B_toDef, this.probPaperPrior, this.ProbPaper_marginal_F);
			this.Probroller_marginal_F = Beta.Uniform();
			// Message to 'Probroller_marginal' from Variable factor
			this.Probroller_marginal_F = VariableOp.MarginalAverageConditional<Beta>(Probroller_rep_B_toDef, this.probRollerPrior, this.Probroller_marginal_F);
			// Create array for 'CPTBurning_marginal' Forwards messages.
			this.CPTBurning_marginal_F = new DistributionStructArray<Beta,double>(2);
			DistributionStructArray<Beta,double> CPTBurning_use_B;
			// Create array for 'CPTBurning_use' Backwards messages.
			CPTBurning_use_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTBurning_use_B[fuseRange] = Beta.Uniform();
			}
			// Message to 'CPTBurning_use' from Replicate factor
			CPTBurning_use_B[0] = ArrayHelper.SetTo<Beta>(CPTBurning_use_B[0], this.CPTBurning_rep_B_toDef);
			// Message to 'CPTBurning_use' from Replicate factor
			CPTBurning_use_B[1] = ArrayHelper.SetTo<Beta>(CPTBurning_use_B[1], this.CPTBurning_rep2_B_toDef);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				this.CPTBurning_marginal_F[fuseRange] = Beta.Uniform();
				// Message to 'CPTBurning_marginal' from Variable factor
				this.CPTBurning_marginal_F[fuseRange] = VariableOp.MarginalAverageConditional<Beta>(CPTBurning_use_B[fuseRange], this.probBurningPrior[fuseRange], this.CPTBurning_marginal_F[fuseRange]);
			}
			// Create array for 'CPTQuality_marginal' Forwards messages.
			this.CPTQuality_marginal_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQuality_use_B;
			// Create array for 'CPTQuality_use' Backwards messages.
			CPTQuality_use_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality_use' Backwards messages.
				CPTQuality_use_B[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality_use' Backwards messages.
					CPTQuality_use_B[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						CPTQuality_use_B[paperRange][tonerRange][drumRange] = Beta.Uniform();
					}
				}
			}
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_item0_B;
			// Create array for 'CPTQuality_item0' Backwards messages.
			CPTQuality_item0_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int tonerRange = 0; tonerRange<2; tonerRange++) {
				// Create array for 'CPTQuality_item0' Backwards messages.
				CPTQuality_item0_B[tonerRange] = new DistributionStructArray<Beta,double>(2);
				for(int drumRange = 0; drumRange<2; drumRange++) {
					CPTQuality_item0_B[tonerRange][drumRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item0_item0_B;
			// Create array for 'CPTQuality_item0_item0' Backwards messages.
			CPTQuality_item0_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item0_item0_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item0_item0' from Replicate factor
			CPTQuality_item0_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_B[0], this.CPTQuality_item0_item0_rep_B_toDef);
			// Message to 'CPTQuality_item0_item0' from Replicate factor
			CPTQuality_item0_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item0_B[1], this.CPTQuality_item0_item0_rep2_B_toDef);
			// Message to 'CPTQuality_item0' from Copy factor
			CPTQuality_item0_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item0_B[0], CPTQuality_item0_item0_B);
			DistributionStructArray<Beta,double> CPTQuality_item0_item1_B;
			// Create array for 'CPTQuality_item0_item1' Backwards messages.
			CPTQuality_item0_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item0_item1_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item0_item1' from Replicate factor
			CPTQuality_item0_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_B[0], this.CPTQuality_item0_item1_rep_B_toDef);
			// Message to 'CPTQuality_item0_item1' from Replicate factor
			CPTQuality_item0_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item0_item1_B[1], this.CPTQuality_item0_item1_rep2_B_toDef);
			// Message to 'CPTQuality_item0' from Copy factor
			CPTQuality_item0_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item0_B[1], CPTQuality_item0_item1_B);
			// Message to 'CPTQuality_use' from Copy factor
			CPTQuality_use_B[0] = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>>(CPTQuality_use_B[0], CPTQuality_item0_B);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTQuality_item1_B;
			// Create array for 'CPTQuality_item1' Backwards messages.
			CPTQuality_item1_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int tonerRange = 0; tonerRange<2; tonerRange++) {
				// Create array for 'CPTQuality_item1' Backwards messages.
				CPTQuality_item1_B[tonerRange] = new DistributionStructArray<Beta,double>(2);
				for(int drumRange = 0; drumRange<2; drumRange++) {
					CPTQuality_item1_B[tonerRange][drumRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTQuality_item1_item0_B;
			// Create array for 'CPTQuality_item1_item0' Backwards messages.
			CPTQuality_item1_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item1_item0_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item1_item0' from Replicate factor
			CPTQuality_item1_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_B[0], this.CPTQuality_item1_item0_rep_B_toDef);
			// Message to 'CPTQuality_item1_item0' from Replicate factor
			CPTQuality_item1_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item0_B[1], this.CPTQuality_item1_item0_rep2_B_toDef);
			// Message to 'CPTQuality_item1' from Copy factor
			CPTQuality_item1_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item1_B[0], CPTQuality_item1_item0_B);
			DistributionStructArray<Beta,double> CPTQuality_item1_item1_B;
			// Create array for 'CPTQuality_item1_item1' Backwards messages.
			CPTQuality_item1_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int drumRange = 0; drumRange<2; drumRange++) {
				CPTQuality_item1_item1_B[drumRange] = Beta.Uniform();
			}
			// Message to 'CPTQuality_item1_item1' from Replicate factor
			CPTQuality_item1_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_B[0], this.CPTQuality_item1_item1_rep_B_toDef);
			// Message to 'CPTQuality_item1_item1' from Replicate factor
			CPTQuality_item1_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTQuality_item1_item1_B[1], this.CPTQuality_item1_item1_rep2_B_toDef);
			// Message to 'CPTQuality_item1' from Copy factor
			CPTQuality_item1_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTQuality_item1_B[1], CPTQuality_item1_item1_B);
			// Message to 'CPTQuality_use' from Copy factor
			CPTQuality_use_B[1] = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>>(CPTQuality_use_B[1], CPTQuality_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality_marginal' Forwards messages.
				this.CPTQuality_marginal_F[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality_marginal' Forwards messages.
					this.CPTQuality_marginal_F[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange] = Beta.Uniform();
						// Message to 'CPTQuality_marginal' from Variable factor
						this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange] = VariableOp.MarginalAverageConditional<Beta>(CPTQuality_use_B[paperRange][tonerRange][drumRange], this.probQualityPrior[paperRange][tonerRange][drumRange], this.CPTQuality_marginal_F[paperRange][tonerRange][drumRange]);
					}
				}
			}
			// Create array for 'CPTWrinkled_marginal' Forwards messages.
			this.CPTWrinkled_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkled_use_B;
			// Create array for 'CPTWrinkled_use' Backwards messages.
			CPTWrinkled_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled_use' Backwards messages.
				CPTWrinkled_use_B[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					CPTWrinkled_use_B[paperRange][fuseRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTWrinkled_item0_B;
			// Create array for 'CPTWrinkled_item0' Backwards messages.
			CPTWrinkled_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTWrinkled_item0_B[fuseRange] = Beta.Uniform();
			}
			// Message to 'CPTWrinkled_item0' from Replicate factor
			CPTWrinkled_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_B[0], this.CPTWrinkled_item0_rep_B_toDef);
			// Message to 'CPTWrinkled_item0' from Replicate factor
			CPTWrinkled_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item0_B[1], this.CPTWrinkled_item0_rep2_B_toDef);
			// Message to 'CPTWrinkled_use' from Copy factor
			CPTWrinkled_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTWrinkled_use_B[0], CPTWrinkled_item0_B);
			DistributionStructArray<Beta,double> CPTWrinkled_item1_B;
			// Create array for 'CPTWrinkled_item1' Backwards messages.
			CPTWrinkled_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				CPTWrinkled_item1_B[fuseRange] = Beta.Uniform();
			}
			// Message to 'CPTWrinkled_item1' from Replicate factor
			CPTWrinkled_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_B[0], this.CPTWrinkled_item1_rep_B_toDef);
			// Message to 'CPTWrinkled_item1' from Replicate factor
			CPTWrinkled_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTWrinkled_item1_B[1], this.CPTWrinkled_item1_rep2_B_toDef);
			// Message to 'CPTWrinkled_use' from Copy factor
			CPTWrinkled_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTWrinkled_use_B[1], CPTWrinkled_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled_marginal' Forwards messages.
				this.CPTWrinkled_marginal_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					this.CPTWrinkled_marginal_F[paperRange][fuseRange] = Beta.Uniform();
					// Message to 'CPTWrinkled_marginal' from Variable factor
					this.CPTWrinkled_marginal_F[paperRange][fuseRange] = VariableOp.MarginalAverageConditional<Beta>(CPTWrinkled_use_B[paperRange][fuseRange], this.probWrinkledPrior[paperRange][fuseRange], this.CPTWrinkled_marginal_F[paperRange][fuseRange]);
				}
			}
			// Create array for 'CPTMultPages_marginal' Forwards messages.
			this.CPTMultPages_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPages_use_B;
			// Create array for 'CPTMultPages_use' Backwards messages.
			CPTMultPages_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages_use' Backwards messages.
				CPTMultPages_use_B[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTMultPages_use_B[paperRange][rollerRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTMultPages_item0_B;
			// Create array for 'CPTMultPages_item0' Backwards messages.
			CPTMultPages_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTMultPages_item0_B[rollerRange] = Beta.Uniform();
			}
			// Message to 'CPTMultPages_item0' from Replicate factor
			CPTMultPages_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_B[0], this.CPTMultPages_item0_rep_B_toDef);
			// Message to 'CPTMultPages_item0' from Replicate factor
			CPTMultPages_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTMultPages_item0_B[1], this.CPTMultPages_item0_rep2_B_toDef);
			// Message to 'CPTMultPages_use' from Copy factor
			CPTMultPages_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTMultPages_use_B[0], CPTMultPages_item0_B);
			DistributionStructArray<Beta,double> CPTMultPages_item1_B;
			// Create array for 'CPTMultPages_item1' Backwards messages.
			CPTMultPages_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTMultPages_item1_B[rollerRange] = Beta.Uniform();
			}
			// Message to 'CPTMultPages_item1' from Replicate factor
			CPTMultPages_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_B[0], this.CPTMultPages_item1_rep_B_toDef);
			// Message to 'CPTMultPages_item1' from Replicate factor
			CPTMultPages_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTMultPages_item1_B[1], this.CPTMultPages_item1_rep2_B_toDef);
			// Message to 'CPTMultPages_use' from Copy factor
			CPTMultPages_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTMultPages_use_B[1], CPTMultPages_item1_B);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages_marginal' Forwards messages.
				this.CPTMultPages_marginal_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTMultPages_marginal_F[paperRange][rollerRange] = Beta.Uniform();
					// Message to 'CPTMultPages_marginal' from Variable factor
					this.CPTMultPages_marginal_F[paperRange][rollerRange] = VariableOp.MarginalAverageConditional<Beta>(CPTMultPages_use_B[paperRange][rollerRange], this.probMultPagesPrior[paperRange][rollerRange], this.CPTMultPages_marginal_F[paperRange][rollerRange]);
				}
			}
			// Create array for 'CPTPaperJam_marginal' Forwards messages.
			this.CPTPaperJam_marginal_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJam_use_B;
			// Create array for 'CPTPaperJam_use' Backwards messages.
			CPTPaperJam_use_B = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam_use' Backwards messages.
				CPTPaperJam_use_B[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					CPTPaperJam_use_B[fuseRange][rollerRange] = Beta.Uniform();
				}
			}
			DistributionStructArray<Beta,double> CPTPaperJam_item0_B;
			// Create array for 'CPTPaperJam_item0' Backwards messages.
			CPTPaperJam_item0_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTPaperJam_item0_B[rollerRange] = Beta.Uniform();
			}
			// Message to 'CPTPaperJam_item0' from Replicate factor
			CPTPaperJam_item0_B[0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_B[0], this.CPTPaperJam_item0_rep_B_toDef);
			// Message to 'CPTPaperJam_item0' from Replicate factor
			CPTPaperJam_item0_B[1] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item0_B[1], this.CPTPaperJam_item0_rep2_B_toDef);
			// Message to 'CPTPaperJam_use' from Copy factor
			CPTPaperJam_use_B[0] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTPaperJam_use_B[0], CPTPaperJam_item0_B);
			DistributionStructArray<Beta,double> CPTPaperJam_item1_B;
			// Create array for 'CPTPaperJam_item1' Backwards messages.
			CPTPaperJam_item1_B = new DistributionStructArray<Beta,double>(2);
			for(int rollerRange = 0; rollerRange<2; rollerRange++) {
				CPTPaperJam_item1_B[rollerRange] = Beta.Uniform();
			}
			// Message to 'CPTPaperJam_item1' from Replicate factor
			CPTPaperJam_item1_B[0] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_B[0], this.CPTPaperJam_item1_rep_B_toDef);
			// Message to 'CPTPaperJam_item1' from Replicate factor
			CPTPaperJam_item1_B[1] = ArrayHelper.SetTo<Beta>(CPTPaperJam_item1_B[1], this.CPTPaperJam_item1_rep2_B_toDef);
			// Message to 'CPTPaperJam_use' from Copy factor
			CPTPaperJam_use_B[1] = ArrayHelper.SetTo<DistributionStructArray<Beta,double>>(CPTPaperJam_use_B[1], CPTPaperJam_item1_B);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam_marginal' Forwards messages.
				this.CPTPaperJam_marginal_F[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTPaperJam_marginal_F[fuseRange][rollerRange] = Beta.Uniform();
					// Message to 'CPTPaperJam_marginal' from Variable factor
					this.CPTPaperJam_marginal_F[fuseRange][rollerRange] = VariableOp.MarginalAverageConditional<Beta>(CPTPaperJam_use_B[fuseRange][rollerRange], this.probPaperJamPrior[fuseRange][rollerRange], this.CPTPaperJam_marginal_F[fuseRange][rollerRange]);
				}
			}
			// Create array for 'Fuse_marginal' Forwards messages.
			this.Fuse_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.Fuse_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'Fuse_marginal' from Variable factor
				this.Fuse_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(this.Fuse_index0__selector_uses_B_toDef[index0], this.Fuse_F[index0], this.Fuse_marginal_F[index0]);
			}
			// Create array for 'Drum_marginal' Forwards messages.
			this.Drum_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.Drum_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'Drum_marginal' from Variable factor
				this.Drum_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B_toDef[index0], this.Drum_F[index0], this.Drum_marginal_F[index0]);
			}
			// Create array for 'Toner_marginal' Forwards messages.
			this.Toner_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.Toner_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'Toner_marginal' from Variable factor
				this.Toner_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(Toner_use_B[index0], this.Toner_F[index0], this.Toner_marginal_F[index0]);
			}
			// Create array for 'Paper_marginal' Forwards messages.
			this.Paper_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.Paper_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'Paper_marginal' from Variable factor
				this.Paper_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(this.Paper_uses_B_index0__toDef[index0], this.Paper_F[index0], this.Paper_marginal_F[index0]);
			}
			// Create array for 'Roller_marginal' Forwards messages.
			this.Roller_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.Roller_marginal_F[index0] = Bernoulli.Uniform();
				// Message to 'Roller_marginal' from Variable factor
				this.Roller_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(Roller_use_B[index0], this.Roller_F[index0], this.Roller_marginal_F[index0]);
			}
			this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of Burning and MultPages and numberOfIterationsDecreased and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled and must reset on changes to ProbFusePrior and ProbRollerPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46(bool initialise)
		{
			if (this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone&&((!initialise)||this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Fuse_index0__selector_cases_1' from Replicate factor
				this.Fuse_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Fuse_index0__selector_cases_1_uses_B[index0], this.Fuse_index0__selector_cases_1_B[index0]);
				// Message to 'Fuse_index0__selector_cases' from Copy factor
				this.Fuse_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Fuse_index0__selector_cases_B[index0][1], this.Fuse_index0__selector_cases_1_B[index0]);
				// Message to 'Fuse_index0__selector_cases_0' from Replicate factor
				this.Fuse_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Fuse_index0__selector_cases_0_uses_B[index0], this.Fuse_index0__selector_cases_0_B[index0]);
				// Message to 'Fuse_index0__selector_cases' from Copy factor
				this.Fuse_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Fuse_index0__selector_cases_B[index0][0], this.Fuse_index0__selector_cases_0_B[index0]);
				// Message to 'Fuse_index0__selector_uses' from Cases factor
				this.Fuse_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Fuse_index0__selector_cases_B[index0]);
				// Message to 'Fuse_index0__selector_uses' from Replicate factor
				this.Fuse_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Fuse_index0__selector_uses_B[index0], this.Fuse_index0__selector_uses_B_toDef[index0]);
				// Message to 'ProbFuse_rep' from Bernoulli factor
				this.ProbFuse_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Fuse_index0__selector_uses_B_toDef[index0], this.ProbFuse_rep_F[index0]);
			}
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = true;
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Burning and MultPages and numberOfIterationsDecreased and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled and must reset on changes to ProbRollerPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47(bool initialise)
		{
			if (this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone&&((!initialise)||this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isInitialised)) {
				return ;
			}
			// Message to 'ProbFuse_rep' from Replicate factor
			this.ProbFuse_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbFuse_rep_B, this.ProbFuse_rep_B_toDef);
			// Message to 'ProbFuse_rep' from Replicate factor
			this.ProbFuse_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbFuse_rep_B_toDef, this.probFusePrior, this.ProbFuse_rep_F_marginal);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'ProbFuse_rep' from Replicate factor
				this.ProbFuse_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbFuse_rep_B[index0], this.ProbFuse_rep_F_marginal, index0, this.ProbFuse_rep_F[index0]);
				// Message to 'Fuse' from Bernoulli factor
				this.Fuse_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbFuse_rep_F[index0]);
				// Message to 'Fuse_index0__selector_uses' from Replicate factor
				this.Fuse_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Fuse_index0__selector_uses_B_toDef[index0], this.Fuse_F[index0], this.Fuse_index0__selector_uses_F_marginal[index0]);
			}
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = true;
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Burning and numberOfIterationsDecreased and numExample and ProbBurningPrior and must reset on changes to MultPages and PaperJam and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45(bool initialise)
		{
			if (this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone&&((!initialise)||this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Fuse_index0__selector_cases_1_uses' from Bernoulli factor
				this.Fuse_index0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.burning[index0], this.CPTBurning_rep2_F[index0]));
				// Message to 'Fuse_index0__selector_cases_0_uses' from Bernoulli factor
				this.Fuse_index0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.burning[index0], this.CPTBurning_rep_F[index0]));
			}
			this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone = true;
			this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of Burning and numExample</summary>
		private void Changed_Burning_numExample()
		{
			if (this.Changed_Burning_numExample_isDone) {
				return ;
			}
			this.Burning_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Burning_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Burning_marginal, this.burning);
			this.Changed_Burning_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numberOfIterationsDecreased and numExample and PaperJam and ProbDrumPrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbTonerPrior and Quality and must reset on changes to Burning and ProbBurningPrior and ProbFusePrior and ProbRollerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40(bool initialise)
		{
			if (this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone&&((!initialise)||this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0_2_1__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_1__selector_uses_F_marginal[index0]);
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][0], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 0, this.Roller_index0_2_1__selector_uses_F[index0][0]);
				// Message to 'Fuse_index0__selector_cases_1_uses' from Cases factor
				this.Fuse_index0__selector_cases_1_uses_B[index0][24] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0_2_1__selector_cases_B[index0], this.Roller_index0_2_1__selector_uses_F[index0][0]));
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][2], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 2, this.Roller_index0_2_1__selector_uses_F[index0][2]);
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0][1], this.Roller_index0_2_1__selector_uses_F_marginal[index0], 1, this.Roller_index0_2_1__selector_uses_F[index0][1]);
				// Message to 'Fuse_index0__selector_cases_1_uses' from Replicate factor
				this.Fuse_index0__selector_cases_1_uses_B[index0][23] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_1__selector_uses_F[index0]));
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0], this.Roller_index0_2_0__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0_2_0__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_0__selector_uses_F_marginal[index0]);
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][0], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 0, this.Roller_index0_2_0__selector_uses_F[index0][0]);
				// Message to 'Fuse_index0__selector_cases_0_uses' from Cases factor
				this.Fuse_index0__selector_cases_0_uses_B[index0][24] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0_2_0__selector_cases_B[index0], this.Roller_index0_2_0__selector_uses_F[index0][0]));
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][2], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 2, this.Roller_index0_2_0__selector_uses_F[index0][2]);
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0][1], this.Roller_index0_2_0__selector_uses_F_marginal[index0], 1, this.Roller_index0_2_0__selector_uses_F[index0][1]);
				// Message to 'Fuse_index0__selector_cases_0_uses' from Replicate factor
				this.Fuse_index0__selector_cases_0_uses_B[index0][23] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0_2_0__selector_uses_B[index0], this.Roller_uses_F[index0][1], this.Roller_index0_2_0__selector_uses_F[index0]));
			}
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = true;
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numberOfIterationsDecreased and numExample and ProbDrumPrior and ProbMultPagesPrior and ProbPaperPrior and ProbQualityPrior and ProbTonerPrior and Quality and must reset on changes to Burning and PaperJam and ProbBurningPrior and ProbFusePrior and ProbPaperJamPrior and ProbRollerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39(bool initialise)
		{
			if (this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone&&((!initialise)||this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised)) {
				return ;
			}
			// Message to 'ProbPaper_rep' from Replicate factor
			this.ProbPaper_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbPaper_rep_B, this.ProbPaper_rep_B_toDef);
			// Message to 'ProbPaper_rep' from Replicate factor
			this.ProbPaper_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbPaper_rep_B_toDef, this.probPaperPrior, this.ProbPaper_rep_F_marginal);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'ProbPaper_rep' from Replicate factor
				this.ProbPaper_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbPaper_rep_B[index0], this.ProbPaper_rep_F_marginal, index0, this.ProbPaper_rep_F[index0]);
				// Message to 'Paper' from Bernoulli factor
				this.Paper_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbPaper_rep_F[index0]);
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_F_index0__marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_uses_B_index0__toDef[index0], this.Paper_F[index0], this.Paper_uses_F_index0__marginal[index0]);
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B_toDef[index0], this.Paper_uses_F_index0__marginal[index0], 2, this.Paper_uses_F[index0][2]);
				// Message to 'Paper_index0__selector_uses' from Replicate factor
				this.Paper_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][2], this.Paper_index0__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0__selector_uses' from Replicate factor
				this.Paper_index0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0__selector_uses_B[index0][1], this.Paper_index0__selector_uses_F_marginal[index0], 1, this.Paper_index0__selector_uses_F[index0][1]);
				// Message to 'Roller_uses' from EnterPartial factor
				this.Roller_uses_B[index0][0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Roller_index0__B[index0], this.Paper_index0__selector_uses_F[index0][1], this.Roller_uses_F[index0][0], new int[2] {0, 1}, this.Roller_uses_B[index0][0]);
				// Message to 'Roller_uses' from Replicate factor
				this.Roller_uses_F[index0][1] = ReplicateOp_NoDivide.UsesAverageConditional<Bernoulli>(this.Roller_uses_B[index0], this.Roller_F[index0], 1, this.Roller_uses_F[index0][1]);
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_uses_B[index0][1], this.Paper_uses_F_index0__marginal[index0], 1, this.Paper_uses_F[index0][1]);
			}
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = true;
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numberOfIterationsDecreased and numExample and ProbDrumPrior and ProbMultPagesPrior and ProbPaperPrior and ProbQualityPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled and must reset on changes to Burning and PaperJam and ProbBurningPrior and ProbFusePrior and ProbPaperJamPrior and ProbRollerPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43(bool initialise)
		{
			if (this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone&&((!initialise)||this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0], this.Paper_index0_4_1__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_4_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_1__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][0], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_4_1__selector_uses_F[index0][0]);
				// Message to 'Fuse_index0__selector_cases_1_uses' from Cases factor
				this.Fuse_index0__selector_cases_1_uses_B[index0][9] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_4_1__selector_cases_B[index0], this.Paper_index0_4_1__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][2], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_4_1__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0][1], this.Paper_index0_4_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_4_1__selector_uses_F[index0][1]);
				// Message to 'Fuse_index0__selector_cases_1_uses' from Replicate factor
				this.Fuse_index0__selector_cases_1_uses_B[index0][8] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_4_1__selector_uses_B[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_1__selector_uses_F[index0]));
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0], this.Paper_index0_4_0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_4_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_0__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][0], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_4_0__selector_uses_F[index0][0]);
				// Message to 'Fuse_index0__selector_cases_0_uses' from Cases factor
				this.Fuse_index0__selector_cases_0_uses_B[index0][9] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_4_0__selector_cases_B[index0], this.Paper_index0_4_0__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][2], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_4_0__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0][1], this.Paper_index0_4_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_4_0__selector_uses_F[index0][1]);
				// Message to 'Fuse_index0__selector_cases_0_uses' from Replicate factor
				this.Fuse_index0__selector_cases_0_uses_B[index0][8] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_4_0__selector_uses_B[index0], this.Paper_uses_F[index0][1], this.Paper_index0_4_0__selector_uses_F[index0]));
			}
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = true;
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numberOfIterationsDecreased and numExample and ProbDrumPrior and ProbMultPagesPrior and ProbQualityPrior and ProbTonerPrior and Quality and must reset on changes to Burning and PaperJam and ProbBurningPrior and ProbFusePrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38(bool initialise)
		{
			if (this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone&&((!initialise)||this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_B_index0__toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_uses_B[index0], this.Paper_uses_B_index0__toDef[index0]);
				// Message to 'ProbPaper_rep' from Bernoulli factor
				this.ProbPaper_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Paper_uses_B_index0__toDef[index0], this.ProbPaper_rep_F[index0]);
			}
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = true;
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numberOfIterationsDecreased and numExample and ProbMultPagesPrior and must reset on changes to Burning and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32(bool initialise)
		{
			if (this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone&&((!initialise)||this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Roller_index0__1__selector_cases_1_uses' from Bernoulli factor
				this.Roller_index0__1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item1_rep2_F[index0]));
				// Message to 'Roller_index0__1__selector_cases_1' from Replicate factor
				this.Roller_index0__1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__1__selector_cases_1_uses_B[index0], this.Roller_index0__1__selector_cases_1_B[index0]);
				// Message to 'Roller_index0__1__selector_cases' from Copy factor
				this.Roller_index0__1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__1__selector_cases_B[index0][1], this.Roller_index0__1__selector_cases_1_B[index0]);
				// Message to 'Roller_index0__1__selector_cases_0_uses' from Bernoulli factor
				this.Roller_index0__1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item0_rep2_F[index0]));
				// Message to 'Roller_index0__1__selector_cases_0' from Replicate factor
				this.Roller_index0__1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__1__selector_cases_0_uses_B[index0], this.Roller_index0__1__selector_cases_0_B[index0]);
				// Message to 'Roller_index0__1__selector_cases' from Copy factor
				this.Roller_index0__1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__1__selector_cases_B[index0][0], this.Roller_index0__1__selector_cases_0_B[index0]);
				// Message to 'Roller_index0__1__selector_uses' from Cases factor
				this.Roller_index0__1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0__1__selector_cases_B[index0]);
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0], this.Roller_index0__1__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0_' from Copy factor
				this.Roller_index0__B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__B[index0][1], this.Roller_index0__1__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0__0__selector_cases_1_uses' from Bernoulli factor
				this.Roller_index0__0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item1_rep_F[index0]));
				// Message to 'Roller_index0__0__selector_cases_1' from Replicate factor
				this.Roller_index0__0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__0__selector_cases_1_uses_B[index0], this.Roller_index0__0__selector_cases_1_B[index0]);
				// Message to 'Roller_index0__0__selector_cases' from Copy factor
				this.Roller_index0__0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__0__selector_cases_B[index0][1], this.Roller_index0__0__selector_cases_1_B[index0]);
				// Message to 'Roller_index0__0__selector_cases_0_uses' from Bernoulli factor
				this.Roller_index0__0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.multPages[index0], this.CPTMultPages_item0_rep_F[index0]));
				// Message to 'Roller_index0__0__selector_cases_0' from Replicate factor
				this.Roller_index0__0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0__0__selector_cases_0_uses_B[index0], this.Roller_index0__0__selector_cases_0_B[index0]);
				// Message to 'Roller_index0__0__selector_cases' from Copy factor
				this.Roller_index0__0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__0__selector_cases_B[index0][0], this.Roller_index0__0__selector_cases_0_B[index0]);
				// Message to 'Roller_index0__0__selector_uses' from Cases factor
				this.Roller_index0__0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0__0__selector_cases_B[index0]);
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0], this.Roller_index0__0__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0_' from Copy factor
				this.Roller_index0__B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0__B[index0][0], this.Roller_index0__0__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__1__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0]);
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][0], this.Roller_index0__1__selector_uses_F_marginal[index0], 0, this.Roller_index0__1__selector_uses_F[index0][0]);
				// Message to 'Paper_index0__selector_cases_1_uses' from Cases factor
				this.Paper_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0__1__selector_cases_B[index0], this.Roller_index0__1__selector_uses_F[index0][0]));
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][2], this.Roller_index0__1__selector_uses_F_marginal[index0], 2, this.Roller_index0__1__selector_uses_F[index0][2]);
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0][1], this.Roller_index0__1__selector_uses_F_marginal[index0], 1, this.Roller_index0__1__selector_uses_F[index0][1]);
				// Message to 'Paper_index0__selector_cases_1_uses' from Replicate factor
				this.Paper_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0__1__selector_uses_B[index0], this.Roller_uses_F[index0][0], this.Roller_index0__1__selector_uses_F[index0]));
				// Message to 'Paper_index0__selector_cases_1' from Replicate factor
				this.Paper_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0__selector_cases_1_uses_B[index0], this.Paper_index0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0__selector_cases' from Copy factor
				this.Paper_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__selector_cases_B[index0][1], this.Paper_index0__selector_cases_1_B[index0]);
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Roller_index0__0__selector_uses_B_toDef[index0], this.Roller_uses_F[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0]);
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][0], this.Roller_index0__0__selector_uses_F_marginal[index0], 0, this.Roller_index0__0__selector_uses_F[index0][0]);
				// Message to 'Paper_index0__selector_cases_0_uses' from Cases factor
				this.Paper_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Roller_index0__0__selector_cases_B[index0], this.Roller_index0__0__selector_uses_F[index0][0]));
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][2], this.Roller_index0__0__selector_uses_F_marginal[index0], 2, this.Roller_index0__0__selector_uses_F[index0][2]);
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0][1], this.Roller_index0__0__selector_uses_F_marginal[index0], 1, this.Roller_index0__0__selector_uses_F[index0][1]);
				// Message to 'Paper_index0__selector_cases_0_uses' from Replicate factor
				this.Paper_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Roller_index0__0__selector_uses_B[index0], this.Roller_uses_F[index0][0], this.Roller_index0__0__selector_uses_F[index0]));
				// Message to 'Paper_index0__selector_cases_0' from Replicate factor
				this.Paper_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0__selector_cases_0_uses_B[index0], this.Paper_index0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0__selector_cases' from Copy factor
				this.Paper_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__selector_cases_B[index0][0], this.Paper_index0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0__selector_uses' from Cases factor
				this.Paper_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0__selector_cases_B[index0]);
				// Message to 'Paper_index0__selector_uses' from Replicate factor
				this.Paper_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0__selector_uses_B[index0], this.Paper_index0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_uses' from Copy factor
				this.Paper_uses_B[index0][2] = ArrayHelper.SetTo<Bernoulli>(this.Paper_uses_B[index0][2], this.Paper_index0__selector_uses_B_toDef[index0]);
			}
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone = true;
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of MultPages and numExample</summary>
		private void Changed_MultPages_numExample()
		{
			if (this.Changed_MultPages_numExample_isDone) {
				return ;
			}
			this.MultPages_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.MultPages_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.MultPages_marginal, this.multPages);
			this.Changed_MultPages_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised)) {
				return ;
			}
			// Message to 'CPTBurning_rep' from Replicate factor
			this.CPTBurning_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTBurning_F[0]);
			// Message to 'CPTBurning_rep' from Replicate factor
			this.CPTBurning_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTBurning_F[0]);
			// Message to 'CPTBurning_rep2' from Replicate factor
			this.CPTBurning_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTBurning_F[1]);
			// Message to 'CPTBurning_rep2' from Replicate factor
			this.CPTBurning_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTBurning_F[1]);
			// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
			this.CPTQuality_item0_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[0][0][0]);
			// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
			this.CPTQuality_item0_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[0][0][0]);
			// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
			this.CPTQuality_item1_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[1][0][0]);
			// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
			this.CPTQuality_item1_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[1][0][0]);
			// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
			this.CPTQuality_item0_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[0][1][0]);
			// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
			this.CPTQuality_item0_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[0][1][0]);
			// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
			this.CPTQuality_item1_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[1][1][0]);
			// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
			this.CPTQuality_item1_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[1][1][0]);
			// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
			this.CPTQuality_item0_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[0][0][1]);
			// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
			this.CPTQuality_item0_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[0][0][1]);
			// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
			this.CPTQuality_item1_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[1][0][1]);
			// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
			this.CPTQuality_item1_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[1][0][1]);
			// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
			this.CPTQuality_item0_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[0][1][1]);
			// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
			this.CPTQuality_item0_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[0][1][1]);
			// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
			this.CPTQuality_item1_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTQuality_F[1][1][1]);
			// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
			this.CPTQuality_item1_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTQuality_F[1][1][1]);
			// Message to 'CPTWrinkled_item0_rep' from Replicate factor
			this.CPTWrinkled_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTWrinkled_F[0][0]);
			// Message to 'CPTWrinkled_item0_rep' from Replicate factor
			this.CPTWrinkled_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTWrinkled_F[0][0]);
			// Message to 'CPTWrinkled_item1_rep' from Replicate factor
			this.CPTWrinkled_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTWrinkled_F[1][0]);
			// Message to 'CPTWrinkled_item1_rep' from Replicate factor
			this.CPTWrinkled_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTWrinkled_F[1][0]);
			// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
			this.CPTWrinkled_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTWrinkled_F[0][1]);
			// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
			this.CPTWrinkled_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTWrinkled_F[0][1]);
			// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
			this.CPTWrinkled_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTWrinkled_F[1][1]);
			// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
			this.CPTWrinkled_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTWrinkled_F[1][1]);
			// Message to 'CPTMultPages_item0_rep' from Replicate factor
			this.CPTMultPages_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTMultPages_F[0][0]);
			// Message to 'CPTMultPages_item0_rep' from Replicate factor
			this.CPTMultPages_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTMultPages_F[0][0]);
			// Message to 'CPTMultPages_item1_rep' from Replicate factor
			this.CPTMultPages_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTMultPages_F[1][0]);
			// Message to 'CPTMultPages_item1_rep' from Replicate factor
			this.CPTMultPages_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTMultPages_F[1][0]);
			// Message to 'CPTMultPages_item0_rep2' from Replicate factor
			this.CPTMultPages_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTMultPages_F[0][1]);
			// Message to 'CPTMultPages_item0_rep2' from Replicate factor
			this.CPTMultPages_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTMultPages_F[0][1]);
			// Message to 'CPTMultPages_item1_rep2' from Replicate factor
			this.CPTMultPages_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTMultPages_F[1][1]);
			// Message to 'CPTMultPages_item1_rep2' from Replicate factor
			this.CPTMultPages_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTMultPages_F[1][1]);
			// Message to 'CPTPaperJam_item0_rep' from Replicate factor
			this.CPTPaperJam_item0_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTPaperJam_F[0][0]);
			// Message to 'CPTPaperJam_item0_rep' from Replicate factor
			this.CPTPaperJam_item0_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTPaperJam_F[0][0]);
			// Message to 'CPTPaperJam_item1_rep' from Replicate factor
			this.CPTPaperJam_item1_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTPaperJam_F[1][0]);
			// Message to 'CPTPaperJam_item1_rep' from Replicate factor
			this.CPTPaperJam_item1_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTPaperJam_F[1][0]);
			// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
			this.CPTPaperJam_item0_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTPaperJam_F[0][1]);
			// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
			this.CPTPaperJam_item0_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTPaperJam_F[0][1]);
			// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
			this.CPTPaperJam_item1_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.CPTPaperJam_F[1][1]);
			// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
			this.CPTPaperJam_item1_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.CPTPaperJam_F[1][1]);
			this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				this.ProbFuse_rep_F[index0] = Beta.Uniform();
				this.Fuse_index0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Fuse_index0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Fuse_index0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][8] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][9] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][23] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][24] = Bernoulli.Uniform();
				this.Fuse_F[index0] = Bernoulli.Uniform();
				// Message to 'Fuse_index0__selector_uses' from Replicate factor
				this.Fuse_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Fuse_F[index0]);
				// Message to 'Fuse_index0__selector_uses' from Replicate factor
				this.Fuse_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Fuse_F[index0]);
				this.CPTBurning_rep_B[index0] = Beta.Uniform();
				this.CPTBurning_rep_F[index0] = Beta.Uniform();
				this.Paper_uses_F[index0][0] = Bernoulli.Uniform();
				this.Paper_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_uses_F[index0][2] = Bernoulli.Uniform();
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][0]);
				this.Drum_index0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Drum_index0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Drum_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.vbool26__0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.vbool26__0__selector_cases_0_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][6] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_2_0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26_F[index0] = Bernoulli.Uniform();
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool26_F[index0]);
				this.vbool26__0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_F[index0][3] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_F[index0][4] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_F[index0][5] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTQuality_item0_item0_rep_B[index0] = Beta.Uniform();
				this.CPTQuality_item0_item0_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_2_0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTQuality_item1_item0_rep_B[index0] = Beta.Uniform();
				this.CPTQuality_item1_item0_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_2_0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][6] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_2_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTQuality_item0_item1_rep_B[index0] = Beta.Uniform();
				this.CPTQuality_item0_item1_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_2_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTQuality_item1_item1_rep_B[index0] = Beta.Uniform();
				this.CPTQuality_item1_item1_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_2_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool26_F[index0]);
				this.vbool26__1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.vbool26__1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.vbool26__1__selector_cases_0_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][6] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_3_0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_3_0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.vbool26_F[index0]);
				this.vbool26__1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_F[index0][3] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_F[index0][4] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_F[index0][5] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTQuality_item0_item0_rep2_B[index0] = Beta.Uniform();
				this.CPTQuality_item0_item0_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_3_0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTQuality_item1_item0_rep2_B[index0] = Beta.Uniform();
				this.CPTQuality_item1_item0_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_3_0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][6] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_3_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_3_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTQuality_item0_item1_rep2_B[index0] = Beta.Uniform();
				this.CPTQuality_item0_item1_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_3_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTQuality_item1_item1_rep2_B[index0] = Beta.Uniform();
				this.CPTQuality_item1_item1_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_3_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.vbool26_F[index0]);
				this.ProbToner_rep_B[index0] = Beta.Uniform();
				this.ProbToner_rep_F[index0] = Beta.Uniform();
				this.Toner_F[index0] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.Drum_F[index0] = Bernoulli.Uniform();
				// Message to 'Drum_index0__selector_uses' from Replicate factor
				this.Drum_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Drum_F[index0]);
				this.ProbDrum_rep_B[index0] = Beta.Uniform();
				this.ProbDrum_rep_F[index0] = Beta.Uniform();
				// Message to 'Drum_index0__selector_uses' from Replicate factor
				this.Drum_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Drum_F[index0]);
				for(int _gateind4 = 0; _gateind4<2; _gateind4++) {
					this.Paper_index0__B[index0][_gateind4] = Bernoulli.Uniform();
				}
				for(int _gateind5 = 0; _gateind5<2; _gateind5++) {
					this.Paper_index0_2_B[index0][_gateind5] = Bernoulli.Uniform();
				}
				this.Paper_index0__0__B[index0] = Bernoulli.Uniform();
				for(int _gateind18 = 0; _gateind18<2; _gateind18++) {
					this.Paper_index0_3_B[index0][_gateind18] = Bernoulli.Uniform();
				}
				this.Paper_index0__1__B[index0] = Bernoulli.Uniform();
				this.Paper_uses_B[index0][0] = Bernoulli.Uniform();
				this.Paper_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_4_0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_4_0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][1]);
				this.Paper_index0_4_0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTWrinkled_item0_rep_B[index0] = Beta.Uniform();
				this.CPTWrinkled_item0_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_4_0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTWrinkled_item1_rep_B[index0] = Beta.Uniform();
				this.CPTWrinkled_item1_rep_F[index0] = Beta.Uniform();
				this.Paper_index0_4_0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'Paper_index0_4_0__selector_uses' from Replicate factor
				this.Paper_index0_4_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][1]);
				this.Paper_index0_4_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0_4_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0_4_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][1]);
				this.Paper_index0_4_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTWrinkled_item0_rep2_B[index0] = Beta.Uniform();
				this.CPTWrinkled_item0_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_4_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTWrinkled_item1_rep2_B[index0] = Beta.Uniform();
				this.CPTWrinkled_item1_rep2_F[index0] = Beta.Uniform();
				this.Paper_index0_4_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'Paper_index0_4_1__selector_uses' from Replicate factor
				this.Paper_index0_4_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][1]);
				this.Paper_index0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Paper_index0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Paper_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.Uniform();
				// Message to 'Paper_index0__selector_uses' from Replicate factor
				this.Paper_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_uses_F[index0][2]);
				// Message to 'Paper_index0__selector_uses' from Replicate factor
				this.Paper_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_uses_F[index0][2]);
				this.Paper_index0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_F[index0][3] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_F[index0][4] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_F[index0][5] = Bernoulli.Uniform();
				for(int _gateind40 = 0; _gateind40<2; _gateind40++) {
					this.Roller_index0__B[index0][_gateind40] = Bernoulli.Uniform();
				}
				this.Roller_index0__0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Roller_index0__0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Roller_index0__0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_uses_F[index0][0] = Bernoulli.Uniform();
				this.Roller_uses_F[index0][1] = Bernoulli.Uniform();
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Roller_uses_F[index0][0]);
				this.Roller_index0__0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTMultPages_item0_rep_B[index0] = Beta.Uniform();
				this.CPTMultPages_item0_rep_F[index0] = Beta.Uniform();
				this.Roller_index0__0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTMultPages_item1_rep_B[index0] = Beta.Uniform();
				this.CPTMultPages_item1_rep_F[index0] = Beta.Uniform();
				this.Roller_index0__0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'Roller_index0__0__selector_uses' from Replicate factor
				this.Roller_index0__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Roller_uses_F[index0][0]);
				this.Roller_index0__1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Roller_index0__1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Roller_index0__1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Roller_uses_F[index0][0]);
				this.Roller_index0__1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTMultPages_item0_rep2_B[index0] = Beta.Uniform();
				this.CPTMultPages_item0_rep2_F[index0] = Beta.Uniform();
				this.Roller_index0__1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTMultPages_item1_rep2_B[index0] = Beta.Uniform();
				this.CPTMultPages_item1_rep2_F[index0] = Beta.Uniform();
				this.Roller_index0__1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				// Message to 'Roller_index0__1__selector_uses' from Replicate factor
				this.Roller_index0__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Roller_uses_F[index0][0]);
				this.Roller_uses_B[index0][0] = Bernoulli.Uniform();
				this.Roller_uses_B[index0][1] = Bernoulli.Uniform();
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Roller_uses_F[index0][1]);
				// Message to 'Roller_index0_2_0__selector_uses' from Replicate factor
				this.Roller_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Roller_uses_F[index0][1]);
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Roller_uses_F[index0][1]);
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Roller_uses_F[index0][1]);
				this.Roller_index0_2_0__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Roller_index0_2_0__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Roller_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTPaperJam_item0_rep_B[index0] = Beta.Uniform();
				this.CPTPaperJam_item0_rep_F[index0] = Beta.Uniform();
				this.Roller_index0_2_0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTPaperJam_item1_rep_B[index0] = Beta.Uniform();
				this.CPTPaperJam_item1_rep_F[index0] = Beta.Uniform();
				this.Roller_index0_2_0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_uses_B[index0][0] = Bernoulli.Uniform();
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					this.Roller_index0_2_1__selector_cases_B[index0][_ind0] = Bernoulli.Uniform();
				}
				this.Roller_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_uses_F[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_uses_F[index0][0] = Bernoulli.Uniform();
				this.CPTPaperJam_item0_rep2_B[index0] = Beta.Uniform();
				this.CPTPaperJam_item0_rep2_F[index0] = Beta.Uniform();
				this.Roller_index0_2_1__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.CPTPaperJam_item1_rep2_B[index0] = Beta.Uniform();
				this.CPTPaperJam_item1_rep2_F[index0] = Beta.Uniform();
				this.Roller_index0_2_1__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.Probroller_rep_F[index0] = Beta.Uniform();
				this.Roller_F[index0] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.Paper_F[index0] = Bernoulli.Uniform();
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_B_index0__toDef[index0] = ReplicateOp_Divide.ToDefInit<Bernoulli>(this.Paper_F[index0]);
				this.ProbPaper_rep_B[index0] = Beta.Uniform();
				this.ProbPaper_rep_F[index0] = Beta.Uniform();
				// Message to 'Paper_uses' from Replicate factor
				this.Paper_uses_F_index0__marginal[index0] = ReplicateOp_Divide.MarginalInit<Bernoulli>(this.Paper_F[index0]);
				this.Fuse_index0__selector_cases_0_B[index0] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][8] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][9] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][23] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][24] = Bernoulli.Uniform();
				this.CPTBurning_rep2_B[index0] = Beta.Uniform();
				this.CPTBurning_rep2_F[index0] = Beta.Uniform();
				this.Fuse_index0__selector_cases_1_B[index0] = Bernoulli.Uniform();
				this.ProbFuse_rep_B[index0] = Beta.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and PaperJam and ProbPaperJamPrior and must reset on changes to Burning and MultPages and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Roller_index0_2_1__selector_cases_1_uses' from Bernoulli factor
				this.Roller_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item1_rep2_F[index0]));
				// Message to 'Roller_index0_2_1__selector_cases_1' from Replicate factor
				this.Roller_index0_2_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_cases_1_uses_B[index0], this.Roller_index0_2_1__selector_cases_1_B[index0]);
				// Message to 'Roller_index0_2_1__selector_cases' from Copy factor
				this.Roller_index0_2_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_1__selector_cases_B[index0][1], this.Roller_index0_2_1__selector_cases_1_B[index0]);
				// Message to 'Roller_index0_2_1__selector_cases_0_uses' from Bernoulli factor
				this.Roller_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item0_rep2_F[index0]));
				// Message to 'Roller_index0_2_1__selector_cases_0' from Replicate factor
				this.Roller_index0_2_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_1__selector_cases_0_uses_B[index0], this.Roller_index0_2_1__selector_cases_0_B[index0]);
				// Message to 'Roller_index0_2_1__selector_cases' from Copy factor
				this.Roller_index0_2_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_1__selector_cases_B[index0][0], this.Roller_index0_2_1__selector_cases_0_B[index0]);
				// Message to 'Roller_index0_2_1__selector_uses' from Cases factor
				this.Roller_index0_2_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0_2_1__selector_cases_B[index0]);
				// Message to 'Roller_index0_2_1__selector_uses' from Replicate factor
				this.Roller_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Roller_index0_2_1__selector_uses_B[index0], this.Roller_index0_2_1__selector_uses_B_toDef[index0]);
				// Message to 'Roller_index0_2_0__selector_cases_1_uses' from Bernoulli factor
				this.Roller_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item1_rep_F[index0]));
				// Message to 'Roller_index0_2_0__selector_cases_1' from Replicate factor
				this.Roller_index0_2_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_cases_1_uses_B[index0], this.Roller_index0_2_0__selector_cases_1_B[index0]);
				// Message to 'Roller_index0_2_0__selector_cases' from Copy factor
				this.Roller_index0_2_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_0__selector_cases_B[index0][1], this.Roller_index0_2_0__selector_cases_1_B[index0]);
				// Message to 'Roller_index0_2_0__selector_cases_0_uses' from Bernoulli factor
				this.Roller_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.paperJam[index0], this.CPTPaperJam_item0_rep_F[index0]));
				// Message to 'Roller_index0_2_0__selector_cases_0' from Replicate factor
				this.Roller_index0_2_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Roller_index0_2_0__selector_cases_0_uses_B[index0], this.Roller_index0_2_0__selector_cases_0_B[index0]);
				// Message to 'Roller_index0_2_0__selector_cases' from Copy factor
				this.Roller_index0_2_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Roller_index0_2_0__selector_cases_B[index0][0], this.Roller_index0_2_0__selector_cases_0_B[index0]);
				// Message to 'Roller_index0_2_0__selector_uses' from Cases factor
				this.Roller_index0_2_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Roller_index0_2_0__selector_cases_B[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbBurningPrior and must reset on changes to Burning and MultPages and PaperJam and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'CPTBurning_rep2' from Replicate factor
				this.CPTBurning_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTBurning_rep2_B[index0], this.CPTBurning_rep2_F_marginal, index0, this.CPTBurning_rep2_F[index0]);
				// Message to 'CPTBurning_rep' from Replicate factor
				this.CPTBurning_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTBurning_rep_B[index0], this.CPTBurning_rep_F_marginal, index0, this.CPTBurning_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbDrumPrior and ProbQualityPrior and ProbTonerPrior and Quality and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised)) {
				return ;
			}
			// Message to 'ProbDrum_rep' from Replicate factor
			this.ProbDrum_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.ProbDrum_rep_B, this.ProbDrum_rep_B_toDef);
			// Message to 'ProbDrum_rep' from Replicate factor
			this.ProbDrum_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbDrum_rep_B_toDef, this.probDrumPrior, this.ProbDrum_rep_F_marginal);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'ProbDrum_rep' from Replicate factor
				this.ProbDrum_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbDrum_rep_B[index0], this.ProbDrum_rep_F_marginal, index0, this.ProbDrum_rep_F[index0]);
				// Message to 'Drum' from Bernoulli factor
				this.Drum_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbDrum_rep_F[index0]);
				// Message to 'Drum_index0__selector_uses' from Replicate factor
				this.Drum_index0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Drum_index0__selector_uses_B_toDef[index0], this.Drum_F[index0], this.Drum_index0__selector_uses_F_marginal[index0]);
				// Message to 'Drum_index0__selector_uses' from Replicate factor
				this.Drum_index0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Drum_index0__selector_uses_B[index0][2], this.Drum_index0__selector_uses_F_marginal[index0], 2, this.Drum_index0__selector_uses_F[index0][2]);
				// Message to 'Paper_uses' from EnterPartial factor
				this.Paper_uses_B[index0][0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0__B[index0], this.Drum_index0__selector_uses_F[index0][2], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_uses_B[index0][0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbMultPagesPrior and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'CPTMultPages_item1_rep2' from Replicate factor
				this.CPTMultPages_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item1_rep2_B[index0], this.CPTMultPages_item1_rep2_F_marginal, index0, this.CPTMultPages_item1_rep2_F[index0]);
				// Message to 'CPTMultPages_item0_rep2' from Replicate factor
				this.CPTMultPages_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item0_rep2_B[index0], this.CPTMultPages_item0_rep2_F_marginal, index0, this.CPTMultPages_item0_rep2_F[index0]);
				// Message to 'CPTMultPages_item1_rep' from Replicate factor
				this.CPTMultPages_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item1_rep_B[index0], this.CPTMultPages_item1_rep_F_marginal, index0, this.CPTMultPages_item1_rep_F[index0]);
				// Message to 'CPTMultPages_item0_rep' from Replicate factor
				this.CPTMultPages_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTMultPages_item0_rep_B[index0], this.CPTMultPages_item0_rep_F_marginal, index0, this.CPTMultPages_item0_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbPaperJamPrior and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
				this.CPTPaperJam_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item1_rep2_B[index0], this.CPTPaperJam_item1_rep2_F_marginal, index0, this.CPTPaperJam_item1_rep2_F[index0]);
				// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
				this.CPTPaperJam_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item0_rep2_B[index0], this.CPTPaperJam_item0_rep2_F_marginal, index0, this.CPTPaperJam_item0_rep2_F[index0]);
				// Message to 'CPTPaperJam_item1_rep' from Replicate factor
				this.CPTPaperJam_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item1_rep_B[index0], this.CPTPaperJam_item1_rep_F_marginal, index0, this.CPTPaperJam_item1_rep_F[index0]);
				// Message to 'CPTPaperJam_item0_rep' from Replicate factor
				this.CPTPaperJam_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTPaperJam_item0_rep_B[index0], this.CPTPaperJam_item0_rep_F_marginal, index0, this.CPTPaperJam_item0_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbQualityPrior and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
				this.CPTQuality_item1_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item1_rep2_B[index0], this.CPTQuality_item1_item1_rep2_F_marginal, index0, this.CPTQuality_item1_item1_rep2_F[index0]);
				// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
				this.CPTQuality_item0_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item1_rep2_B[index0], this.CPTQuality_item0_item1_rep2_F_marginal, index0, this.CPTQuality_item0_item1_rep2_F[index0]);
				// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
				this.CPTQuality_item1_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item0_rep2_B[index0], this.CPTQuality_item1_item0_rep2_F_marginal, index0, this.CPTQuality_item1_item0_rep2_F[index0]);
				// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
				this.CPTQuality_item0_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item0_rep2_B[index0], this.CPTQuality_item0_item0_rep2_F_marginal, index0, this.CPTQuality_item0_item0_rep2_F[index0]);
				// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
				this.CPTQuality_item1_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item1_rep_B[index0], this.CPTQuality_item1_item1_rep_F_marginal, index0, this.CPTQuality_item1_item1_rep_F[index0]);
				// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
				this.CPTQuality_item0_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item1_rep_B[index0], this.CPTQuality_item0_item1_rep_F_marginal, index0, this.CPTQuality_item0_item1_rep_F[index0]);
				// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
				this.CPTQuality_item1_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item1_item0_rep_B[index0], this.CPTQuality_item1_item0_rep_F_marginal, index0, this.CPTQuality_item1_item0_rep_F[index0]);
				// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
				this.CPTQuality_item0_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTQuality_item0_item0_rep_B[index0], this.CPTQuality_item0_item0_rep_F_marginal, index0, this.CPTQuality_item0_item0_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbQualityPrior and ProbTonerPrior and Quality and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool26__1__selector_uses_B[index0], this.vbool26__1__selector_uses_B_toDef[index0]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26__1__selector_uses_B_toDef[index0], this.vbool26_F[index0], this.vbool26__1__selector_uses_F_marginal[index0]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][1], this.vbool26__1__selector_uses_F_marginal[index0], 1, this.vbool26__1__selector_uses_F[index0][1]);
				// Message to 'Paper_index0__1_' from EnterPartial factor
				this.Paper_index0__1__B[index0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0_3_B[index0], this.vbool26__1__selector_uses_F[index0][1], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_index0__1__B[index0]);
				// Message to 'Paper_index0_' from Copy factor
				this.Paper_index0__B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__B[index0][1], this.Paper_index0__1__B[index0]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.vbool26__0__selector_uses_B[index0], this.vbool26__0__selector_uses_B_toDef[index0]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.vbool26__0__selector_uses_B_toDef[index0], this.vbool26_F[index0], this.vbool26__0__selector_uses_F_marginal[index0]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][1], this.vbool26__0__selector_uses_F_marginal[index0], 1, this.vbool26__0__selector_uses_F[index0][1]);
				// Message to 'Paper_index0__0_' from EnterPartial factor
				this.Paper_index0__0__B[index0] = BeliefPropagationGateEnterPartialOp.ValueAverageConditional<Bernoulli>(this.Paper_index0_2_B[index0], this.vbool26__0__selector_uses_F[index0][1], this.Paper_uses_F[index0][0], new int[2] {0, 1}, this.Paper_index0__0__B[index0]);
				// Message to 'Paper_index0_' from Copy factor
				this.Paper_index0__B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0__B[index0][0], this.Paper_index0__0__B[index0]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][0], this.vbool26__1__selector_uses_F_marginal[index0], 0, this.vbool26__1__selector_uses_F[index0][0]);
				// Message to 'Drum_index0__selector_cases_1_uses' from Cases factor
				this.Drum_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.vbool26__1__selector_cases_B[index0], this.vbool26__1__selector_uses_F[index0][0]));
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][5], this.vbool26__1__selector_uses_F_marginal[index0], 5, this.vbool26__1__selector_uses_F[index0][5]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][4], this.vbool26__1__selector_uses_F_marginal[index0], 4, this.vbool26__1__selector_uses_F[index0][4]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][3], this.vbool26__1__selector_uses_F_marginal[index0], 3, this.vbool26__1__selector_uses_F[index0][3]);
				// Message to 'vbool26__1__selector_uses' from Replicate factor
				this.vbool26__1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__1__selector_uses_B[index0][2], this.vbool26__1__selector_uses_F_marginal[index0], 2, this.vbool26__1__selector_uses_F[index0][2]);
				// Message to 'Drum_index0__selector_cases_1_uses' from Replicate factor
				this.Drum_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.vbool26__1__selector_uses_B[index0], this.vbool26_F[index0], this.vbool26__1__selector_uses_F[index0]));
				// Message to 'Drum_index0__selector_cases_1' from Replicate factor
				this.Drum_index0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Drum_index0__selector_cases_1_uses_B[index0], this.Drum_index0__selector_cases_1_B[index0]);
				// Message to 'Drum_index0__selector_cases' from Copy factor
				this.Drum_index0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Drum_index0__selector_cases_B[index0][1], this.Drum_index0__selector_cases_1_B[index0]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][0], this.vbool26__0__selector_uses_F_marginal[index0], 0, this.vbool26__0__selector_uses_F[index0][0]);
				// Message to 'Drum_index0__selector_cases_0_uses' from Cases factor
				this.Drum_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.vbool26__0__selector_cases_B[index0], this.vbool26__0__selector_uses_F[index0][0]));
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][5], this.vbool26__0__selector_uses_F_marginal[index0], 5, this.vbool26__0__selector_uses_F[index0][5]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][4], this.vbool26__0__selector_uses_F_marginal[index0], 4, this.vbool26__0__selector_uses_F[index0][4]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][3], this.vbool26__0__selector_uses_F_marginal[index0], 3, this.vbool26__0__selector_uses_F[index0][3]);
				// Message to 'vbool26__0__selector_uses' from Replicate factor
				this.vbool26__0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.vbool26__0__selector_uses_B[index0][2], this.vbool26__0__selector_uses_F_marginal[index0], 2, this.vbool26__0__selector_uses_F[index0][2]);
				// Message to 'Drum_index0__selector_cases_0_uses' from Replicate factor
				this.Drum_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.vbool26__0__selector_uses_B[index0], this.vbool26_F[index0], this.vbool26__0__selector_uses_F[index0]));
				// Message to 'Drum_index0__selector_cases_0' from Replicate factor
				this.Drum_index0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Drum_index0__selector_cases_0_uses_B[index0], this.Drum_index0__selector_cases_0_B[index0]);
				// Message to 'Drum_index0__selector_cases' from Copy factor
				this.Drum_index0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Drum_index0__selector_cases_B[index0][0], this.Drum_index0__selector_cases_0_B[index0]);
				// Message to 'Drum_index0__selector_uses' from Cases factor
				this.Drum_index0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Drum_index0__selector_cases_B[index0]);
				// Message to 'Drum_index0__selector_uses' from Replicate factor
				this.Drum_index0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Drum_index0__selector_uses_B[index0], this.Drum_index0__selector_uses_B_toDef[index0]);
				// Message to 'ProbDrum_rep' from Bernoulli factor
				this.ProbDrum_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(this.Drum_index0__selector_uses_B_toDef[index0], this.ProbDrum_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbQualityPrior and Quality and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Paper_index0_3_1__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_3_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep2_F[index0]));
				// Message to 'Paper_index0_3_1__selector_cases_1' from Replicate factor
				this.Paper_index0_3_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_cases_1_uses_B[index0], this.Paper_index0_3_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_3_1__selector_cases' from Copy factor
				this.Paper_index0_3_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_1__selector_cases_B[index0][1], this.Paper_index0_3_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_3_1__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_3_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep2_F[index0]));
				// Message to 'Paper_index0_3_1__selector_cases_0' from Replicate factor
				this.Paper_index0_3_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_cases_0_uses_B[index0], this.Paper_index0_3_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_3_1__selector_cases' from Copy factor
				this.Paper_index0_3_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_1__selector_cases_B[index0][0], this.Paper_index0_3_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Cases factor
				this.Paper_index0_3_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_3_1__selector_cases_B[index0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0], this.Paper_index0_3_1__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_3' from Copy factor
				this.Paper_index0_3_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_B[index0][1], this.Paper_index0_3_1__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_3_0__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_3_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep2_F[index0]));
				// Message to 'Paper_index0_3_0__selector_cases_1' from Replicate factor
				this.Paper_index0_3_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_cases_1_uses_B[index0], this.Paper_index0_3_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_3_0__selector_cases' from Copy factor
				this.Paper_index0_3_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_0__selector_cases_B[index0][1], this.Paper_index0_3_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_3_0__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_3_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep2_F[index0]));
				// Message to 'Paper_index0_3_0__selector_cases_0' from Replicate factor
				this.Paper_index0_3_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_cases_0_uses_B[index0], this.Paper_index0_3_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_3_0__selector_cases' from Copy factor
				this.Paper_index0_3_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_0__selector_cases_B[index0][0], this.Paper_index0_3_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Cases factor
				this.Paper_index0_3_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_3_0__selector_cases_B[index0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0], this.Paper_index0_3_0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_3' from Copy factor
				this.Paper_index0_3_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_3_B[index0][0], this.Paper_index0_3_0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_3_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_1__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][0], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_3_1__selector_uses_F[index0][0]);
				// Message to 'vbool26__1__selector_cases_1_uses' from Cases factor
				this.vbool26__1__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_3_1__selector_cases_B[index0], this.Paper_index0_3_1__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][2], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_3_1__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_3_1__selector_uses' from Replicate factor
				this.Paper_index0_3_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0][1], this.Paper_index0_3_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_3_1__selector_uses_F[index0][1]);
				// Message to 'vbool26__1__selector_cases_1_uses' from Replicate factor
				this.vbool26__1__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_3_1__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_1__selector_uses_F[index0]));
				// Message to 'vbool26__1__selector_cases_1' from Replicate factor
				this.vbool26__1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__1__selector_cases_1_uses_B[index0], this.vbool26__1__selector_cases_1_B[index0]);
				// Message to 'vbool26__1__selector_cases' from Copy factor
				this.vbool26__1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__1__selector_cases_B[index0][1], this.vbool26__1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_3_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_0__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][0], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_3_0__selector_uses_F[index0][0]);
				// Message to 'vbool26__1__selector_cases_0_uses' from Cases factor
				this.vbool26__1__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_3_0__selector_cases_B[index0], this.Paper_index0_3_0__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][2], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_3_0__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_3_0__selector_uses' from Replicate factor
				this.Paper_index0_3_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0][1], this.Paper_index0_3_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_3_0__selector_uses_F[index0][1]);
				// Message to 'vbool26__1__selector_cases_0_uses' from Replicate factor
				this.vbool26__1__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_3_0__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_3_0__selector_uses_F[index0]));
				// Message to 'vbool26__1__selector_cases_0' from Replicate factor
				this.vbool26__1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__1__selector_cases_0_uses_B[index0], this.vbool26__1__selector_cases_0_B[index0]);
				// Message to 'vbool26__1__selector_cases' from Copy factor
				this.vbool26__1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__1__selector_cases_B[index0][0], this.vbool26__1__selector_cases_0_B[index0]);
				// Message to 'vbool26__1__selector_uses' from Cases factor
				this.vbool26__1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.vbool26__1__selector_cases_B[index0]);
				// Message to 'Paper_index0_2_1__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_2_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item1_rep_F[index0]));
				// Message to 'Paper_index0_2_1__selector_cases_1' from Replicate factor
				this.Paper_index0_2_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_cases_1_uses_B[index0], this.Paper_index0_2_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_2_1__selector_cases' from Copy factor
				this.Paper_index0_2_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_1__selector_cases_B[index0][1], this.Paper_index0_2_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_2_1__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_2_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item1_rep_F[index0]));
				// Message to 'Paper_index0_2_1__selector_cases_0' from Replicate factor
				this.Paper_index0_2_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_cases_0_uses_B[index0], this.Paper_index0_2_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_2_1__selector_cases' from Copy factor
				this.Paper_index0_2_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_1__selector_cases_B[index0][0], this.Paper_index0_2_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Cases factor
				this.Paper_index0_2_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_2_1__selector_cases_B[index0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0], this.Paper_index0_2_1__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_2' from Copy factor
				this.Paper_index0_2_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_B[index0][1], this.Paper_index0_2_1__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_2_0__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_2_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item1_item0_rep_F[index0]));
				// Message to 'Paper_index0_2_0__selector_cases_1' from Replicate factor
				this.Paper_index0_2_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_cases_1_uses_B[index0], this.Paper_index0_2_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_2_0__selector_cases' from Copy factor
				this.Paper_index0_2_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_0__selector_cases_B[index0][1], this.Paper_index0_2_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_2_0__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_2_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.quality[index0], this.CPTQuality_item0_item0_rep_F[index0]));
				// Message to 'Paper_index0_2_0__selector_cases_0' from Replicate factor
				this.Paper_index0_2_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_cases_0_uses_B[index0], this.Paper_index0_2_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_2_0__selector_cases' from Copy factor
				this.Paper_index0_2_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_0__selector_cases_B[index0][0], this.Paper_index0_2_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_2_0__selector_uses' from Cases factor
				this.Paper_index0_2_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_2_0__selector_cases_B[index0]);
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_B_toDef[index0] = ReplicateOp_Divide.ToDef<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0], this.Paper_index0_2_0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_2' from Copy factor
				this.Paper_index0_2_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_2_B[index0][0], this.Paper_index0_2_0__selector_uses_B_toDef[index0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_2_1__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_1__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][0], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 0, this.Paper_index0_2_1__selector_uses_F[index0][0]);
				// Message to 'vbool26__0__selector_cases_1_uses' from Cases factor
				this.vbool26__0__selector_cases_1_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_2_1__selector_cases_B[index0], this.Paper_index0_2_1__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][2], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 2, this.Paper_index0_2_1__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_2_1__selector_uses' from Replicate factor
				this.Paper_index0_2_1__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0][1], this.Paper_index0_2_1__selector_uses_F_marginal[index0], 1, this.Paper_index0_2_1__selector_uses_F[index0][1]);
				// Message to 'vbool26__0__selector_cases_1_uses' from Replicate factor
				this.vbool26__0__selector_cases_1_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_2_1__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_1__selector_uses_F[index0]));
				// Message to 'vbool26__0__selector_cases_1' from Replicate factor
				this.vbool26__0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__0__selector_cases_1_uses_B[index0], this.vbool26__0__selector_cases_1_B[index0]);
				// Message to 'vbool26__0__selector_cases' from Copy factor
				this.vbool26__0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__0__selector_cases_B[index0][1], this.vbool26__0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_F_marginal[index0] = ReplicateOp_Divide.Marginal<Bernoulli>(this.Paper_index0_2_0__selector_uses_B_toDef[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_0__selector_uses_F_marginal[index0]);
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_F[index0][0] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][0], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 0, this.Paper_index0_2_0__selector_uses_F[index0][0]);
				// Message to 'vbool26__0__selector_cases_0_uses' from Cases factor
				this.vbool26__0__selector_cases_0_uses_B[index0][6] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(this.Paper_index0_2_0__selector_cases_B[index0], this.Paper_index0_2_0__selector_uses_F[index0][0]));
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_F[index0][2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][2], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 2, this.Paper_index0_2_0__selector_uses_F[index0][2]);
				// Message to 'Paper_index0_2_0__selector_uses' from Replicate factor
				this.Paper_index0_2_0__selector_uses_F[index0][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0][1], this.Paper_index0_2_0__selector_uses_F_marginal[index0], 1, this.Paper_index0_2_0__selector_uses_F[index0][1]);
				// Message to 'vbool26__0__selector_cases_0_uses' from Replicate factor
				this.vbool26__0__selector_cases_0_uses_B[index0][5] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Bernoulli>(this.Paper_index0_2_0__selector_uses_B[index0], this.Paper_uses_F[index0][0], this.Paper_index0_2_0__selector_uses_F[index0]));
				// Message to 'vbool26__0__selector_cases_0' from Replicate factor
				this.vbool26__0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.vbool26__0__selector_cases_0_uses_B[index0], this.vbool26__0__selector_cases_0_B[index0]);
				// Message to 'vbool26__0__selector_cases' from Copy factor
				this.vbool26__0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.vbool26__0__selector_cases_B[index0][0], this.vbool26__0__selector_cases_0_B[index0]);
				// Message to 'vbool26__0__selector_uses' from Cases factor
				this.vbool26__0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.vbool26__0__selector_cases_B[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbTonerPrior and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'ProbToner_rep' from Replicate factor
				this.ProbToner_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.ProbToner_rep_B[index0], this.ProbToner_rep_F_marginal, index0, this.ProbToner_rep_F[index0]);
				// Message to 'Toner' from Bernoulli factor
				this.Toner_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(this.ProbToner_rep_F[index0]);
				// Message to 'vbool26' from And factor
				this.vbool26_F[index0] = BooleanAndOp.AndAverageConditional(this.Toner_F[index0], this.vBernoulli0);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbWrinkledPrior and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
				this.CPTWrinkled_item1_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item1_rep2_B[index0], this.CPTWrinkled_item1_rep2_F_marginal, index0, this.CPTWrinkled_item1_rep2_F[index0]);
				// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
				this.CPTWrinkled_item0_rep2_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item0_rep2_B[index0], this.CPTWrinkled_item0_rep2_F_marginal, index0, this.CPTWrinkled_item0_rep2_F[index0]);
				// Message to 'CPTWrinkled_item1_rep' from Replicate factor
				this.CPTWrinkled_item1_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item1_rep_B[index0], this.CPTWrinkled_item1_rep_F_marginal, index0, this.CPTWrinkled_item1_rep_F[index0]);
				// Message to 'CPTWrinkled_item0_rep' from Replicate factor
				this.CPTWrinkled_item0_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.CPTWrinkled_item0_rep_B[index0], this.CPTWrinkled_item0_rep_F_marginal, index0, this.CPTWrinkled_item0_rep_F[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numExample and ProbWrinkledPrior and Wrinkled and must reset on changes to Burning and MultPages and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and Quality</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Message to 'Paper_index0_4_1__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_4_1__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item1_rep2_F[index0]));
				// Message to 'Paper_index0_4_1__selector_cases_1' from Replicate factor
				this.Paper_index0_4_1__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_cases_1_uses_B[index0], this.Paper_index0_4_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_4_1__selector_cases' from Copy factor
				this.Paper_index0_4_1__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_1__selector_cases_B[index0][1], this.Paper_index0_4_1__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_4_1__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_4_1__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item0_rep2_F[index0]));
				// Message to 'Paper_index0_4_1__selector_cases_0' from Replicate factor
				this.Paper_index0_4_1__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_1__selector_cases_0_uses_B[index0], this.Paper_index0_4_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_4_1__selector_cases' from Copy factor
				this.Paper_index0_4_1__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_1__selector_cases_B[index0][0], this.Paper_index0_4_1__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_4_1__selector_uses' from Cases factor
				this.Paper_index0_4_1__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_4_1__selector_cases_B[index0]);
				// Message to 'Paper_index0_4_0__selector_cases_1_uses' from Bernoulli factor
				this.Paper_index0_4_0__selector_cases_1_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item1_rep_F[index0]));
				// Message to 'Paper_index0_4_0__selector_cases_1' from Replicate factor
				this.Paper_index0_4_0__selector_cases_1_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_cases_1_uses_B[index0], this.Paper_index0_4_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_4_0__selector_cases' from Copy factor
				this.Paper_index0_4_0__selector_cases_B[index0][1] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_0__selector_cases_B[index0][1], this.Paper_index0_4_0__selector_cases_1_B[index0]);
				// Message to 'Paper_index0_4_0__selector_cases_0_uses' from Bernoulli factor
				this.Paper_index0_4_0__selector_cases_0_uses_B[index0][2] = Bernoulli.FromLogOdds(BernoulliFromBetaOp.LogEvidenceRatio(this.wrinkled[index0], this.CPTWrinkled_item0_rep_F[index0]));
				// Message to 'Paper_index0_4_0__selector_cases_0' from Replicate factor
				this.Paper_index0_4_0__selector_cases_0_B[index0] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(this.Paper_index0_4_0__selector_cases_0_uses_B[index0], this.Paper_index0_4_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_4_0__selector_cases' from Copy factor
				this.Paper_index0_4_0__selector_cases_B[index0][0] = ArrayHelper.SetTo<Bernoulli>(this.Paper_index0_4_0__selector_cases_B[index0][0], this.Paper_index0_4_0__selector_cases_0_B[index0]);
				// Message to 'Paper_index0_4_0__selector_uses' from Cases factor
				this.Paper_index0_4_0__selector_uses_B[index0][0] = CasesOp.BAverageConditional(this.Paper_index0_4_0__selector_cases_B[index0]);
			}
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone = true;
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbBurningPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised)) {
				return ;
			}
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Message to 'CPTBurning' from Random factor
				this.CPTBurning_F[fuseRange] = ArrayHelper.SetTo<Beta>(this.CPTBurning_F[fuseRange], this.probBurningPrior[fuseRange]);
			}
			// Message to 'CPTBurning_rep2' from Replicate factor
			this.CPTBurning_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTBurning_rep2_B_toDef, this.CPTBurning_F[1], this.CPTBurning_rep2_F_marginal);
			// Message to 'CPTBurning_rep' from Replicate factor
			this.CPTBurning_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTBurning_rep_B_toDef, this.CPTBurning_F[0], this.CPTBurning_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbDrumPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised)) {
				return ;
			}
			// Message to 'ProbDrum_rep' from Replicate factor
			this.ProbDrum_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probDrumPrior);
			// Message to 'ProbDrum_rep' from Replicate factor
			this.ProbDrum_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.probDrumPrior);
			this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbFusePrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised)) {
				return ;
			}
			// Message to 'ProbFuse_rep' from Replicate factor
			this.ProbFuse_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.probFusePrior);
			// Message to 'ProbFuse_rep' from Replicate factor
			this.ProbFuse_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probFusePrior);
			this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbMultPagesPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised)) {
				return ;
			}
			for(int paperRange = 0; paperRange<2; paperRange++) {
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					// Message to 'CPTMultPages' from Random factor
					this.CPTMultPages_F[paperRange][rollerRange] = ArrayHelper.SetTo<Beta>(this.CPTMultPages_F[paperRange][rollerRange], this.probMultPagesPrior[paperRange][rollerRange]);
				}
			}
			// Message to 'CPTMultPages_item1_rep2' from Replicate factor
			this.CPTMultPages_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item1_rep2_B_toDef, this.CPTMultPages_F[1][1], this.CPTMultPages_item1_rep2_F_marginal);
			// Message to 'CPTMultPages_item0_rep2' from Replicate factor
			this.CPTMultPages_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item0_rep2_B_toDef, this.CPTMultPages_F[0][1], this.CPTMultPages_item0_rep2_F_marginal);
			// Message to 'CPTMultPages_item1_rep' from Replicate factor
			this.CPTMultPages_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item1_rep_B_toDef, this.CPTMultPages_F[1][0], this.CPTMultPages_item1_rep_F_marginal);
			// Message to 'CPTMultPages_item0_rep' from Replicate factor
			this.CPTMultPages_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTMultPages_item0_rep_B_toDef, this.CPTMultPages_F[0][0], this.CPTMultPages_item0_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbPaperJamPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised)) {
				return ;
			}
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					// Message to 'CPTPaperJam' from Random factor
					this.CPTPaperJam_F[fuseRange][rollerRange] = ArrayHelper.SetTo<Beta>(this.CPTPaperJam_F[fuseRange][rollerRange], this.probPaperJamPrior[fuseRange][rollerRange]);
				}
			}
			// Message to 'CPTPaperJam_item1_rep2' from Replicate factor
			this.CPTPaperJam_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item1_rep2_B_toDef, this.CPTPaperJam_F[1][1], this.CPTPaperJam_item1_rep2_F_marginal);
			// Message to 'CPTPaperJam_item0_rep2' from Replicate factor
			this.CPTPaperJam_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item0_rep2_B_toDef, this.CPTPaperJam_F[0][1], this.CPTPaperJam_item0_rep2_F_marginal);
			// Message to 'CPTPaperJam_item1_rep' from Replicate factor
			this.CPTPaperJam_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item1_rep_B_toDef, this.CPTPaperJam_F[1][0], this.CPTPaperJam_item1_rep_F_marginal);
			// Message to 'CPTPaperJam_item0_rep' from Replicate factor
			this.CPTPaperJam_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTPaperJam_item0_rep_B_toDef, this.CPTPaperJam_F[0][0], this.CPTPaperJam_item0_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbPaperPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised)) {
				return ;
			}
			// Message to 'ProbPaper_rep' from Replicate factor
			this.ProbPaper_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probPaperPrior);
			// Message to 'ProbPaper_rep' from Replicate factor
			this.ProbPaper_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.probPaperPrior);
			this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbQualityPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbRollerPrior and ProbTonerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised)) {
				return ;
			}
			for(int paperRange = 0; paperRange<2; paperRange++) {
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					for(int drumRange = 0; drumRange<2; drumRange++) {
						// Message to 'CPTQuality' from Random factor
						this.CPTQuality_F[paperRange][tonerRange][drumRange] = ArrayHelper.SetTo<Beta>(this.CPTQuality_F[paperRange][tonerRange][drumRange], this.probQualityPrior[paperRange][tonerRange][drumRange]);
					}
				}
			}
			// Message to 'CPTQuality_item1_item1_rep2' from Replicate factor
			this.CPTQuality_item1_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item1_rep2_B_toDef, this.CPTQuality_F[1][1][1], this.CPTQuality_item1_item1_rep2_F_marginal);
			// Message to 'CPTQuality_item0_item1_rep2' from Replicate factor
			this.CPTQuality_item0_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item1_rep2_B_toDef, this.CPTQuality_F[0][1][1], this.CPTQuality_item0_item1_rep2_F_marginal);
			// Message to 'CPTQuality_item1_item0_rep2' from Replicate factor
			this.CPTQuality_item1_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item0_rep2_B_toDef, this.CPTQuality_F[1][0][1], this.CPTQuality_item1_item0_rep2_F_marginal);
			// Message to 'CPTQuality_item0_item0_rep2' from Replicate factor
			this.CPTQuality_item0_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item0_rep2_B_toDef, this.CPTQuality_F[0][0][1], this.CPTQuality_item0_item0_rep2_F_marginal);
			// Message to 'CPTQuality_item1_item1_rep' from Replicate factor
			this.CPTQuality_item1_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item1_rep_B_toDef, this.CPTQuality_F[1][1][0], this.CPTQuality_item1_item1_rep_F_marginal);
			// Message to 'CPTQuality_item0_item1_rep' from Replicate factor
			this.CPTQuality_item0_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item1_rep_B_toDef, this.CPTQuality_F[0][1][0], this.CPTQuality_item0_item1_rep_F_marginal);
			// Message to 'CPTQuality_item1_item0_rep' from Replicate factor
			this.CPTQuality_item1_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item1_item0_rep_B_toDef, this.CPTQuality_F[1][0][0], this.CPTQuality_item1_item0_rep_F_marginal);
			// Message to 'CPTQuality_item0_item0_rep' from Replicate factor
			this.CPTQuality_item0_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTQuality_item0_item0_rep_B_toDef, this.CPTQuality_F[0][0][0], this.CPTQuality_item0_item0_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbTonerPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbWrinkledPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised)) {
				return ;
			}
			// Message to 'ProbToner_rep' from Replicate factor
			this.ProbToner_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.probTonerPrior);
			// Message to 'ProbToner_rep' from Replicate factor
			this.ProbToner_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.probTonerPrior);
			// Message to 'ProbToner_rep' from Replicate factor
			this.ProbToner_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.ProbToner_rep_B_toDef, this.probTonerPrior, this.ProbToner_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and ProbWrinkledPrior and must reset on changes to Burning and MultPages and numExample and PaperJam and ProbBurningPrior and ProbDrumPrior and ProbFusePrior and ProbMultPagesPrior and ProbPaperJamPrior and ProbPaperPrior and ProbQualityPrior and ProbRollerPrior and ProbTonerPrior and Quality and Wrinkled</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised)) {
				return ;
			}
			for(int paperRange = 0; paperRange<2; paperRange++) {
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					// Message to 'CPTWrinkled' from Random factor
					this.CPTWrinkled_F[paperRange][fuseRange] = ArrayHelper.SetTo<Beta>(this.CPTWrinkled_F[paperRange][fuseRange], this.probWrinkledPrior[paperRange][fuseRange]);
				}
			}
			// Message to 'CPTWrinkled_item1_rep2' from Replicate factor
			this.CPTWrinkled_item1_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item1_rep2_B_toDef, this.CPTWrinkled_F[1][1], this.CPTWrinkled_item1_rep2_F_marginal);
			// Message to 'CPTWrinkled_item0_rep2' from Replicate factor
			this.CPTWrinkled_item0_rep2_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item0_rep2_B_toDef, this.CPTWrinkled_F[0][1], this.CPTWrinkled_item0_rep2_F_marginal);
			// Message to 'CPTWrinkled_item1_rep' from Replicate factor
			this.CPTWrinkled_item1_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item1_rep_B_toDef, this.CPTWrinkled_F[1][0], this.CPTWrinkled_item1_rep_F_marginal);
			// Message to 'CPTWrinkled_item0_rep' from Replicate factor
			this.CPTWrinkled_item0_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.CPTWrinkled_item0_rep_B_toDef, this.CPTWrinkled_F[0][0], this.CPTWrinkled_item0_rep_F_marginal);
			this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isDone = true;
			this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numExample</summary>
		private void Changed_numExample()
		{
			if (this.Changed_numExample_isDone) {
				return ;
			}
			this.numExample_marginal = new PointMass<int>(this.NumExample);
			// Create array for 'ProbFuse_rep' Forwards messages.
			this.ProbFuse_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_uses_B'
			this.Fuse_index0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Fuse_index0__selector_uses' Backwards messages.
				this.Fuse_index0__selector_uses_B[index0] = new Bernoulli[13];
				this.Fuse_index0__selector_uses_B[index0][12] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][11] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][10] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][9] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][8] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][7] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][6] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][5] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][4] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][3] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Fuse_index0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Fuse_index0__selector_cases_B'
			this.Fuse_index0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Fuse_index0__selector_cases' Backwards messages.
				this.Fuse_index0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Fuse_index0__selector_cases_0_uses_B'
			this.Fuse_index0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Fuse_index0__selector_cases_0_uses' Backwards messages.
				this.Fuse_index0__selector_cases_0_uses_B[index0] = new Bernoulli[33];
				this.Fuse_index0__selector_cases_0_uses_B[index0][32] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][31] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][30] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][29] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][28] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][27] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][26] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][25] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][22] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][21] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][20] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][19] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][18] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][17] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][16] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][15] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][14] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][13] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][12] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][11] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][10] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][7] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][6] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][5] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'Fuse' Forwards messages.
			this.Fuse_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_uses_F_marginal'
			this.Fuse_index0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_uses_B_toDef'
			this.Fuse_index0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'CPTBurning_rep' Backwards messages.
			this.CPTBurning_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTBurning_rep' Forwards messages.
			this.CPTBurning_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'Paper_uses' Forwards messages.
			this.Paper_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_uses' Forwards messages.
				this.Paper_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for replicates of 'Paper_index0_2_0__selector_uses_F_marginal'
			this.Paper_index0_2_0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_0__selector_uses_B_toDef'
			this.Paper_index0_2_0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_1__selector_uses_F_marginal'
			this.Paper_index0_2_1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_1__selector_uses_B_toDef'
			this.Paper_index0_2_1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_0__selector_uses_F_marginal'
			this.Paper_index0_3_0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_0__selector_uses_B_toDef'
			this.Paper_index0_3_0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_1__selector_uses_F_marginal'
			this.Paper_index0_3_1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_1__selector_uses_B_toDef'
			this.Paper_index0_3_1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Drum_index0__selector_uses_B'
			this.Drum_index0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Drum_index0__selector_uses' Backwards messages.
				this.Drum_index0__selector_uses_B[index0] = new Bernoulli[11];
				this.Drum_index0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][10] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][9] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][8] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][7] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][6] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][5] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][4] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][3] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Drum_index0__selector_cases_B'
			this.Drum_index0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Drum_index0__selector_cases' Backwards messages.
				this.Drum_index0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Drum_index0__selector_cases_0_uses_B'
			this.Drum_index0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Drum_index0__selector_cases_0_uses' Backwards messages.
				this.Drum_index0__selector_cases_0_uses_B[index0] = new Bernoulli[27];
				this.Drum_index0__selector_cases_0_uses_B[index0][26] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][25] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][24] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][23] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][22] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][21] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][20] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][19] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][18] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][17] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][16] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][15] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][14] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][13] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][12] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][11] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][10] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][9] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][8] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][7] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Drum_index0__selector_uses_F'
			this.Drum_index0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Drum_index0__selector_uses' Forwards messages.
				this.Drum_index0__selector_uses_F[index0] = new Bernoulli[11];
				this.Drum_index0__selector_uses_F[index0][1] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][3] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][4] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][5] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][6] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][7] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][8] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][9] = Bernoulli.Uniform();
				this.Drum_index0__selector_uses_F[index0][10] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool26__0__selector_uses_B'
			this.vbool26__0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__0__selector_uses' Backwards messages.
				this.vbool26__0__selector_uses_B[index0] = new Bernoulli[6];
				this.vbool26__0__selector_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool26__0__selector_cases_B'
			this.vbool26__0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__0__selector_cases' Backwards messages.
				this.vbool26__0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'vbool26__0__selector_cases_0_uses_B'
			this.vbool26__0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__0__selector_cases_0_uses' Backwards messages.
				this.vbool26__0__selector_cases_0_uses_B[index0] = new Bernoulli[15];
				this.vbool26__0__selector_cases_0_uses_B[index0][14] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][13] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][12] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][11] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][10] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][9] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][8] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][7] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_2_0__selector_uses_B'
			this.Paper_index0_2_0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_0__selector_uses' Backwards messages.
				this.Paper_index0_2_0__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_2_0__selector_cases_B'
			this.Paper_index0_2_0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_0__selector_cases' Backwards messages.
				this.Paper_index0_2_0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_2_0__selector_cases_0_uses_B'
			this.Paper_index0_2_0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_0__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_2_0__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool26_F'
			this.vbool26_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_uses_F_marginal'
			this.vbool26__0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_uses_F'
			this.vbool26__0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__0__selector_uses' Forwards messages.
				this.vbool26__0__selector_uses_F[index0] = new Bernoulli[6];
			}
			// Create array for replicates of 'Paper_index0_2_0__selector_uses_F'
			this.Paper_index0_2_0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_0__selector_uses' Forwards messages.
				this.Paper_index0_2_0__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTQuality_item0_item0_rep' Backwards messages.
			this.CPTQuality_item0_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item0_rep' Forwards messages.
			this.CPTQuality_item0_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_0__selector_cases_0_B'
			this.Paper_index0_2_0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_0__selector_cases_1_uses_B'
			this.Paper_index0_2_0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_0__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_2_0__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTQuality_item1_item0_rep' Backwards messages.
			this.CPTQuality_item1_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item0_rep' Forwards messages.
			this.CPTQuality_item1_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_0__selector_cases_1_B'
			this.Paper_index0_2_0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_cases_0_B'
			this.vbool26__0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_cases_1_uses_B'
			this.vbool26__0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__0__selector_cases_1_uses' Backwards messages.
				this.vbool26__0__selector_cases_1_uses_B[index0] = new Bernoulli[15];
				this.vbool26__0__selector_cases_1_uses_B[index0][14] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][13] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][12] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][11] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][10] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][9] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][8] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][7] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.vbool26__0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_2_1__selector_uses_B'
			this.Paper_index0_2_1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_1__selector_uses' Backwards messages.
				this.Paper_index0_2_1__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_2_1__selector_cases_B'
			this.Paper_index0_2_1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_1__selector_cases' Backwards messages.
				this.Paper_index0_2_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_2_1__selector_cases_0_uses_B'
			this.Paper_index0_2_1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_1__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_2_1__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_2_1__selector_uses_F'
			this.Paper_index0_2_1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_1__selector_uses' Forwards messages.
				this.Paper_index0_2_1__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTQuality_item0_item1_rep' Backwards messages.
			this.CPTQuality_item0_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item1_rep' Forwards messages.
			this.CPTQuality_item0_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_1__selector_cases_0_B'
			this.Paper_index0_2_1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_1__selector_cases_1_uses_B'
			this.Paper_index0_2_1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2_1__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_2_1__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_2_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_2_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTQuality_item1_item1_rep' Backwards messages.
			this.CPTQuality_item1_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item1_rep' Forwards messages.
			this.CPTQuality_item1_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_2_1__selector_cases_1_B'
			this.Paper_index0_2_1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_cases_1_B'
			this.vbool26__0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__0__selector_uses_B_toDef'
			this.vbool26__0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_uses_B'
			this.vbool26__1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__1__selector_uses' Backwards messages.
				this.vbool26__1__selector_uses_B[index0] = new Bernoulli[6];
				this.vbool26__1__selector_uses_B[index0][5] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool26__1__selector_cases_B'
			this.vbool26__1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__1__selector_cases' Backwards messages.
				this.vbool26__1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'vbool26__1__selector_cases_0_uses_B'
			this.vbool26__1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__1__selector_cases_0_uses' Backwards messages.
				this.vbool26__1__selector_cases_0_uses_B[index0] = new Bernoulli[15];
				this.vbool26__1__selector_cases_0_uses_B[index0][14] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][13] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][12] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][11] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][10] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][9] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][8] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][7] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_3_0__selector_uses_B'
			this.Paper_index0_3_0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_0__selector_uses' Backwards messages.
				this.Paper_index0_3_0__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_3_0__selector_cases_B'
			this.Paper_index0_3_0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_0__selector_cases' Backwards messages.
				this.Paper_index0_3_0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_3_0__selector_cases_0_uses_B'
			this.Paper_index0_3_0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_0__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_3_0__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'vbool26__1__selector_uses_F_marginal'
			this.vbool26__1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_uses_F'
			this.vbool26__1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__1__selector_uses' Forwards messages.
				this.vbool26__1__selector_uses_F[index0] = new Bernoulli[6];
			}
			// Create array for replicates of 'Paper_index0_3_0__selector_uses_F'
			this.Paper_index0_3_0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_0__selector_uses' Forwards messages.
				this.Paper_index0_3_0__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTQuality_item0_item0_rep2' Backwards messages.
			this.CPTQuality_item0_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item0_rep2' Forwards messages.
			this.CPTQuality_item0_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_0__selector_cases_0_B'
			this.Paper_index0_3_0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_0__selector_cases_1_uses_B'
			this.Paper_index0_3_0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_0__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_3_0__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTQuality_item1_item0_rep2' Backwards messages.
			this.CPTQuality_item1_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item0_rep2' Forwards messages.
			this.CPTQuality_item1_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_0__selector_cases_1_B'
			this.Paper_index0_3_0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_cases_0_B'
			this.vbool26__1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_cases_1_uses_B'
			this.vbool26__1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'vbool26__1__selector_cases_1_uses' Backwards messages.
				this.vbool26__1__selector_cases_1_uses_B[index0] = new Bernoulli[15];
				this.vbool26__1__selector_cases_1_uses_B[index0][14] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][13] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][12] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][11] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][10] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][9] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][8] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][7] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.vbool26__1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_3_1__selector_uses_B'
			this.Paper_index0_3_1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_1__selector_uses' Backwards messages.
				this.Paper_index0_3_1__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_3_1__selector_cases_B'
			this.Paper_index0_3_1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_1__selector_cases' Backwards messages.
				this.Paper_index0_3_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_3_1__selector_cases_0_uses_B'
			this.Paper_index0_3_1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_1__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_3_1__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_3_1__selector_uses_F'
			this.Paper_index0_3_1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_1__selector_uses' Forwards messages.
				this.Paper_index0_3_1__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTQuality_item0_item1_rep2' Backwards messages.
			this.CPTQuality_item0_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item0_item1_rep2' Forwards messages.
			this.CPTQuality_item0_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_1__selector_cases_0_B'
			this.Paper_index0_3_1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_1__selector_cases_1_uses_B'
			this.Paper_index0_3_1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3_1__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_3_1__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_3_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_3_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTQuality_item1_item1_rep2' Backwards messages.
			this.CPTQuality_item1_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTQuality_item1_item1_rep2' Forwards messages.
			this.CPTQuality_item1_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_1__selector_cases_1_B'
			this.Paper_index0_3_1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_cases_1_B'
			this.vbool26__1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'vbool26__1__selector_uses_B_toDef'
			this.vbool26__1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'ProbToner_rep' Backwards messages.
			this.ProbToner_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'ProbToner_rep' Forwards messages.
			this.ProbToner_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'Toner' Forwards messages.
			this.Toner_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Drum_index0__selector_cases_0_B'
			this.Drum_index0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Drum_index0__selector_cases_1_uses_B'
			this.Drum_index0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Drum_index0__selector_cases_1_uses' Backwards messages.
				this.Drum_index0__selector_cases_1_uses_B[index0] = new Bernoulli[27];
				this.Drum_index0__selector_cases_1_uses_B[index0][26] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][25] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][24] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][23] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][22] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][21] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][20] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][19] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][18] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][17] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][16] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][15] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][14] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][13] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][12] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][11] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][10] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][9] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][8] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][7] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Drum_index0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Drum_index0__selector_cases_1_B'
			this.Drum_index0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'Drum' Forwards messages.
			this.Drum_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Drum_index0__selector_uses_B_toDef'
			this.Drum_index0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'ProbDrum_rep' Backwards messages.
			this.ProbDrum_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'ProbDrum_rep' Forwards messages.
			this.ProbDrum_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Drum_index0__selector_uses_F_marginal'
			this.Drum_index0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__B'
			this.Paper_index0__B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_' Backwards messages.
				this.Paper_index0__B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_2_B'
			this.Paper_index0_2_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_2' Backwards messages.
				this.Paper_index0_2_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0__0__B'
			this.Paper_index0__0__B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_3_B'
			this.Paper_index0_3_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_3' Backwards messages.
				this.Paper_index0_3_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0__1__B'
			this.Paper_index0__1__B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'Paper_uses' Backwards messages.
			this.Paper_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_uses' Backwards messages.
				this.Paper_uses_B[index0] = new Bernoulli[3];
			}
			// Create array for replicates of 'Paper_index0_4_0__selector_uses_B'
			this.Paper_index0_4_0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_0__selector_uses' Backwards messages.
				this.Paper_index0_4_0__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_4_0__selector_cases_B'
			this.Paper_index0_4_0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_0__selector_cases' Backwards messages.
				this.Paper_index0_4_0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_4_0__selector_cases_0_uses_B'
			this.Paper_index0_4_0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_0__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_4_0__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_4_0__selector_uses_F_marginal'
			this.Paper_index0_4_0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_0__selector_uses_F'
			this.Paper_index0_4_0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_0__selector_uses' Forwards messages.
				this.Paper_index0_4_0__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTWrinkled_item0_rep' Backwards messages.
			this.CPTWrinkled_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTWrinkled_item0_rep' Forwards messages.
			this.CPTWrinkled_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_0__selector_cases_0_B'
			this.Paper_index0_4_0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_0__selector_cases_1_uses_B'
			this.Paper_index0_4_0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_0__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_4_0__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTWrinkled_item1_rep' Backwards messages.
			this.CPTWrinkled_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTWrinkled_item1_rep' Forwards messages.
			this.CPTWrinkled_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_0__selector_cases_1_B'
			this.Paper_index0_4_0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_0__selector_uses_B_toDef'
			this.Paper_index0_4_0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_uses_B'
			this.Paper_index0_4_1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_1__selector_uses' Backwards messages.
				this.Paper_index0_4_1__selector_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_4_1__selector_cases_B'
			this.Paper_index0_4_1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_1__selector_cases' Backwards messages.
				this.Paper_index0_4_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0_4_1__selector_cases_0_uses_B'
			this.Paper_index0_4_1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_1__selector_cases_0_uses' Backwards messages.
				this.Paper_index0_4_1__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0_4_1__selector_uses_F_marginal'
			this.Paper_index0_4_1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_uses_F'
			this.Paper_index0_4_1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_1__selector_uses' Forwards messages.
				this.Paper_index0_4_1__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTWrinkled_item0_rep2' Backwards messages.
			this.CPTWrinkled_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTWrinkled_item0_rep2' Forwards messages.
			this.CPTWrinkled_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_cases_0_B'
			this.Paper_index0_4_1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_cases_1_uses_B'
			this.Paper_index0_4_1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0_4_1__selector_cases_1_uses' Backwards messages.
				this.Paper_index0_4_1__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Paper_index0_4_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0_4_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTWrinkled_item1_rep2' Backwards messages.
			this.CPTWrinkled_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTWrinkled_item1_rep2' Forwards messages.
			this.CPTWrinkled_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_cases_1_B'
			this.Paper_index0_4_1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0_4_1__selector_uses_B_toDef'
			this.Paper_index0_4_1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__selector_uses_B'
			this.Paper_index0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0__selector_uses' Backwards messages.
				this.Paper_index0__selector_uses_B[index0] = new Bernoulli[6];
				this.Paper_index0__selector_uses_B[index0][5] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_B[index0][4] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_B[index0][3] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0__selector_cases_B'
			this.Paper_index0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0__selector_cases' Backwards messages.
				this.Paper_index0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Paper_index0__selector_cases_0_uses_B'
			this.Paper_index0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0__selector_cases_0_uses' Backwards messages.
				this.Paper_index0__selector_cases_0_uses_B[index0] = new Bernoulli[15];
				this.Paper_index0__selector_cases_0_uses_B[index0][14] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][13] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][12] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][11] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][10] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][9] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][8] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][7] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][4] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][3] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0__selector_uses_F_marginal'
			this.Paper_index0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__selector_uses_B_toDef'
			this.Paper_index0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__selector_uses_F'
			this.Paper_index0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0__selector_uses' Forwards messages.
				this.Paper_index0__selector_uses_F[index0] = new Bernoulli[6];
			}
			// Create array for replicates of 'Roller_index0__B'
			this.Roller_index0__B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_' Backwards messages.
				this.Roller_index0__B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Roller_index0__0__selector_uses_B'
			this.Roller_index0__0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__0__selector_uses' Backwards messages.
				this.Roller_index0__0__selector_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0__0__selector_cases_B'
			this.Roller_index0__0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__0__selector_cases' Backwards messages.
				this.Roller_index0__0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Roller_index0__0__selector_cases_0_uses_B'
			this.Roller_index0__0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__0__selector_cases_0_uses' Backwards messages.
				this.Roller_index0__0__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'Roller_uses' Forwards messages.
			this.Roller_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_uses' Forwards messages.
				this.Roller_uses_F[index0] = new Bernoulli[2];
			}
			// Create array for replicates of 'Roller_index0__0__selector_uses_F_marginal'
			this.Roller_index0__0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__0__selector_uses_F'
			this.Roller_index0__0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__0__selector_uses' Forwards messages.
				this.Roller_index0__0__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTMultPages_item0_rep' Backwards messages.
			this.CPTMultPages_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTMultPages_item0_rep' Forwards messages.
			this.CPTMultPages_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0__0__selector_cases_0_B'
			this.Roller_index0__0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__0__selector_cases_1_uses_B'
			this.Roller_index0__0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__0__selector_cases_1_uses' Backwards messages.
				this.Roller_index0__0__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTMultPages_item1_rep' Backwards messages.
			this.CPTMultPages_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTMultPages_item1_rep' Forwards messages.
			this.CPTMultPages_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0__0__selector_cases_1_B'
			this.Roller_index0__0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__0__selector_uses_B_toDef'
			this.Roller_index0__0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_uses_B'
			this.Roller_index0__1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__1__selector_uses' Backwards messages.
				this.Roller_index0__1__selector_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0__1__selector_cases_B'
			this.Roller_index0__1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__1__selector_cases' Backwards messages.
				this.Roller_index0__1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Roller_index0__1__selector_cases_0_uses_B'
			this.Roller_index0__1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__1__selector_cases_0_uses' Backwards messages.
				this.Roller_index0__1__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0__1__selector_uses_F_marginal'
			this.Roller_index0__1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_uses_F'
			this.Roller_index0__1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__1__selector_uses' Forwards messages.
				this.Roller_index0__1__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTMultPages_item0_rep2' Backwards messages.
			this.CPTMultPages_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTMultPages_item0_rep2' Forwards messages.
			this.CPTMultPages_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_cases_0_B'
			this.Roller_index0__1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_cases_1_uses_B'
			this.Roller_index0__1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0__1__selector_cases_1_uses' Backwards messages.
				this.Roller_index0__1__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0__1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0__1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTMultPages_item1_rep2' Backwards messages.
			this.CPTMultPages_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTMultPages_item1_rep2' Forwards messages.
			this.CPTMultPages_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_cases_1_B'
			this.Roller_index0__1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0__1__selector_uses_B_toDef'
			this.Roller_index0__1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'Roller_uses' Backwards messages.
			this.Roller_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_uses' Backwards messages.
				this.Roller_uses_B[index0] = new Bernoulli[2];
			}
			// Create array for replicates of 'Roller_index0_2_0__selector_uses_F_marginal'
			this.Roller_index0_2_0__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_0__selector_uses_B_toDef'
			this.Roller_index0_2_0__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_uses_F_marginal'
			this.Roller_index0_2_1__selector_uses_F_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_uses_B_toDef'
			this.Roller_index0_2_1__selector_uses_B_toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_0__selector_uses_B'
			this.Roller_index0_2_0__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_0__selector_uses' Backwards messages.
				this.Roller_index0_2_0__selector_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_0__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0_2_0__selector_cases_B'
			this.Roller_index0_2_0__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_0__selector_cases' Backwards messages.
				this.Roller_index0_2_0__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Roller_index0_2_0__selector_cases_0_uses_B'
			this.Roller_index0_2_0__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_0__selector_cases_0_uses' Backwards messages.
				this.Roller_index0_2_0__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_0__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0_2_0__selector_uses_F'
			this.Roller_index0_2_0__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_0__selector_uses' Forwards messages.
				this.Roller_index0_2_0__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTPaperJam_item0_rep' Backwards messages.
			this.CPTPaperJam_item0_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTPaperJam_item0_rep' Forwards messages.
			this.CPTPaperJam_item0_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_0__selector_cases_0_B'
			this.Roller_index0_2_0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_0__selector_cases_1_uses_B'
			this.Roller_index0_2_0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_0__selector_cases_1_uses' Backwards messages.
				this.Roller_index0_2_0__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTPaperJam_item1_rep' Backwards messages.
			this.CPTPaperJam_item1_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTPaperJam_item1_rep' Forwards messages.
			this.CPTPaperJam_item1_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_0__selector_cases_1_B'
			this.Roller_index0_2_0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_uses_B'
			this.Roller_index0_2_1__selector_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_1__selector_uses' Backwards messages.
				this.Roller_index0_2_1__selector_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_1__selector_uses_B[index0][2] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_uses_B[index0][1] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0_2_1__selector_cases_B'
			this.Roller_index0_2_1__selector_cases_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumExample);
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_1__selector_cases' Backwards messages.
				this.Roller_index0_2_1__selector_cases_B[index0] = new DistributionStructArray<Bernoulli,bool>(2);
			}
			// Create array for replicates of 'Roller_index0_2_1__selector_cases_0_uses_B'
			this.Roller_index0_2_1__selector_cases_0_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_1__selector_cases_0_uses' Backwards messages.
				this.Roller_index0_2_1__selector_cases_0_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_1__selector_cases_0_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_cases_0_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Roller_index0_2_1__selector_uses_F'
			this.Roller_index0_2_1__selector_uses_F = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_1__selector_uses' Forwards messages.
				this.Roller_index0_2_1__selector_uses_F[index0] = new Bernoulli[3];
			}
			// Create array for 'CPTPaperJam_item0_rep2' Backwards messages.
			this.CPTPaperJam_item0_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTPaperJam_item0_rep2' Forwards messages.
			this.CPTPaperJam_item0_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_cases_0_B'
			this.Roller_index0_2_1__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_cases_1_uses_B'
			this.Roller_index0_2_1__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Roller_index0_2_1__selector_cases_1_uses' Backwards messages.
				this.Roller_index0_2_1__selector_cases_1_uses_B[index0] = new Bernoulli[3];
				this.Roller_index0_2_1__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Roller_index0_2_1__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTPaperJam_item1_rep2' Backwards messages.
			this.CPTPaperJam_item1_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTPaperJam_item1_rep2' Forwards messages.
			this.CPTPaperJam_item1_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Roller_index0_2_1__selector_cases_1_B'
			this.Roller_index0_2_1__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'Probroller_rep' Forwards messages.
			this.Probroller_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'Roller' Forwards messages.
			this.Roller_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__selector_cases_0_B'
			this.Paper_index0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_index0__selector_cases_1_uses_B'
			this.Paper_index0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Paper_index0__selector_cases_1_uses' Backwards messages.
				this.Paper_index0__selector_cases_1_uses_B[index0] = new Bernoulli[15];
				this.Paper_index0__selector_cases_1_uses_B[index0][14] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][13] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][12] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][11] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][10] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][9] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][8] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][7] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][2] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Paper_index0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for replicates of 'Paper_index0__selector_cases_1_B'
			this.Paper_index0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'Paper' Forwards messages.
			this.Paper_F = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Paper_uses_B_index0__toDef'
			this.Paper_uses_B_index0__toDef = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'ProbPaper_rep' Backwards messages.
			this.ProbPaper_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'ProbPaper_rep' Forwards messages.
			this.ProbPaper_rep_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Paper_uses_F_index0__marginal'
			this.Paper_uses_F_index0__marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_cases_0_B'
			this.Fuse_index0__selector_cases_0_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_cases_1_uses_B'
			this.Fuse_index0__selector_cases_1_uses_B = new Bernoulli[this.NumExample][];
			for(int index0 = 0; index0<this.NumExample; index0++) {
				// Create array for 'Fuse_index0__selector_cases_1_uses' Backwards messages.
				this.Fuse_index0__selector_cases_1_uses_B[index0] = new Bernoulli[33];
				this.Fuse_index0__selector_cases_1_uses_B[index0][32] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][31] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][30] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][29] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][28] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][27] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][26] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][25] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][22] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][21] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][20] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][19] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][18] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][17] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][16] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][15] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][14] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][13] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][12] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][11] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][10] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][7] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][6] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][5] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][4] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][3] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][1] = Bernoulli.Uniform();
				this.Fuse_index0__selector_cases_1_uses_B[index0][0] = Bernoulli.Uniform();
			}
			// Create array for 'CPTBurning_rep2' Backwards messages.
			this.CPTBurning_rep2_B = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for 'CPTBurning_rep2' Forwards messages.
			this.CPTBurning_rep2_F = new DistributionStructArray<Beta,double>(this.NumExample);
			// Create array for replicates of 'Fuse_index0__selector_cases_1_B'
			this.Fuse_index0__selector_cases_1_B = new DistributionStructArray<Bernoulli,bool>(this.NumExample);
			// Create array for 'ProbFuse_rep' Backwards messages.
			this.ProbFuse_rep_B = new DistributionStructArray<Beta,double>(this.NumExample);
			this.Changed_numExample_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and PaperJam</summary>
		private void Changed_numExample_PaperJam()
		{
			if (this.Changed_numExample_PaperJam_isDone) {
				return ;
			}
			this.PaperJam_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.PaperJam_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.PaperJam_marginal, this.paperJam);
			this.Changed_numExample_PaperJam_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Quality</summary>
		private void Changed_numExample_Quality()
		{
			if (this.Changed_numExample_Quality_isDone) {
				return ;
			}
			this.Quality_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Quality_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Quality_marginal, this.quality);
			this.Changed_numExample_Quality_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numExample and Wrinkled</summary>
		private void Changed_numExample_Wrinkled()
		{
			if (this.Changed_numExample_Wrinkled_isDone) {
				return ;
			}
			this.Wrinkled_marginal = new DistributionStructArray<Bernoulli,bool>(this.NumExample, delegate(int index0) {
				return Bernoulli.Uniform();
			});
			this.Wrinkled_marginal = Distribution.SetPoint<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Wrinkled_marginal, this.wrinkled);
			this.Changed_numExample_Wrinkled_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbBurningPrior</summary>
		private void Changed_ProbBurningPrior()
		{
			if (this.Changed_ProbBurningPrior_isDone) {
				return ;
			}
			this.ProbBurningPrior_marginal = new PointMass<Beta[]>(this.probBurningPrior);
			this.Changed_ProbBurningPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbDrumPrior</summary>
		private void Changed_ProbDrumPrior()
		{
			if (this.Changed_ProbDrumPrior_isDone) {
				return ;
			}
			this.ProbDrumPrior_marginal = new PointMass<Beta>(this.probDrumPrior);
			this.Changed_ProbDrumPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbFusePrior</summary>
		private void Changed_ProbFusePrior()
		{
			if (this.Changed_ProbFusePrior_isDone) {
				return ;
			}
			this.ProbFusePrior_marginal = new PointMass<Beta>(this.probFusePrior);
			this.Changed_ProbFusePrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbMultPagesPrior</summary>
		private void Changed_ProbMultPagesPrior()
		{
			if (this.Changed_ProbMultPagesPrior_isDone) {
				return ;
			}
			this.ProbMultPagesPrior_marginal = new PointMass<Beta[][]>(this.probMultPagesPrior);
			this.Changed_ProbMultPagesPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbPaperJamPrior</summary>
		private void Changed_ProbPaperJamPrior()
		{
			if (this.Changed_ProbPaperJamPrior_isDone) {
				return ;
			}
			this.ProbPaperJamPrior_marginal = new PointMass<Beta[][]>(this.probPaperJamPrior);
			this.Changed_ProbPaperJamPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbPaperPrior</summary>
		private void Changed_ProbPaperPrior()
		{
			if (this.Changed_ProbPaperPrior_isDone) {
				return ;
			}
			this.ProbPaperPrior_marginal = new PointMass<Beta>(this.probPaperPrior);
			this.Changed_ProbPaperPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbQualityPrior</summary>
		private void Changed_ProbQualityPrior()
		{
			if (this.Changed_ProbQualityPrior_isDone) {
				return ;
			}
			this.ProbQualityPrior_marginal = new PointMass<Beta[][][]>(this.probQualityPrior);
			this.Changed_ProbQualityPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbRollerPrior</summary>
		private void Changed_ProbRollerPrior()
		{
			if (this.Changed_ProbRollerPrior_isDone) {
				return ;
			}
			this.ProbRollerPrior_marginal = new PointMass<Beta>(this.probRollerPrior);
			this.Changed_ProbRollerPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbTonerPrior</summary>
		private void Changed_ProbTonerPrior()
		{
			if (this.Changed_ProbTonerPrior_isDone) {
				return ;
			}
			this.ProbTonerPrior_marginal = new PointMass<Beta>(this.probTonerPrior);
			this.Changed_ProbTonerPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ProbWrinkledPrior</summary>
		private void Changed_ProbWrinkledPrior()
		{
			if (this.Changed_ProbWrinkledPrior_isDone) {
				return ;
			}
			this.ProbWrinkledPrior_marginal = new PointMass<Beta[][]>(this.probWrinkledPrior);
			this.Changed_ProbWrinkledPrior_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'CPTBurning' Forwards messages.
			this.CPTBurning_F = new DistributionStructArray<Beta,double>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				this.CPTBurning_F[fuseRange] = Beta.Uniform();
			}
			this.vBernoulli0 = Bernoulli.FromLogOdds(double.PositiveInfinity);
			// Create array for 'CPTQuality' Forwards messages.
			this.CPTQuality_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTQuality' Forwards messages.
				this.CPTQuality_F[paperRange] = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
				for(int tonerRange = 0; tonerRange<2; tonerRange++) {
					// Create array for 'CPTQuality' Forwards messages.
					this.CPTQuality_F[paperRange][tonerRange] = new DistributionStructArray<Beta,double>(2);
					for(int drumRange = 0; drumRange<2; drumRange++) {
						this.CPTQuality_F[paperRange][tonerRange][drumRange] = Beta.Uniform();
					}
				}
			}
			// Create array for 'CPTWrinkled' Forwards messages.
			this.CPTWrinkled_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTWrinkled' Forwards messages.
				this.CPTWrinkled_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int fuseRange = 0; fuseRange<2; fuseRange++) {
					this.CPTWrinkled_F[paperRange][fuseRange] = Beta.Uniform();
				}
			}
			// Create array for 'CPTMultPages' Forwards messages.
			this.CPTMultPages_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int paperRange = 0; paperRange<2; paperRange++) {
				// Create array for 'CPTMultPages' Forwards messages.
				this.CPTMultPages_F[paperRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTMultPages_F[paperRange][rollerRange] = Beta.Uniform();
				}
			}
			// Create array for 'CPTPaperJam' Forwards messages.
			this.CPTPaperJam_F = new DistributionRefArray<DistributionStructArray<Beta,double>,double[]>(2);
			for(int fuseRange = 0; fuseRange<2; fuseRange++) {
				// Create array for 'CPTPaperJam' Forwards messages.
				this.CPTPaperJam_F[fuseRange] = new DistributionStructArray<Beta,double>(2);
				for(int rollerRange = 0; rollerRange<2; rollerRange++) {
					this.CPTPaperJam_F[fuseRange][rollerRange] = Beta.Uniform();
				}
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTBurning' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> CPTBurningMarginal()
		{
			return this.CPTBurning_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTMultPages' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTMultPagesMarginal()
		{
			return this.CPTMultPages_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTPaperJam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTPaperJamMarginal()
		{
			return this.CPTPaperJam_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTQuality' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Beta,double>,double[]>,double[][]> CPTQualityMarginal()
		{
			return this.CPTQuality_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'CPTWrinkled' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Beta,double>,double[]> CPTWrinkledMarginal()
		{
			return this.CPTWrinkled_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Drum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> DrumMarginal()
		{
			return this.Drum_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21_isDone = false;
					this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44_isDone = false;
					this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29_isDone = false;
					this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30_isDone = false;
					this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46_isDone = false;
					this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47_isDone = false;
				}
				this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16_isDone = false;
			}
			this.Constant();
			this.Changed_numberOfIterationsDecreased_ProbPaperPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu28(initialise);
			this.Changed_numberOfIterationsDecreased_ProbDrumPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur24(initialise);
			this.Changed_numberOfIterationsDecreased_ProbTonerPrior_Init_Burning_MultPages_numExample_PaperJam_ProbBu23(initialise);
			this.Changed_numberOfIterationsDecreased_Init_Burning_MultPages_numExample_PaperJam_ProbBurningPrior_Prob20(initialise);
			this.Changed_numberOfIterationsDecreased_ProbPaperJamPrior_Init_Burning_MultPages_numExample_PaperJam_Pro27(initialise);
			this.Changed_numberOfIterationsDecreased_ProbMultPagesPrior_Init_Burning_MultPages_numExample_PaperJam_Pr26(initialise);
			this.Changed_numberOfIterationsDecreased_ProbWrinkledPrior_Init_Burning_MultPages_numExample_PaperJam_Pro25(initialise);
			this.Changed_numberOfIterationsDecreased_ProbQualityPrior_Init_Burning_MultPages_numExample_PaperJam_Prob22(initialise);
			this.Changed_numberOfIterationsDecreased_ProbBurningPrior_Init_Burning_MultPages_numExample_PaperJam_Prob21(initialise);
			this.Changed_numberOfIterationsDecreased_ProbFusePrior_Init_Burning_MultPages_numExample_PaperJam_ProbBur18(initialise);
			this.Changed_numExample_PaperJam();
			this.Changed_MultPages_numExample();
			this.Changed_numExample_Wrinkled();
			this.Changed_numExample_Quality();
			this.Changed_Burning_numExample();
			this.Changed_ProbPaperJamPrior();
			this.Changed_ProbMultPagesPrior();
			this.Changed_ProbWrinkledPrior();
			this.Changed_ProbQualityPrior();
			this.Changed_ProbBurningPrior();
			this.Changed_ProbRollerPrior();
			this.Changed_ProbPaperPrior();
			this.Changed_ProbTonerPrior();
			this.Changed_ProbDrumPrior();
			this.Changed_ProbFusePrior();
			this.Changed_numExample();
			this.Changed_numberOfIterationsDecreased_numExample_Init_Burning_MultPages_PaperJam_ProbBurningPrior_Prob19(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_Burning_MultPages_PaperJam_Prob44(initialise);
			this.Changed_Burning_numberOfIterationsDecreased_numExample_ProbBurningPrior_Init_MultPages_PaperJam_Prob45(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Init_Burning_MultPages_PaperJam_Pro41(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbWrinkledPrior_Wrinkled_Init_Burning_MultPages_Pap42(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbTonerPrior_Init_Burning_MultPages_PaperJam_ProbBu35(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Init_Burning_MultPages_PaperJam_Prob33(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_Quality_Init_Burning_MultPages_Paper34(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbQualityPrior_ProbTonerPrior_Quality_Init_Burning_36(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbQualityPrior_ProbTonerPrior_Quality37(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_MultPages_PaperJam_Pr31(initialise);
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbMultPagesPrior_Init_Burning_PaperJam_Pr32(initialise);
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbQualit38(initialise);
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP39(initialise);
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_ProbDrumPrior_ProbMultPagesPrior_ProbPaperP43(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_ProbPaperJamPrior_Init_Burning_MultPages_PaperJam_Pro29(initialise);
			this.Changed_numberOfIterationsDecreased_numExample_PaperJam_ProbPaperJamPrior_Init_Burning_MultPages_Pro30(initialise);
			this.Changed_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbDrumPrior_ProbMultPagesPrior_P40(initialise);
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP46(initialise);
			this.Changed_Burning_MultPages_numberOfIterationsDecreased_numExample_PaperJam_ProbBurningPrior_ProbDrumP47(initialise);
			this.Changed_Burning_MultPages_numberOfIterations_numExample_PaperJam_ProbBurningPrior_ProbDrumPrior_Prob16(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Fuse' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> FuseMarginal()
		{
			return this.Fuse_marginal_F;
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="numExample") {
				return this.numExample;
			}
			if (variableName=="ProbFusePrior") {
				return this.ProbFusePrior;
			}
			if (variableName=="ProbDrumPrior") {
				return this.ProbDrumPrior;
			}
			if (variableName=="ProbTonerPrior") {
				return this.ProbTonerPrior;
			}
			if (variableName=="ProbPaperPrior") {
				return this.ProbPaperPrior;
			}
			if (variableName=="ProbRollerPrior") {
				return this.ProbRollerPrior;
			}
			if (variableName=="ProbBurningPrior") {
				return this.ProbBurningPrior;
			}
			if (variableName=="ProbQualityPrior") {
				return this.ProbQualityPrior;
			}
			if (variableName=="ProbWrinkledPrior") {
				return this.ProbWrinkledPrior;
			}
			if (variableName=="ProbMultPagesPrior") {
				return this.ProbMultPagesPrior;
			}
			if (variableName=="ProbPaperJamPrior") {
				return this.ProbPaperJamPrior;
			}
			if (variableName=="Burning") {
				return this.Burning;
			}
			if (variableName=="Quality") {
				return this.Quality;
			}
			if (variableName=="Wrinkled") {
				return this.Wrinkled;
			}
			if (variableName=="MultPages") {
				return this.MultPages;
			}
			if (variableName=="PaperJam") {
				return this.PaperJam;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="PaperJam") {
				return this.PaperJamMarginal();
			}
			if (variableName=="MultPages") {
				return this.MultPagesMarginal();
			}
			if (variableName=="Wrinkled") {
				return this.WrinkledMarginal();
			}
			if (variableName=="Quality") {
				return this.QualityMarginal();
			}
			if (variableName=="Burning") {
				return this.BurningMarginal();
			}
			if (variableName=="ProbPaperJamPrior") {
				return this.ProbPaperJamPriorMarginal();
			}
			if (variableName=="ProbMultPagesPrior") {
				return this.ProbMultPagesPriorMarginal();
			}
			if (variableName=="ProbWrinkledPrior") {
				return this.ProbWrinkledPriorMarginal();
			}
			if (variableName=="ProbQualityPrior") {
				return this.ProbQualityPriorMarginal();
			}
			if (variableName=="ProbBurningPrior") {
				return this.ProbBurningPriorMarginal();
			}
			if (variableName=="ProbRollerPrior") {
				return this.ProbRollerPriorMarginal();
			}
			if (variableName=="ProbPaperPrior") {
				return this.ProbPaperPriorMarginal();
			}
			if (variableName=="ProbTonerPrior") {
				return this.ProbTonerPriorMarginal();
			}
			if (variableName=="ProbDrumPrior") {
				return this.ProbDrumPriorMarginal();
			}
			if (variableName=="ProbFusePrior") {
				return this.ProbFusePriorMarginal();
			}
			if (variableName=="numExample") {
				return this.NumExampleMarginal();
			}
			if (variableName=="ProbFuse") {
				return this.ProbFuseMarginal();
			}
			if (variableName=="ProbDrum") {
				return this.ProbDrumMarginal();
			}
			if (variableName=="ProbToner") {
				return this.ProbTonerMarginal();
			}
			if (variableName=="ProbPaper") {
				return this.ProbPaperMarginal();
			}
			if (variableName=="Probroller") {
				return this.ProbrollerMarginal();
			}
			if (variableName=="CPTBurning") {
				return this.CPTBurningMarginal();
			}
			if (variableName=="CPTQuality") {
				return this.CPTQualityMarginal();
			}
			if (variableName=="CPTWrinkled") {
				return this.CPTWrinkledMarginal();
			}
			if (variableName=="CPTMultPages") {
				return this.CPTMultPagesMarginal();
			}
			if (variableName=="CPTPaperJam") {
				return this.CPTPaperJamMarginal();
			}
			if (variableName=="Fuse") {
				return this.FuseMarginal();
			}
			if (variableName=="Drum") {
				return this.DrumMarginal();
			}
			if (variableName=="Toner") {
				return this.TonerMarginal();
			}
			if (variableName=="Paper") {
				return this.PaperMarginal();
			}
			if (variableName=="Roller") {
				return this.RollerMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'MultPages' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> MultPagesMarginal()
		{
			return this.MultPages_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'numExample' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NumExampleMarginal()
		{
			return this.numExample_marginal;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'PaperJam' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> PaperJamMarginal()
		{
			return this.PaperJam_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Paper' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> PaperMarginal()
		{
			return this.Paper_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbBurningPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[]> ProbBurningPriorMarginal()
		{
			return this.ProbBurningPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbDrum' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbDrumMarginal()
		{
			return this.ProbDrum_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbDrumPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbDrumPriorMarginal()
		{
			return this.ProbDrumPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbFuse' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbFuseMarginal()
		{
			return this.ProbFuse_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbFusePrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbFusePriorMarginal()
		{
			return this.ProbFusePrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbMultPagesPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbMultPagesPriorMarginal()
		{
			return this.ProbMultPagesPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaperJamPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbPaperJamPriorMarginal()
		{
			return this.ProbPaperJamPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaper' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbPaperMarginal()
		{
			return this.ProbPaper_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbPaperPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbPaperPriorMarginal()
		{
			return this.ProbPaperPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbQualityPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][][]> ProbQualityPriorMarginal()
		{
			return this.ProbQualityPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Probroller' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbrollerMarginal()
		{
			return this.Probroller_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbRollerPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbRollerPriorMarginal()
		{
			return this.ProbRollerPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbToner' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta ProbTonerMarginal()
		{
			return this.ProbToner_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbTonerPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta> ProbTonerPriorMarginal()
		{
			return this.ProbTonerPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'ProbWrinkledPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Beta[][]> ProbWrinkledPriorMarginal()
		{
			return this.ProbWrinkledPrior_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Quality' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> QualityMarginal()
		{
			return this.Quality_marginal;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Roller' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> RollerMarginal()
		{
			return this.Roller_marginal_F;
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="numExample") {
				this.numExample = (int)value;
				return ;
			}
			if (variableName=="ProbFusePrior") {
				this.ProbFusePrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbDrumPrior") {
				this.ProbDrumPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbTonerPrior") {
				this.ProbTonerPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbPaperPrior") {
				this.ProbPaperPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbRollerPrior") {
				this.ProbRollerPrior = (Beta)value;
				return ;
			}
			if (variableName=="ProbBurningPrior") {
				this.ProbBurningPrior = (Beta[])value;
				return ;
			}
			if (variableName=="ProbQualityPrior") {
				this.ProbQualityPrior = (Beta[][][])value;
				return ;
			}
			if (variableName=="ProbWrinkledPrior") {
				this.ProbWrinkledPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="ProbMultPagesPrior") {
				this.ProbMultPagesPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="ProbPaperJamPrior") {
				this.ProbPaperJamPrior = (Beta[][])value;
				return ;
			}
			if (variableName=="Burning") {
				this.Burning = (bool[])value;
				return ;
			}
			if (variableName=="Quality") {
				this.Quality = (bool[])value;
				return ;
			}
			if (variableName=="Wrinkled") {
				this.Wrinkled = (bool[])value;
				return ;
			}
			if (variableName=="MultPages") {
				this.MultPages = (bool[])value;
				return ;
			}
			if (variableName=="PaperJam") {
				this.PaperJam = (bool[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Toner' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> TonerMarginal()
		{
			return this.Toner_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'Wrinkled' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> WrinkledMarginal()
		{
			return this.Wrinkled_marginal;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
